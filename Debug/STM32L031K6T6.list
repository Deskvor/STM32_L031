
STM32L031K6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d90  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004e50  08004e50  00005e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f5c  08004f5c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004f5c  08004f5c  00005f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f64  08004f64  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f64  08004f64  00005f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f68  08004f68  00005f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004f6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  08004fd4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004fd4  000062f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3ef  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002283  00000000  00000000  0001547f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00017708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2c  00000000  00000000  00018558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d55  00000000  00000000  00019084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b80  00000000  00000000  0002bdd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000709a1  00000000  00000000  0003d959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae2fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b60  00000000  00000000  000ae340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b1ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e38 	.word	0x08004e38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004e38 	.word	0x08004e38

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <__io_putchar+0x20>)
 80004c6:	1d39      	adds	r1, r7, #4
 80004c8:	4805      	ldr	r0, [pc, #20]	@ (80004e0 <__io_putchar+0x24>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	f002 ffde 	bl	800348c <HAL_UART_Transmit>

	return ch;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	0018      	movs	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	0000ffff 	.word	0x0000ffff
 80004e0:	20000118 	.word	0x20000118

080004e4 <HAL_TIM_PeriodElapsedCallback>:

// Task 3 (LED Blinky (timer)) an Task 4 (VEML6030 Light sensor)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	// Task 3
	if (htim->Instance == TIM2)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	2380      	movs	r3, #128	@ 0x80
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d104      	bne.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004f8:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80004fa:	2110      	movs	r1, #16
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fee4 	bl	80012ca <HAL_GPIO_TogglePin>
	}

	// Task 4
	if (htim->Instance == TIM2)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	2380      	movs	r3, #128	@ 0x80
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	429a      	cmp	r2, r3
 800050c:	d120      	bne.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		ambient_light = VEML6030_ReadALS(&hi2c1);
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fb63 	bl	8000bdc <VEML6030_ReadALS>
 8000516:	0003      	movs	r3, r0
 8000518:	001a      	movs	r2, r3
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800051c:	801a      	strh	r2, [r3, #0]
		printf("Ambient Light Level: %u lx\n", ambient_light);
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	001a      	movs	r2, r3
 8000524:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f003 fd87 	bl	800403c <iprintf>
		data = VEML6030_ReadRegister(&hi2c1, VEML6030_WHITE_DATA);
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000530:	2105      	movs	r1, #5
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fb8a 	bl	8000c4c <VEML6030_ReadRegister>
 8000538:	0003      	movs	r3, r0
 800053a:	001a      	movs	r2, r3
 800053c:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800053e:	801a      	strh	r2, [r3, #0]
		printf("White Light Level: %u\n", data);
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000548:	0011      	movs	r1, r2
 800054a:	0018      	movs	r0, r3
 800054c:	f003 fd76 	bl	800403c <iprintf>
	}
}
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	50000400 	.word	0x50000400
 800055c:	20000084 	.word	0x20000084
 8000560:	200001a0 	.word	0x200001a0
 8000564:	08004e50 	.word	0x08004e50
 8000568:	200001a2 	.word	0x200001a2
 800056c:	08004e6c 	.word	0x08004e6c

08000570 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000574:	f000 fbd0 	bl	8000d18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000578:	f000 f81c 	bl	80005b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800057c:	f000 f94e 	bl	800081c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000580:	f000 f91c 	bl	80007bc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000584:	f000 f8c4 	bl	8000710 <MX_TIM2_Init>
	MX_I2C1_Init();
 8000588:	f000 f882 	bl	8000690 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2); // Handle TIM2 interrupt and clear interrupt flags (Task 3)
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <main+0x38>)
 800058e:	0018      	movs	r0, r3
 8000590:	f002 fbba 	bl	8002d08 <HAL_TIM_Base_Start_IT>

	VEML6030_Init(&hi2c1);
 8000594:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <main+0x3c>)
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fb0d 	bl	8000bb6 <VEML6030_Init>

	printf("HAL init complete \n");
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <main+0x40>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f003 fdb2 	bl	8004108 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	e7fd      	b.n	80005a4 <main+0x34>
 80005a8:	200000d8 	.word	0x200000d8
 80005ac:	20000084 	.word	0x20000084
 80005b0:	08004e84 	.word	0x08004e84

080005b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b099      	sub	sp, #100	@ 0x64
 80005b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80005ba:	242c      	movs	r4, #44	@ 0x2c
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	0018      	movs	r0, r3
 80005c0:	2334      	movs	r3, #52	@ 0x34
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f003 fe95 	bl	80042f4 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80005ca:	2318      	movs	r3, #24
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2314      	movs	r3, #20
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f003 fe8d 	bl	80042f4 <memset>
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	2318      	movs	r3, #24
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f003 fe86 	bl	80042f4 <memset>
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a27      	ldr	r2, [pc, #156]	@ (800068c <SystemClock_Config+0xd8>)
 80005ee:	401a      	ands	r2, r3
 80005f0:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <SystemClock_Config+0xd4>)
 80005f2:	2180      	movs	r1, #128	@ 0x80
 80005f4:	0109      	lsls	r1, r1, #4
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fa:	0021      	movs	r1, r4
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2210      	movs	r2, #16
 8000600:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2201      	movs	r2, #1
 8000606:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	22a0      	movs	r2, #160	@ 0xa0
 8000612:	0212      	lsls	r2, r2, #8
 8000614:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	187b      	adds	r3, r7, r1
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fc66 	bl	8001ef0 <HAL_RCC_OscConfig>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x78>
	{
		Error_Handler();
 8000628:	f000 f93c 	bl	80008a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800062c:	2118      	movs	r1, #24
 800062e:	187b      	adds	r3, r7, r1
 8000630:	220f      	movs	r2, #15
 8000632:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2100      	movs	r1, #0
 8000650:	0018      	movs	r0, r3
 8000652:	f001 ffc9 	bl	80025e8 <HAL_RCC_ClockConfig>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xaa>
	{
		Error_Handler();
 800065a:	f000 f923 	bl	80008a4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
 800065e:	003b      	movs	r3, r7
 8000660:	220a      	movs	r2, #10
 8000662:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000664:	003b      	movs	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800066a:	003b      	movs	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	003b      	movs	r3, r7
 8000672:	0018      	movs	r0, r3
 8000674:	f002 f9dc 	bl	8002a30 <HAL_RCCEx_PeriphCLKConfig>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xcc>
	{
		Error_Handler();
 800067c:	f000 f912 	bl	80008a4 <Error_Handler>
	}
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b019      	add	sp, #100	@ 0x64
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	40007000 	.word	0x40007000
 800068c:	ffffe7ff 	.word	0xffffe7ff

08000690 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000694:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_I2C1_Init+0x78>)
 8000696:	4a1d      	ldr	r2, [pc, #116]	@ (800070c <MX_I2C1_Init+0x7c>)
 8000698:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000608;
 800069a:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <MX_I2C1_Init+0x78>)
 800069c:	22c1      	movs	r2, #193	@ 0xc1
 800069e:	00d2      	lsls	r2, r2, #3
 80006a0:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ae:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ba:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fe16 	bl	8001300 <HAL_I2C_Init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80006d8:	f000 f8e4 	bl	80008a4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006de:	2100      	movs	r1, #0
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fb6d 	bl	8001dc0 <HAL_I2CEx_ConfigAnalogFilter>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C1_Init+0x5e>
	{
		Error_Handler();
 80006ea:	f000 f8db 	bl	80008a4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_I2C1_Init+0x78>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 fbb0 	bl	8001e58 <HAL_I2CEx_ConfigDigitalFilter>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x70>
	{
		Error_Handler();
 80006fc:	f000 f8d2 	bl	80008a4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	20000084 	.word	0x20000084
 800070c:	40005400 	.word	0x40005400

08000710 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
 8000716:	2308      	movs	r3, #8
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	0018      	movs	r0, r3
 800071c:	2310      	movs	r3, #16
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f003 fde7 	bl	80042f4 <memset>
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 8000726:	003b      	movs	r3, r7
 8000728:	0018      	movs	r0, r3
 800072a:	2308      	movs	r3, #8
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f003 fde0 	bl	80042f4 <memset>
	{ 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_TIM2_Init+0xa4>)
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	05d2      	lsls	r2, r2, #23
 800073a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 2096;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_TIM2_Init+0xa4>)
 800073e:	2283      	movs	r2, #131	@ 0x83
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_TIM2_Init+0xa4>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_TIM2_Init+0xa4>)
 800074c:	4a1a      	ldr	r2, [pc, #104]	@ (80007b8 <MX_TIM2_Init+0xa8>)
 800074e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_TIM2_Init+0xa4>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_TIM2_Init+0xa4>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_TIM2_Init+0xa4>)
 800075e:	0018      	movs	r0, r3
 8000760:	f002 fa92 	bl	8002c88 <HAL_TIM_Base_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000768:	f000 f89c 	bl	80008a4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	2108      	movs	r1, #8
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2280      	movs	r2, #128	@ 0x80
 8000772:	0152      	lsls	r2, r2, #5
 8000774:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000776:	187a      	adds	r2, r7, r1
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_TIM2_Init+0xa4>)
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fbf7 	bl	8002f70 <HAL_TIM_ConfigClockSource>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8000786:	f000 f88d 	bl	80008a4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	003b      	movs	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	003b      	movs	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000796:	003a      	movs	r2, r7
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_TIM2_Init+0xa4>)
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f002 fdc9 	bl	8003334 <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 80007a6:	f000 f87d 	bl	80008a4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b006      	add	sp, #24
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	200000d8 	.word	0x200000d8
 80007b8:	000003e7 	.word	0x000003e7

080007bc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c8:	22e1      	movs	r2, #225	@ 0xe1
 80007ca:	0252      	lsls	r2, r2, #9
 80007cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 8000800:	0018      	movs	r0, r3
 8000802:	f002 fdef 	bl	80033e4 <HAL_UART_Init>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800080a:	f000 f84b 	bl	80008a4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000118 	.word	0x20000118
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000822:	240c      	movs	r4, #12
 8000824:	193b      	adds	r3, r7, r4
 8000826:	0018      	movs	r0, r3
 8000828:	2314      	movs	r3, #20
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f003 fd61 	bl	80042f4 <memset>
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_GPIO_Init+0x80>)
 8000834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000836:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_GPIO_Init+0x80>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_GPIO_Init+0x80>)
 8000840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_GPIO_Init+0x80>)
 800084c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_GPIO_Init+0x80>)
 8000850:	2102      	movs	r1, #2
 8000852:	430a      	orrs	r2, r1
 8000854:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_GPIO_Init+0x80>)
 8000858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085a:	2202      	movs	r2, #2
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LED_Pin, GPIO_PIN_RESET);
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_GPIO_Init+0x84>)
 8000864:	2200      	movs	r2, #0
 8000866:	2118      	movs	r1, #24
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fd11 	bl	8001290 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LD3_Pin LED_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LED_Pin;
 800086e:	0021      	movs	r1, r4
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2218      	movs	r2, #24
 8000874:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2201      	movs	r2, #1
 800087a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	187b      	adds	r3, r7, r1
 800088a:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <MX_GPIO_Init+0x84>)
 800088c:	0019      	movs	r1, r3
 800088e:	0010      	movs	r0, r2
 8000890:	f000 fb90 	bl	8000fb4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b009      	add	sp, #36	@ 0x24
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	50000400 	.word	0x50000400

080008a4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <HAL_MspInit+0x24>)
 80008b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_MspInit+0x24>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	430a      	orrs	r2, r1
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <HAL_MspInit+0x24>)
 80008c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <HAL_MspInit+0x24>)
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	0549      	lsls	r1, r1, #21
 80008ca:	430a      	orrs	r2, r1
 80008cc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b089      	sub	sp, #36	@ 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	240c      	movs	r4, #12
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	0018      	movs	r0, r3
 80008e6:	2314      	movs	r3, #20
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f003 fd02 	bl	80042f4 <memset>
  if(hi2c->Instance==I2C1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a17      	ldr	r2, [pc, #92]	@ (8000954 <HAL_I2C_MspInit+0x7c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d128      	bne.n	800094c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <HAL_I2C_MspInit+0x80>)
 80008fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <HAL_I2C_MspInit+0x80>)
 8000900:	2102      	movs	r1, #2
 8000902:	430a      	orrs	r2, r1
 8000904:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <HAL_I2C_MspInit+0x80>)
 8000908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090a:	2202      	movs	r2, #2
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000912:	0021      	movs	r1, r4
 8000914:	187b      	adds	r3, r7, r1
 8000916:	22c0      	movs	r2, #192	@ 0xc0
 8000918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2212      	movs	r2, #18
 800091e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2201      	movs	r2, #1
 8000924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2203      	movs	r2, #3
 800092a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2201      	movs	r2, #1
 8000930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	187b      	adds	r3, r7, r1
 8000934:	4a09      	ldr	r2, [pc, #36]	@ (800095c <HAL_I2C_MspInit+0x84>)
 8000936:	0019      	movs	r1, r3
 8000938:	0010      	movs	r0, r2
 800093a:	f000 fb3b 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_I2C_MspInit+0x80>)
 8000940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000942:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_I2C_MspInit+0x80>)
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	0389      	lsls	r1, r1, #14
 8000948:	430a      	orrs	r2, r1
 800094a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b009      	add	sp, #36	@ 0x24
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	40005400 	.word	0x40005400
 8000958:	40021000 	.word	0x40021000
 800095c:	50000400 	.word	0x50000400

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	429a      	cmp	r2, r3
 8000972:	d10d      	bne.n	8000990 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <HAL_TIM_Base_MspInit+0x38>)
 8000976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000978:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <HAL_TIM_Base_MspInit+0x38>)
 800097a:	2101      	movs	r1, #1
 800097c:	430a      	orrs	r2, r1
 800097e:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	200f      	movs	r0, #15
 8000986:	f000 fae3 	bl	8000f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800098a:	200f      	movs	r0, #15
 800098c:	f000 faf5 	bl	8000f7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b089      	sub	sp, #36	@ 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	240c      	movs	r4, #12
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	0018      	movs	r0, r3
 80009aa:	2314      	movs	r3, #20
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f003 fca0 	bl	80042f4 <memset>
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a18      	ldr	r2, [pc, #96]	@ (8000a1c <HAL_UART_MspInit+0x80>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d129      	bne.n	8000a12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <HAL_UART_MspInit+0x84>)
 80009c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <HAL_UART_MspInit+0x84>)
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0289      	lsls	r1, r1, #10
 80009c8:	430a      	orrs	r2, r1
 80009ca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <HAL_UART_MspInit+0x84>)
 80009ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <HAL_UART_MspInit+0x84>)
 80009d2:	2101      	movs	r1, #1
 80009d4:	430a      	orrs	r2, r1
 80009d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_UART_MspInit+0x84>)
 80009da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009dc:	2201      	movs	r2, #1
 80009de:	4013      	ands	r3, r2
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80009e4:	0021      	movs	r1, r4
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2202      	movs	r2, #2
 80009f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2203      	movs	r2, #3
 80009fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2204      	movs	r2, #4
 8000a02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	187a      	adds	r2, r7, r1
 8000a06:	23a0      	movs	r3, #160	@ 0xa0
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fad1 	bl	8000fb4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b009      	add	sp, #36	@ 0x24
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40021000 	.word	0x40021000
 8000a24:	00008004 	.word	0x00008004

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f9b6 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <TIM2_IRQHandler+0x14>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 f99c 	bl	8002da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	200000d8 	.word	0x200000d8

08000a74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e00a      	b.n	8000a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a86:	e000      	b.n	8000a8a <_read+0x16>
 8000a88:	bf00      	nop
 8000a8a:	0001      	movs	r1, r0
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	60ba      	str	r2, [r7, #8]
 8000a92:	b2ca      	uxtb	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf0      	blt.n	8000a86 <_read+0x12>
  }

  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b006      	add	sp, #24
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	e009      	b.n	8000ad4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	60ba      	str	r2, [r7, #8]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff fcf7 	bl	80004bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbf1      	blt.n	8000ac0 <_write+0x12>
  }
  return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b006      	add	sp, #24
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_close>:

int _close(int file)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	425b      	negs	r3, r3
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2280      	movs	r2, #128	@ 0x80
 8000b08:	0192      	lsls	r2, r2, #6
 8000b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_isatty>:

int _isatty(int file)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	@ (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	18d3      	adds	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f003 fc16 	bl	80043a0 <__errno>
 8000b74:	0003      	movs	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	18d2      	adds	r2, r2, r3
 8000b8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <_sbrk+0x64>)
 8000b90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b006      	add	sp, #24
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20002000 	.word	0x20002000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	200001a4 	.word	0x200001a4
 8000ba8:	200002f8 	.word	0x200002f8

08000bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <VEML6030_Init>:
#include "veml6030.h"

// Function to initialize VEML6030 sensor
void VEML6030_Init(I2C_HandleTypeDef *hi2c)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	// Set ALS Configuration: Gain x1, Integration time 100ms, No interrupt
	uint16_t als_conf = 0x0000;  // Default config
 8000bbe:	210e      	movs	r1, #14
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	801a      	strh	r2, [r3, #0]
	VEML6030_WriteRegister(hi2c, VEML6030_ALS_CONF, als_conf);
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	881a      	ldrh	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 f812 	bl	8000bf8 <VEML6030_WriteRegister>
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b004      	add	sp, #16
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <VEML6030_ReadALS>:

// Function to read ALS (ambient light sensor) value
uint16_t VEML6030_ReadALS(I2C_HandleTypeDef *hi2c)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	return VEML6030_ReadRegister(hi2c, VEML6030_ALS_DATA);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2104      	movs	r1, #4
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 f82f 	bl	8000c4c <VEML6030_ReadRegister>
 8000bee:	0003      	movs	r3, r0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <VEML6030_WriteRegister>:

// Function to write a 16-bit value to a register
void VEML6030_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint16_t value)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	0008      	movs	r0, r1
 8000c02:	0011      	movs	r1, r2
 8000c04:	1cfb      	adds	r3, r7, #3
 8000c06:	1c02      	adds	r2, r0, #0
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	1c0a      	adds	r2, r1, #0
 8000c0e:	801a      	strh	r2, [r3, #0]
	uint8_t data[3];
	data[0] = reg;              	// Register address
 8000c10:	210c      	movs	r1, #12
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	1cfa      	adds	r2, r7, #3
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	701a      	strb	r2, [r3, #0]
	data[1] = value & 0xFF;      	// Lower byte
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	705a      	strb	r2, [r3, #1]
	data[2] = (value >> 8) & 0xFF; 	// Upper byte
 8000c24:	003b      	movs	r3, r7
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(hi2c, VEML6030_I2C_ADDR << 1, &data[0], 3, 500);
 8000c32:	187a      	adds	r2, r7, r1
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	23fa      	movs	r3, #250	@ 0xfa
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	2120      	movs	r1, #32
 8000c40:	f000 fbf4 	bl	800142c <HAL_I2C_Master_Transmit>
}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b004      	add	sp, #16
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <VEML6030_ReadRegister>:

// Function to read a 16-bit value from a register
uint16_t VEML6030_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg)
{
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	000a      	movs	r2, r1
 8000c56:	1cfb      	adds	r3, r7, #3
 8000c58:	701a      	strb	r2, [r3, #0]
	uint8_t data[2] =
 8000c5a:	210c      	movs	r1, #12
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	801a      	strh	r2, [r3, #0]
	{ 0 };

	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, VEML6030_I2C_ADDR << 1, reg, 1, &data[0], 2, 500);
 8000c62:	1cfb      	adds	r3, r7, #3
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	250f      	movs	r5, #15
 8000c6a:	197c      	adds	r4, r7, r5
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	23fa      	movs	r3, #250	@ 0xfa
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	2302      	movs	r3, #2
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	2120      	movs	r1, #32
 8000c80:	f000 fcdc 	bl	800163c <HAL_I2C_Mem_Read>
 8000c84:	0003      	movs	r3, r0
 8000c86:	7023      	strb	r3, [r4, #0]

	if (status != HAL_OK)
 8000c88:	197b      	adds	r3, r7, r5
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d008      	beq.n	8000ca2 <VEML6030_ReadRegister+0x56>
	{
		printf("VEML6030 Register Read Error: %d\n", status);
 8000c90:	197b      	adds	r3, r7, r5
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <VEML6030_ReadRegister+0x74>)
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f003 f9cf 	bl	800403c <iprintf>
		return 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e00a      	b.n	8000cb8 <VEML6030_ReadRegister+0x6c>
	}
	return (uint16_t) (data[1] << 8 | data[0]);
 8000ca2:	210c      	movs	r1, #12
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	785b      	ldrb	r3, [r3, #1]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	b29b      	uxth	r3, r3
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b004      	add	sp, #16
 8000cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc0:	08004e98 	.word	0x08004e98

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff ff70 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f003 fb5b 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fc3b 	bl	8000570 <main>

08000cfa <LoopForever>:

LoopForever:
    b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
   ldr   r0, =_estack
 8000cfc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d08:	08004f6c 	.word	0x08004f6c
  ldr r2, =_sbss
 8000d0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d10:	200002f8 	.word	0x200002f8

08000d14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_COMP_IRQHandler>
	...

08000d18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x3c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_Init+0x3c>)
 8000d2a:	2140      	movs	r1, #64	@ 0x40
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f811 	bl	8000d58 <HAL_InitTick>
 8000d36:	1e03      	subs	r3, r0, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e001      	b.n	8000d46 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d42:	f7ff fdb5 	bl	80008b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d62:	681c      	ldr	r4, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_InitTick+0x60>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	0019      	movs	r1, r3
 8000d6a:	23fa      	movs	r3, #250	@ 0xfa
 8000d6c:	0098      	lsls	r0, r3, #2
 8000d6e:	f7ff f9d5 	bl	800011c <__udivsi3>
 8000d72:	0003      	movs	r3, r0
 8000d74:	0019      	movs	r1, r3
 8000d76:	0020      	movs	r0, r4
 8000d78:	f7ff f9d0 	bl	800011c <__udivsi3>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 f90b 	bl	8000f9a <HAL_SYSTICK_Config>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e00f      	b.n	8000dac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d80b      	bhi.n	8000daa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	2301      	movs	r3, #1
 8000d96:	425b      	negs	r3, r3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 f8d8 	bl	8000f50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_InitTick+0x64>)
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b003      	add	sp, #12
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	001a      	movs	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	18d2      	adds	r2, r2, r3
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200001a8 	.word	0x200001a8

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	@ (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	200001a8 	.word	0x200001a8

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	0002      	movs	r2, r0
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e0a:	d809      	bhi.n	8000e20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	001a      	movs	r2, r3
 8000e12:	231f      	movs	r3, #31
 8000e14:	401a      	ands	r2, r3
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_EnableIRQ+0x30>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4091      	lsls	r1, r2
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
  }
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	0002      	movs	r2, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e40:	d828      	bhi.n	8000e94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e42:	4a2f      	ldr	r2, [pc, #188]	@ (8000f00 <__NVIC_SetPriority+0xd4>)
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	33c0      	adds	r3, #192	@ 0xc0
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	589b      	ldr	r3, [r3, r2]
 8000e52:	1dfa      	adds	r2, r7, #7
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	0011      	movs	r1, r2
 8000e58:	2203      	movs	r2, #3
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	21ff      	movs	r1, #255	@ 0xff
 8000e60:	4091      	lsls	r1, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	401a      	ands	r2, r3
 8000e68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	019b      	lsls	r3, r3, #6
 8000e6e:	22ff      	movs	r2, #255	@ 0xff
 8000e70:	401a      	ands	r2, r3
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	0018      	movs	r0, r3
 8000e78:	2303      	movs	r3, #3
 8000e7a:	4003      	ands	r3, r0
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e80:	481f      	ldr	r0, [pc, #124]	@ (8000f00 <__NVIC_SetPriority+0xd4>)
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	33c0      	adds	r3, #192	@ 0xc0
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e92:	e031      	b.n	8000ef8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e94:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <__NVIC_SetPriority+0xd8>)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	3b08      	subs	r3, #8
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3306      	adds	r3, #6
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	18d3      	adds	r3, r2, r3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	1dfa      	adds	r2, r7, #7
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	00d2      	lsls	r2, r2, #3
 8000eba:	21ff      	movs	r1, #255	@ 0xff
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	43d2      	mvns	r2, r2
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	22ff      	movs	r2, #255	@ 0xff
 8000ecc:	401a      	ands	r2, r3
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	4003      	ands	r3, r0
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <__NVIC_SetPriority+0xd8>)
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	001c      	movs	r4, r3
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	4023      	ands	r3, r4
 8000ee8:	3b08      	subs	r3, #8
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	430a      	orrs	r2, r1
 8000eee:	3306      	adds	r3, #6
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	18c3      	adds	r3, r0, r3
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b003      	add	sp, #12
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	2380      	movs	r3, #128	@ 0x80
 8000f16:	045b      	lsls	r3, r3, #17
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d301      	bcc.n	8000f20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e010      	b.n	8000f42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f20:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <SysTick_Config+0x44>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	3a01      	subs	r2, #1
 8000f26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f28:	2301      	movs	r3, #1
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff ff7c 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <SysTick_Config+0x44>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <SysTick_Config+0x44>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	1c02      	adds	r2, r0, #0
 8000f60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	0002      	movs	r2, r0
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ff33 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ffaf 	bl	8000f08 <SysTick_Config>
 8000faa:	0003      	movs	r3, r0
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fca:	e149      	b.n	8001260 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d100      	bne.n	8000fe4 <HAL_GPIO_Init+0x30>
 8000fe2:	e13a      	b.n	800125a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d005      	beq.n	8000ffc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d130      	bne.n	800105e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	409a      	lsls	r2, r3
 800100a:	0013      	movs	r3, r2
 800100c:	43da      	mvns	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	409a      	lsls	r2, r3
 800101e:	0013      	movs	r3, r2
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001032:	2201      	movs	r2, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	091b      	lsrs	r3, r3, #4
 8001048:	2201      	movs	r2, #1
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2203      	movs	r2, #3
 8001064:	4013      	ands	r3, r2
 8001066:	2b03      	cmp	r3, #3
 8001068:	d017      	beq.n	800109a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2203      	movs	r2, #3
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d123      	bne.n	80010ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	58d3      	ldr	r3, [r2, r3]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2207      	movs	r2, #7
 80010b8:	4013      	ands	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2107      	movs	r1, #7
 80010d2:	400b      	ands	r3, r1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	6939      	ldr	r1, [r7, #16]
 80010ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	43da      	mvns	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2203      	movs	r2, #3
 800110c:	401a      	ands	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	23c0      	movs	r3, #192	@ 0xc0
 8001128:	029b      	lsls	r3, r3, #10
 800112a:	4013      	ands	r3, r2
 800112c:	d100      	bne.n	8001130 <HAL_GPIO_Init+0x17c>
 800112e:	e094      	b.n	800125a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001130:	4b51      	ldr	r3, [pc, #324]	@ (8001278 <HAL_GPIO_Init+0x2c4>)
 8001132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001134:	4b50      	ldr	r3, [pc, #320]	@ (8001278 <HAL_GPIO_Init+0x2c4>)
 8001136:	2101      	movs	r1, #1
 8001138:	430a      	orrs	r2, r1
 800113a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800113c:	4a4f      	ldr	r2, [pc, #316]	@ (800127c <HAL_GPIO_Init+0x2c8>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	589b      	ldr	r3, [r3, r2]
 8001148:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2203      	movs	r2, #3
 800114e:	4013      	ands	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	43da      	mvns	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	23a0      	movs	r3, #160	@ 0xa0
 8001164:	05db      	lsls	r3, r3, #23
 8001166:	429a      	cmp	r2, r3
 8001168:	d013      	beq.n	8001192 <HAL_GPIO_Init+0x1de>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a44      	ldr	r2, [pc, #272]	@ (8001280 <HAL_GPIO_Init+0x2cc>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00d      	beq.n	800118e <HAL_GPIO_Init+0x1da>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a43      	ldr	r2, [pc, #268]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d007      	beq.n	800118a <HAL_GPIO_Init+0x1d6>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a42      	ldr	r2, [pc, #264]	@ (8001288 <HAL_GPIO_Init+0x2d4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <HAL_GPIO_Init+0x1d2>
 8001182:	2305      	movs	r3, #5
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x1e0>
 8001186:	2306      	movs	r3, #6
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x1e0>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x1e0>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x1e0>
 8001192:	2300      	movs	r3, #0
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	2103      	movs	r1, #3
 8001198:	400a      	ands	r2, r1
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	@ (800127c <HAL_GPIO_Init+0x2c8>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b36      	ldr	r3, [pc, #216]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	035b      	lsls	r3, r3, #13
 80011ca:	4013      	ands	r3, r2
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011d6:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011dc:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	039b      	lsls	r3, r3, #14
 80011f4:	4013      	ands	r3, r2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001200:	4b22      	ldr	r3, [pc, #136]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	029b      	lsls	r3, r3, #10
 800121e:	4013      	ands	r3, r2
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	4013      	ands	r3, r2
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	40da      	lsrs	r2, r3
 8001268:	1e13      	subs	r3, r2, #0
 800126a:	d000      	beq.n	800126e <HAL_GPIO_Init+0x2ba>
 800126c:	e6ae      	b.n	8000fcc <HAL_GPIO_Init+0x18>
  }
}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b006      	add	sp, #24
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	50000400 	.word	0x50000400
 8001284:	50000800 	.word	0x50000800
 8001288:	50001c00 	.word	0x50001c00
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	0008      	movs	r0, r1
 800129a:	0011      	movs	r1, r2
 800129c:	1cbb      	adds	r3, r7, #2
 800129e:	1c02      	adds	r2, r0, #0
 80012a0:	801a      	strh	r2, [r3, #0]
 80012a2:	1c7b      	adds	r3, r7, #1
 80012a4:	1c0a      	adds	r2, r1, #0
 80012a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a8:	1c7b      	adds	r3, r7, #1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b0:	1cbb      	adds	r3, r7, #2
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80012ba:	1cbb      	adds	r3, r7, #2
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	000a      	movs	r2, r1
 80012d4:	1cbb      	adds	r3, r7, #2
 80012d6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012de:	1cbb      	adds	r3, r7, #2
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	041a      	lsls	r2, r3, #16
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	1cb9      	adds	r1, r7, #2
 80012ee:	8809      	ldrh	r1, [r1, #0]
 80012f0:	400b      	ands	r3, r1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
}
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e082      	b.n	8001418 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2241      	movs	r2, #65	@ 0x41
 8001316:	5c9b      	ldrb	r3, [r3, r2]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d107      	bne.n	800132e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2240      	movs	r2, #64	@ 0x40
 8001322:	2100      	movs	r1, #0
 8001324:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff fad5 	bl	80008d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2241      	movs	r2, #65	@ 0x41
 8001332:	2124      	movs	r1, #36	@ 0x24
 8001334:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	438a      	bics	r2, r1
 8001344:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4934      	ldr	r1, [pc, #208]	@ (8001420 <HAL_I2C_Init+0x120>)
 8001350:	400a      	ands	r2, r1
 8001352:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4931      	ldr	r1, [pc, #196]	@ (8001424 <HAL_I2C_Init+0x124>)
 8001360:	400a      	ands	r2, r1
 8001362:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2180      	movs	r1, #128	@ 0x80
 8001376:	0209      	lsls	r1, r1, #8
 8001378:	430a      	orrs	r2, r1
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	e007      	b.n	800138e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2184      	movs	r1, #132	@ 0x84
 8001388:	0209      	lsls	r1, r1, #8
 800138a:	430a      	orrs	r2, r1
 800138c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d104      	bne.n	80013a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	491f      	ldr	r1, [pc, #124]	@ (8001428 <HAL_I2C_Init+0x128>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	491a      	ldr	r1, [pc, #104]	@ (8001424 <HAL_I2C_Init+0x124>)
 80013bc:	400a      	ands	r2, r1
 80013be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69d9      	ldr	r1, [r3, #28]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1a      	ldr	r2, [r3, #32]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2241      	movs	r2, #65	@ 0x41
 8001404:	2120      	movs	r1, #32
 8001406:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2242      	movs	r2, #66	@ 0x42
 8001412:	2100      	movs	r1, #0
 8001414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}
 8001420:	f0ffffff 	.word	0xf0ffffff
 8001424:	ffff7fff 	.word	0xffff7fff
 8001428:	02008000 	.word	0x02008000

0800142c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b089      	sub	sp, #36	@ 0x24
 8001430:	af02      	add	r7, sp, #8
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	0008      	movs	r0, r1
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	0019      	movs	r1, r3
 800143a:	230a      	movs	r3, #10
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	1c02      	adds	r2, r0, #0
 8001440:	801a      	strh	r2, [r3, #0]
 8001442:	2308      	movs	r3, #8
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	1c0a      	adds	r2, r1, #0
 8001448:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2241      	movs	r2, #65	@ 0x41
 800144e:	5c9b      	ldrb	r3, [r3, r2]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b20      	cmp	r3, #32
 8001454:	d000      	beq.n	8001458 <HAL_I2C_Master_Transmit+0x2c>
 8001456:	e0e7      	b.n	8001628 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2240      	movs	r2, #64	@ 0x40
 800145c:	5c9b      	ldrb	r3, [r3, r2]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_I2C_Master_Transmit+0x3a>
 8001462:	2302      	movs	r3, #2
 8001464:	e0e1      	b.n	800162a <HAL_I2C_Master_Transmit+0x1fe>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2240      	movs	r2, #64	@ 0x40
 800146a:	2101      	movs	r1, #1
 800146c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800146e:	f7ff fcb9 	bl	8000de4 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	0219      	lsls	r1, r3, #8
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2319      	movs	r3, #25
 8001482:	2201      	movs	r2, #1
 8001484:	f000 fa92 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 8001488:	1e03      	subs	r3, r0, #0
 800148a:	d001      	beq.n	8001490 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0cc      	b.n	800162a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2241      	movs	r2, #65	@ 0x41
 8001494:	2121      	movs	r1, #33	@ 0x21
 8001496:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2242      	movs	r2, #66	@ 0x42
 800149c:	2110      	movs	r1, #16
 800149e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2208      	movs	r2, #8
 80014b0:	18ba      	adds	r2, r7, r2
 80014b2:	8812      	ldrh	r2, [r2, #0]
 80014b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2bff      	cmp	r3, #255	@ 0xff
 80014c4:	d911      	bls.n	80014ea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	22ff      	movs	r2, #255	@ 0xff
 80014ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	045c      	lsls	r4, r3, #17
 80014d6:	230a      	movs	r3, #10
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	8819      	ldrh	r1, [r3, #0]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	4b55      	ldr	r3, [pc, #340]	@ (8001634 <HAL_I2C_Master_Transmit+0x208>)
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	0023      	movs	r3, r4
 80014e4:	f000 fc32 	bl	8001d4c <I2C_TransferConfig>
 80014e8:	e075      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	2380      	movs	r3, #128	@ 0x80
 80014fc:	049c      	lsls	r4, r3, #18
 80014fe:	230a      	movs	r3, #10
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	8819      	ldrh	r1, [r3, #0]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	4b4b      	ldr	r3, [pc, #300]	@ (8001634 <HAL_I2C_Master_Transmit+0x208>)
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	0023      	movs	r3, r4
 800150c:	f000 fc1e 	bl	8001d4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001510:	e061      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	0018      	movs	r0, r3
 800151a:	f000 fa95 	bl	8001a48 <I2C_WaitOnTXISFlagUntilTimeout>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e081      	b.n	800162a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001540:	b29b      	uxth	r3, r3
 8001542:	3b01      	subs	r3, #1
 8001544:	b29a      	uxth	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d03a      	beq.n	80015d6 <HAL_I2C_Master_Transmit+0x1aa>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001564:	2b00      	cmp	r3, #0
 8001566:	d136      	bne.n	80015d6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	0013      	movs	r3, r2
 8001572:	2200      	movs	r2, #0
 8001574:	2180      	movs	r1, #128	@ 0x80
 8001576:	f000 fa19 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e053      	b.n	800162a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001586:	b29b      	uxth	r3, r3
 8001588:	2bff      	cmp	r3, #255	@ 0xff
 800158a:	d911      	bls.n	80015b0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	22ff      	movs	r2, #255	@ 0xff
 8001590:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001596:	b2da      	uxtb	r2, r3
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	045c      	lsls	r4, r3, #17
 800159c:	230a      	movs	r3, #10
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	8819      	ldrh	r1, [r3, #0]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	2300      	movs	r3, #0
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	0023      	movs	r3, r4
 80015aa:	f000 fbcf 	bl	8001d4c <I2C_TransferConfig>
 80015ae:	e012      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	049c      	lsls	r4, r3, #18
 80015c4:	230a      	movs	r3, #10
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	8819      	ldrh	r1, [r3, #0]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	2300      	movs	r3, #0
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	0023      	movs	r3, r4
 80015d2:	f000 fbbb 	bl	8001d4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015da:	b29b      	uxth	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d198      	bne.n	8001512 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	0018      	movs	r0, r3
 80015e8:	f000 fa74 	bl	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e01a      	b.n	800162a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2220      	movs	r2, #32
 80015fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	490c      	ldr	r1, [pc, #48]	@ (8001638 <HAL_I2C_Master_Transmit+0x20c>)
 8001608:	400a      	ands	r2, r1
 800160a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2241      	movs	r2, #65	@ 0x41
 8001610:	2120      	movs	r1, #32
 8001612:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2242      	movs	r2, #66	@ 0x42
 8001618:	2100      	movs	r1, #0
 800161a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2240      	movs	r2, #64	@ 0x40
 8001620:	2100      	movs	r1, #0
 8001622:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e000      	b.n	800162a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001628:	2302      	movs	r3, #2
  }
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b007      	add	sp, #28
 8001630:	bd90      	pop	{r4, r7, pc}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	80002000 	.word	0x80002000
 8001638:	fe00e800 	.word	0xfe00e800

0800163c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	000c      	movs	r4, r1
 8001646:	0010      	movs	r0, r2
 8001648:	0019      	movs	r1, r3
 800164a:	230a      	movs	r3, #10
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	1c22      	adds	r2, r4, #0
 8001650:	801a      	strh	r2, [r3, #0]
 8001652:	2308      	movs	r3, #8
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	1c02      	adds	r2, r0, #0
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	1dbb      	adds	r3, r7, #6
 800165c:	1c0a      	adds	r2, r1, #0
 800165e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2241      	movs	r2, #65	@ 0x41
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d000      	beq.n	800166e <HAL_I2C_Mem_Read+0x32>
 800166c:	e110      	b.n	8001890 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800166e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001670:	2b00      	cmp	r3, #0
 8001672:	d004      	beq.n	800167e <HAL_I2C_Mem_Read+0x42>
 8001674:	232c      	movs	r3, #44	@ 0x2c
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2280      	movs	r2, #128	@ 0x80
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e103      	b.n	8001892 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2240      	movs	r2, #64	@ 0x40
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_I2C_Mem_Read+0x5c>
 8001694:	2302      	movs	r3, #2
 8001696:	e0fc      	b.n	8001892 <HAL_I2C_Mem_Read+0x256>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2240      	movs	r2, #64	@ 0x40
 800169c:	2101      	movs	r1, #1
 800169e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016a0:	f7ff fba0 	bl	8000de4 <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	0219      	lsls	r1, r3, #8
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2319      	movs	r3, #25
 80016b4:	2201      	movs	r2, #1
 80016b6:	f000 f979 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 80016ba:	1e03      	subs	r3, r0, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0e7      	b.n	8001892 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2241      	movs	r2, #65	@ 0x41
 80016c6:	2122      	movs	r1, #34	@ 0x22
 80016c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2242      	movs	r2, #66	@ 0x42
 80016ce:	2140      	movs	r1, #64	@ 0x40
 80016d0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	222c      	movs	r2, #44	@ 0x2c
 80016e2:	18ba      	adds	r2, r7, r2
 80016e4:	8812      	ldrh	r2, [r2, #0]
 80016e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016ee:	1dbb      	adds	r3, r7, #6
 80016f0:	881c      	ldrh	r4, [r3, #0]
 80016f2:	2308      	movs	r3, #8
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	881a      	ldrh	r2, [r3, #0]
 80016f8:	230a      	movs	r3, #10
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	8819      	ldrh	r1, [r3, #0]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	0023      	movs	r3, r4
 800170a:	f000 f8cb 	bl	80018a4 <I2C_RequestMemoryRead>
 800170e:	1e03      	subs	r3, r0, #0
 8001710:	d005      	beq.n	800171e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2240      	movs	r2, #64	@ 0x40
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0b9      	b.n	8001892 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001722:	b29b      	uxth	r3, r3
 8001724:	2bff      	cmp	r3, #255	@ 0xff
 8001726:	d911      	bls.n	800174c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	22ff      	movs	r2, #255	@ 0xff
 800172c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001732:	b2da      	uxtb	r2, r3
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	045c      	lsls	r4, r3, #17
 8001738:	230a      	movs	r3, #10
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	8819      	ldrh	r1, [r3, #0]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	4b56      	ldr	r3, [pc, #344]	@ (800189c <HAL_I2C_Mem_Read+0x260>)
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	0023      	movs	r3, r4
 8001746:	f000 fb01 	bl	8001d4c <I2C_TransferConfig>
 800174a:	e012      	b.n	8001772 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175a:	b2da      	uxtb	r2, r3
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	049c      	lsls	r4, r3, #18
 8001760:	230a      	movs	r3, #10
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	8819      	ldrh	r1, [r3, #0]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	4b4c      	ldr	r3, [pc, #304]	@ (800189c <HAL_I2C_Mem_Read+0x260>)
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	0023      	movs	r3, r4
 800176e:	f000 faed 	bl	8001d4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	0013      	movs	r3, r2
 800177c:	2200      	movs	r2, #0
 800177e:	2104      	movs	r1, #4
 8001780:	f000 f914 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e082      	b.n	8001892 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d03a      	beq.n	800183e <HAL_I2C_Mem_Read+0x202>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d136      	bne.n	800183e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	0013      	movs	r3, r2
 80017da:	2200      	movs	r2, #0
 80017dc:	2180      	movs	r1, #128	@ 0x80
 80017de:	f000 f8e5 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e053      	b.n	8001892 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	2bff      	cmp	r3, #255	@ 0xff
 80017f2:	d911      	bls.n	8001818 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	22ff      	movs	r2, #255	@ 0xff
 80017f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	045c      	lsls	r4, r3, #17
 8001804:	230a      	movs	r3, #10
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	8819      	ldrh	r1, [r3, #0]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	0023      	movs	r3, r4
 8001812:	f000 fa9b 	bl	8001d4c <I2C_TransferConfig>
 8001816:	e012      	b.n	800183e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001826:	b2da      	uxtb	r2, r3
 8001828:	2380      	movs	r3, #128	@ 0x80
 800182a:	049c      	lsls	r4, r3, #18
 800182c:	230a      	movs	r3, #10
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	8819      	ldrh	r1, [r3, #0]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	2300      	movs	r3, #0
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	0023      	movs	r3, r4
 800183a:	f000 fa87 	bl	8001d4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d194      	bne.n	8001772 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	0018      	movs	r0, r3
 8001850:	f000 f940 	bl	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d001      	beq.n	800185c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e01a      	b.n	8001892 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2220      	movs	r2, #32
 8001862:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	490c      	ldr	r1, [pc, #48]	@ (80018a0 <HAL_I2C_Mem_Read+0x264>)
 8001870:	400a      	ands	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2241      	movs	r2, #65	@ 0x41
 8001878:	2120      	movs	r1, #32
 800187a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2242      	movs	r2, #66	@ 0x42
 8001880:	2100      	movs	r1, #0
 8001882:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2240      	movs	r2, #64	@ 0x40
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	e000      	b.n	8001892 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001890:	2302      	movs	r3, #2
  }
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b007      	add	sp, #28
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	80002400 	.word	0x80002400
 80018a0:	fe00e800 	.word	0xfe00e800

080018a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	000c      	movs	r4, r1
 80018ae:	0010      	movs	r0, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	250a      	movs	r5, #10
 80018b4:	197b      	adds	r3, r7, r5
 80018b6:	1c22      	adds	r2, r4, #0
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	2308      	movs	r3, #8
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	1c02      	adds	r2, r0, #0
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	1dbb      	adds	r3, r7, #6
 80018c4:	1c0a      	adds	r2, r1, #0
 80018c6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018c8:	1dbb      	adds	r3, r7, #6
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	197b      	adds	r3, r7, r5
 80018d0:	8819      	ldrh	r1, [r3, #0]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <I2C_RequestMemoryRead+0xc0>)
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2300      	movs	r3, #0
 80018da:	f000 fa37 	bl	8001d4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f8af 	bl	8001a48 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d001      	beq.n	80018f2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e033      	b.n	800195a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018f2:	1dbb      	adds	r3, r7, #6
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018fa:	2308      	movs	r3, #8
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	629a      	str	r2, [r3, #40]	@ 0x28
 8001908:	e019      	b.n	800193e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800190a:	2308      	movs	r3, #8
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191e:	6a39      	ldr	r1, [r7, #32]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f890 	bl	8001a48 <I2C_WaitOnTXISFlagUntilTimeout>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d001      	beq.n	8001930 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e014      	b.n	800195a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001930:	2308      	movs	r3, #8
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800193e:	6a3a      	ldr	r2, [r7, #32]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	0013      	movs	r3, r2
 8001948:	2200      	movs	r2, #0
 800194a:	2140      	movs	r1, #64	@ 0x40
 800194c:	f000 f82e 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d001      	beq.n	8001958 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b004      	add	sp, #16
 8001960:	bdb0      	pop	{r4, r5, r7, pc}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	80002000 	.word	0x80002000

08001968 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	2b02      	cmp	r3, #2
 800197c:	d103      	bne.n	8001986 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	2b01      	cmp	r3, #1
 8001992:	d007      	beq.n	80019a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2101      	movs	r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	619a      	str	r2, [r3, #24]
  }
}
 80019a4:	46c0      	nop			@ (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}

080019ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019bc:	e030      	b.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	d02d      	beq.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c4:	f7ff fa0e 	bl	8000de4 <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d302      	bcc.n	80019da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d122      	bne.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	4013      	ands	r3, r2
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	425a      	negs	r2, r3
 80019ea:	4153      	adcs	r3, r2
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	001a      	movs	r2, r3
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d113      	bne.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fc:	2220      	movs	r2, #32
 80019fe:	431a      	orrs	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2241      	movs	r2, #65	@ 0x41
 8001a08:	2120      	movs	r1, #32
 8001a0a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2242      	movs	r2, #66	@ 0x42
 8001a10:	2100      	movs	r1, #0
 8001a12:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e00f      	b.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	425a      	negs	r2, r3
 8001a30:	4153      	adcs	r3, r2
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	001a      	movs	r2, r3
 8001a36:	1dfb      	adds	r3, r7, #7
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d0bf      	beq.n	80019be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a54:	e032      	b.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 f87d 	bl	8001b5c <I2C_IsErrorOccurred>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e030      	b.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	d025      	beq.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a70:	f7ff f9b8 	bl	8000de4 <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d302      	bcc.n	8001a86 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11a      	bne.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d013      	beq.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a98:	2220      	movs	r2, #32
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2241      	movs	r2, #65	@ 0x41
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2242      	movs	r2, #66	@ 0x42
 8001aac:	2100      	movs	r1, #0
 8001aae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2240      	movs	r2, #64	@ 0x40
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e007      	b.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d1c5      	bne.n	8001a56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b004      	add	sp, #16
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ae0:	e02f      	b.n	8001b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 f837 	bl	8001b5c <I2C_IsErrorOccurred>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d001      	beq.n	8001af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e02d      	b.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af6:	f7ff f975 	bl	8000de4 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d302      	bcc.n	8001b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d11a      	bne.n	8001b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2220      	movs	r2, #32
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	d013      	beq.n	8001b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	2220      	movs	r2, #32
 8001b20:	431a      	orrs	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2241      	movs	r2, #65	@ 0x41
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2242      	movs	r2, #66	@ 0x42
 8001b32:	2100      	movs	r1, #0
 8001b34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2240      	movs	r2, #64	@ 0x40
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e007      	b.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d1c8      	bne.n	8001ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2327      	movs	r3, #39	@ 0x27
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2210      	movs	r2, #16
 8001b84:	4013      	ands	r3, r2
 8001b86:	d100      	bne.n	8001b8a <I2C_IsErrorOccurred+0x2e>
 8001b88:	e079      	b.n	8001c7e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2210      	movs	r2, #16
 8001b90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b92:	e057      	b.n	8001c44 <I2C_IsErrorOccurred+0xe8>
 8001b94:	2227      	movs	r2, #39	@ 0x27
 8001b96:	18bb      	adds	r3, r7, r2
 8001b98:	18ba      	adds	r2, r7, r2
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	d04f      	beq.n	8001c44 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7ff f91e 	bl	8000de4 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d302      	bcc.n	8001bba <I2C_IsErrorOccurred+0x5e>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d144      	bne.n	8001c44 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	01db      	lsls	r3, r3, #7
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bc8:	2013      	movs	r0, #19
 8001bca:	183b      	adds	r3, r7, r0
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	2142      	movs	r1, #66	@ 0x42
 8001bd0:	5c52      	ldrb	r2, [r2, r1]
 8001bd2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	401a      	ands	r2, r3
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d126      	bne.n	8001c36 <I2C_IsErrorOccurred+0xda>
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	01db      	lsls	r3, r3, #7
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d021      	beq.n	8001c36 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001bf2:	183b      	adds	r3, r7, r0
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d01d      	beq.n	8001c36 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2180      	movs	r1, #128	@ 0x80
 8001c06:	01c9      	lsls	r1, r1, #7
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c0c:	f7ff f8ea 	bl	8000de4 <HAL_GetTick>
 8001c10:	0003      	movs	r3, r0
 8001c12:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c14:	e00f      	b.n	8001c36 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c16:	f7ff f8e5 	bl	8000de4 <HAL_GetTick>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b19      	cmp	r3, #25
 8001c22:	d908      	bls.n	8001c36 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	2220      	movs	r2, #32
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c2c:	2327      	movs	r3, #39	@ 0x27
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]

              break;
 8001c34:	e006      	b.n	8001c44 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d1e8      	bne.n	8001c16 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d004      	beq.n	8001c5c <I2C_IsErrorOccurred+0x100>
 8001c52:	2327      	movs	r3, #39	@ 0x27
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d09b      	beq.n	8001b94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c5c:	2327      	movs	r3, #39	@ 0x27
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	2204      	movs	r2, #4
 8001c72:	4313      	orrs	r3, r2
 8001c74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c76:	2327      	movs	r3, #39	@ 0x27
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d00c      	beq.n	8001caa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	2201      	movs	r2, #1
 8001c94:	4313      	orrs	r3, r2
 8001c96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2280      	movs	r2, #128	@ 0x80
 8001c9e:	0052      	lsls	r2, r2, #1
 8001ca0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ca2:	2327      	movs	r3, #39	@ 0x27
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d00c      	beq.n	8001cce <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2280      	movs	r2, #128	@ 0x80
 8001cc2:	00d2      	lsls	r2, r2, #3
 8001cc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cc6:	2327      	movs	r3, #39	@ 0x27
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d00c      	beq.n	8001cf2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2280      	movs	r2, #128	@ 0x80
 8001ce6:	0092      	lsls	r2, r2, #2
 8001ce8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cea:	2327      	movs	r3, #39	@ 0x27
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001cf2:	2327      	movs	r3, #39	@ 0x27
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01d      	beq.n	8001d38 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7ff fe32 	bl	8001968 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	490e      	ldr	r1, [pc, #56]	@ (8001d48 <I2C_IsErrorOccurred+0x1ec>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2241      	movs	r2, #65	@ 0x41
 8001d24:	2120      	movs	r1, #32
 8001d26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2242      	movs	r2, #66	@ 0x42
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2240      	movs	r2, #64	@ 0x40
 8001d34:	2100      	movs	r1, #0
 8001d36:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d38:	2327      	movs	r3, #39	@ 0x27
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b00a      	add	sp, #40	@ 0x28
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	fe00e800 	.word	0xfe00e800

08001d4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	0008      	movs	r0, r1
 8001d56:	0011      	movs	r1, r2
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	240a      	movs	r4, #10
 8001d5c:	193b      	adds	r3, r7, r4
 8001d5e:	1c02      	adds	r2, r0, #0
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	2009      	movs	r0, #9
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	1c0a      	adds	r2, r1, #0
 8001d68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	059b      	lsls	r3, r3, #22
 8001d70:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d72:	183b      	adds	r3, r7, r0
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	0419      	lsls	r1, r3, #16
 8001d78:	23ff      	movs	r3, #255	@ 0xff
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d7e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d86:	4313      	orrs	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d96:	0d51      	lsrs	r1, r2, #21
 8001d98:	2280      	movs	r2, #128	@ 0x80
 8001d9a:	00d2      	lsls	r2, r2, #3
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	4907      	ldr	r1, [pc, #28]	@ (8001dbc <I2C_TransferConfig+0x70>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	43d2      	mvns	r2, r2
 8001da4:	401a      	ands	r2, r3
 8001da6:	0011      	movs	r1, r2
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b007      	add	sp, #28
 8001db8:	bd90      	pop	{r4, r7, pc}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	03ff63ff 	.word	0x03ff63ff

08001dc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2241      	movs	r2, #65	@ 0x41
 8001dce:	5c9b      	ldrb	r3, [r3, r2]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d138      	bne.n	8001e48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2240      	movs	r2, #64	@ 0x40
 8001dda:	5c9b      	ldrb	r3, [r3, r2]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e032      	b.n	8001e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2240      	movs	r2, #64	@ 0x40
 8001de8:	2101      	movs	r1, #1
 8001dea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2241      	movs	r2, #65	@ 0x41
 8001df0:	2124      	movs	r1, #36	@ 0x24
 8001df2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2101      	movs	r1, #1
 8001e00:	438a      	bics	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4911      	ldr	r1, [pc, #68]	@ (8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2101      	movs	r1, #1
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2241      	movs	r2, #65	@ 0x41
 8001e38:	2120      	movs	r1, #32
 8001e3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	2100      	movs	r1, #0
 8001e42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
  }
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	ffffefff 	.word	0xffffefff

08001e58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2241      	movs	r2, #65	@ 0x41
 8001e66:	5c9b      	ldrb	r3, [r3, r2]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d139      	bne.n	8001ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2240      	movs	r2, #64	@ 0x40
 8001e72:	5c9b      	ldrb	r3, [r3, r2]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e033      	b.n	8001ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	2101      	movs	r1, #1
 8001e82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2241      	movs	r2, #65	@ 0x41
 8001e88:	2124      	movs	r1, #36	@ 0x24
 8001e8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2101      	movs	r1, #1
 8001e98:	438a      	bics	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a11      	ldr	r2, [pc, #68]	@ (8001eec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2241      	movs	r2, #65	@ 0x41
 8001ed2:	2120      	movs	r1, #32
 8001ed4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2240      	movs	r2, #64	@ 0x40
 8001eda:	2100      	movs	r1, #0
 8001edc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
  }
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b004      	add	sp, #16
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	fffff0ff 	.word	0xfffff0ff

08001ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f000 fb6c 	bl	80025dc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f04:	4bc8      	ldr	r3, [pc, #800]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	220c      	movs	r2, #12
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f0e:	4bc6      	ldr	r3, [pc, #792]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	025b      	lsls	r3, r3, #9
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4013      	ands	r3, r2
 8001f22:	d100      	bne.n	8001f26 <HAL_RCC_OscConfig+0x36>
 8001f24:	e07d      	b.n	8002022 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d007      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x68>
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	025b      	lsls	r3, r3, #9
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10d      	bne.n	8001f58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	4bba      	ldr	r3, [pc, #744]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	4013      	ands	r3, r2
 8001f46:	d100      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5a>
 8001f48:	e06a      	b.n	8002020 <HAL_RCC_OscConfig+0x130>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d166      	bne.n	8002020 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f000 fb42 	bl	80025dc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_OscConfig+0x84>
 8001f64:	4bb0      	ldr	r3, [pc, #704]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4baf      	ldr	r3, [pc, #700]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f6a:	2180      	movs	r1, #128	@ 0x80
 8001f6c:	0249      	lsls	r1, r1, #9
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e027      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	23a0      	movs	r3, #160	@ 0xa0
 8001f7a:	02db      	lsls	r3, r3, #11
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d10e      	bne.n	8001f9e <HAL_RCC_OscConfig+0xae>
 8001f80:	4ba9      	ldr	r3, [pc, #676]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4ba8      	ldr	r3, [pc, #672]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	02c9      	lsls	r1, r1, #11
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	4ba6      	ldr	r3, [pc, #664]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4ba5      	ldr	r3, [pc, #660]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f94:	2180      	movs	r1, #128	@ 0x80
 8001f96:	0249      	lsls	r1, r1, #9
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e012      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd4>
 8001f9e:	4ba2      	ldr	r3, [pc, #648]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4ba1      	ldr	r3, [pc, #644]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001fa4:	49a1      	ldr	r1, [pc, #644]	@ (800222c <HAL_RCC_OscConfig+0x33c>)
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	4b9f      	ldr	r3, [pc, #636]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	025b      	lsls	r3, r3, #9
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4b9b      	ldr	r3, [pc, #620]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b9a      	ldr	r3, [pc, #616]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001fbe:	499c      	ldr	r1, [pc, #624]	@ (8002230 <HAL_RCC_OscConfig+0x340>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d014      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7fe ff0a 	bl	8000de4 <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd6:	f7fe ff05 	bl	8000de4 <HAL_GetTick>
 8001fda:	0002      	movs	r2, r0
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b64      	cmp	r3, #100	@ 0x64
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e2f9      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fe8:	4b8f      	ldr	r3, [pc, #572]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0xe6>
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fef5 	bl	8000de4 <HAL_GetTick>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002000:	f7fe fef0 	bl	8000de4 <HAL_GetTick>
 8002004:	0002      	movs	r2, r0
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	@ 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e2e4      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002012:	4b85      	ldr	r3, [pc, #532]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	2380      	movs	r3, #128	@ 0x80
 8002018:	029b      	lsls	r3, r3, #10
 800201a:	4013      	ands	r3, r2
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x110>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2202      	movs	r2, #2
 8002028:	4013      	ands	r3, r2
 800202a:	d100      	bne.n	800202e <HAL_RCC_OscConfig+0x13e>
 800202c:	e099      	b.n	8002162 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	2220      	movs	r2, #32
 8002038:	4013      	ands	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800203c:	4b7a      	ldr	r3, [pc, #488]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b79      	ldr	r3, [pc, #484]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002042:	2120      	movs	r1, #32
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	2220      	movs	r2, #32
 800204c:	4393      	bics	r3, r2
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b04      	cmp	r3, #4
 8002054:	d005      	beq.n	8002062 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d13e      	bne.n	80020da <HAL_RCC_OscConfig+0x1ea>
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d13b      	bne.n	80020da <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002062:	4b71      	ldr	r3, [pc, #452]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2204      	movs	r2, #4
 8002068:	4013      	ands	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_RCC_OscConfig+0x186>
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e2b2      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002076:	4b6c      	ldr	r3, [pc, #432]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a6e      	ldr	r2, [pc, #440]	@ (8002234 <HAL_RCC_OscConfig+0x344>)
 800207c:	4013      	ands	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	021a      	lsls	r2, r3, #8
 8002086:	4b68      	ldr	r3, [pc, #416]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800208c:	4b66      	ldr	r3, [pc, #408]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2209      	movs	r2, #9
 8002092:	4393      	bics	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	4b64      	ldr	r3, [pc, #400]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800209e:	f000 fbeb 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 80020a2:	0001      	movs	r1, r0
 80020a4:	4b60      	ldr	r3, [pc, #384]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	220f      	movs	r2, #15
 80020ac:	4013      	ands	r3, r2
 80020ae:	4a62      	ldr	r2, [pc, #392]	@ (8002238 <HAL_RCC_OscConfig+0x348>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	000a      	movs	r2, r1
 80020b4:	40da      	lsrs	r2, r3
 80020b6:	4b61      	ldr	r3, [pc, #388]	@ (800223c <HAL_RCC_OscConfig+0x34c>)
 80020b8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020ba:	4b61      	ldr	r3, [pc, #388]	@ (8002240 <HAL_RCC_OscConfig+0x350>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2513      	movs	r5, #19
 80020c0:	197c      	adds	r4, r7, r5
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7fe fe48 	bl	8000d58 <HAL_InitTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020cc:	197b      	adds	r3, r7, r5
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d046      	beq.n	8002162 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80020d4:	197b      	adds	r3, r7, r5
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	e280      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d027      	beq.n	8002130 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020e0:	4b51      	ldr	r3, [pc, #324]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2209      	movs	r2, #9
 80020e6:	4393      	bics	r3, r2
 80020e8:	0019      	movs	r1, r3
 80020ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 80020ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe fe77 	bl	8000de4 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fc:	f7fe fe72 	bl	8000de4 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e266      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800210e:	4b46      	ldr	r3, [pc, #280]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2204      	movs	r2, #4
 8002114:	4013      	ands	r3, r2
 8002116:	d0f1      	beq.n	80020fc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b43      	ldr	r3, [pc, #268]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a45      	ldr	r2, [pc, #276]	@ (8002234 <HAL_RCC_OscConfig+0x344>)
 800211e:	4013      	ands	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	021a      	lsls	r2, r3, #8
 8002128:	4b3f      	ldr	r3, [pc, #252]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	e018      	b.n	8002162 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002130:	4b3d      	ldr	r3, [pc, #244]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b3c      	ldr	r3, [pc, #240]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002136:	2101      	movs	r1, #1
 8002138:	438a      	bics	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe fe52 	bl	8000de4 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002146:	f7fe fe4d 	bl	8000de4 <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e241      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002158:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2204      	movs	r2, #4
 800215e:	4013      	ands	r3, r2
 8002160:	d1f1      	bne.n	8002146 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2210      	movs	r2, #16
 8002168:	4013      	ands	r3, r2
 800216a:	d100      	bne.n	800216e <HAL_RCC_OscConfig+0x27e>
 800216c:	e0a1      	b.n	80022b2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d140      	bne.n	80021f6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002174:	4b2c      	ldr	r3, [pc, #176]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4013      	ands	r3, r2
 800217e:	d005      	beq.n	800218c <HAL_RCC_OscConfig+0x29c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e227      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218c:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a2c      	ldr	r2, [pc, #176]	@ (8002244 <HAL_RCC_OscConfig+0x354>)
 8002192:	4013      	ands	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a0:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	0a19      	lsrs	r1, r3, #8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	061a      	lsls	r2, r3, #24
 80021ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	0b5b      	lsrs	r3, r3, #13
 80021ba:	3301      	adds	r3, #1
 80021bc:	2280      	movs	r2, #128	@ 0x80
 80021be:	0212      	lsls	r2, r2, #8
 80021c0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021c2:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	210f      	movs	r1, #15
 80021ca:	400b      	ands	r3, r1
 80021cc:	491a      	ldr	r1, [pc, #104]	@ (8002238 <HAL_RCC_OscConfig+0x348>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021d2:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <HAL_RCC_OscConfig+0x34c>)
 80021d4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_RCC_OscConfig+0x350>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2513      	movs	r5, #19
 80021dc:	197c      	adds	r4, r7, r5
 80021de:	0018      	movs	r0, r3
 80021e0:	f7fe fdba 	bl	8000d58 <HAL_InitTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021e8:	197b      	adds	r3, r7, r5
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d060      	beq.n	80022b2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80021f0:	197b      	adds	r3, r7, r5
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	e1f2      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03f      	beq.n	800227e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_RCC_OscConfig+0x338>)
 8002204:	2180      	movs	r1, #128	@ 0x80
 8002206:	0049      	lsls	r1, r1, #1
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fdea 	bl	8000de4 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002214:	e018      	b.n	8002248 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002216:	f7fe fde5 	bl	8000de4 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d911      	bls.n	8002248 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1d9      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
 8002228:	40021000 	.word	0x40021000
 800222c:	fffeffff 	.word	0xfffeffff
 8002230:	fffbffff 	.word	0xfffbffff
 8002234:	ffffe0ff 	.word	0xffffe0ff
 8002238:	08004ebc 	.word	0x08004ebc
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004
 8002244:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002248:	4bc9      	ldr	r3, [pc, #804]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	@ 0x80
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d0e0      	beq.n	8002216 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002254:	4bc6      	ldr	r3, [pc, #792]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4ac6      	ldr	r2, [pc, #792]	@ (8002574 <HAL_RCC_OscConfig+0x684>)
 800225a:	4013      	ands	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	4bc3      	ldr	r3, [pc, #780]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002268:	4bc1      	ldr	r3, [pc, #772]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	0a19      	lsrs	r1, r3, #8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	061a      	lsls	r2, r3, #24
 8002276:	4bbe      	ldr	r3, [pc, #760]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	e019      	b.n	80022b2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800227e:	4bbc      	ldr	r3, [pc, #752]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4bbb      	ldr	r3, [pc, #748]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002284:	49bc      	ldr	r1, [pc, #752]	@ (8002578 <HAL_RCC_OscConfig+0x688>)
 8002286:	400a      	ands	r2, r1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7fe fdab 	bl	8000de4 <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002294:	f7fe fda6 	bl	8000de4 <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e19a      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022a6:	4bb2      	ldr	r3, [pc, #712]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2208      	movs	r2, #8
 80022b8:	4013      	ands	r3, r2
 80022ba:	d036      	beq.n	800232a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d019      	beq.n	80022f8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c4:	4baa      	ldr	r3, [pc, #680]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80022c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022c8:	4ba9      	ldr	r3, [pc, #676]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7fe fd88 	bl	8000de4 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe fd83 	bl	8000de4 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e177      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80022ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f0:	2202      	movs	r2, #2
 80022f2:	4013      	ands	r3, r2
 80022f4:	d0f1      	beq.n	80022da <HAL_RCC_OscConfig+0x3ea>
 80022f6:	e018      	b.n	800232a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80022fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80022fe:	2101      	movs	r1, #1
 8002300:	438a      	bics	r2, r1
 8002302:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7fe fd6e 	bl	8000de4 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230e:	f7fe fd69 	bl	8000de4 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e15d      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002320:	4b93      	ldr	r3, [pc, #588]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	d1f1      	bne.n	800230e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2204      	movs	r2, #4
 8002330:	4013      	ands	r3, r2
 8002332:	d100      	bne.n	8002336 <HAL_RCC_OscConfig+0x446>
 8002334:	e0ae      	b.n	8002494 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2023      	movs	r0, #35	@ 0x23
 8002338:	183b      	adds	r3, r7, r0
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b8c      	ldr	r3, [pc, #560]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	055b      	lsls	r3, r3, #21
 8002346:	4013      	ands	r3, r2
 8002348:	d109      	bne.n	800235e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b89      	ldr	r3, [pc, #548]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800234c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800234e:	4b88      	ldr	r3, [pc, #544]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002350:	2180      	movs	r1, #128	@ 0x80
 8002352:	0549      	lsls	r1, r1, #21
 8002354:	430a      	orrs	r2, r1
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002358:	183b      	adds	r3, r7, r0
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b87      	ldr	r3, [pc, #540]	@ (800257c <HAL_RCC_OscConfig+0x68c>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4013      	ands	r3, r2
 8002368:	d11a      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b84      	ldr	r3, [pc, #528]	@ (800257c <HAL_RCC_OscConfig+0x68c>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4b83      	ldr	r3, [pc, #524]	@ (800257c <HAL_RCC_OscConfig+0x68c>)
 8002370:	2180      	movs	r1, #128	@ 0x80
 8002372:	0049      	lsls	r1, r1, #1
 8002374:	430a      	orrs	r2, r1
 8002376:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002378:	f7fe fd34 	bl	8000de4 <HAL_GetTick>
 800237c:	0003      	movs	r3, r0
 800237e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7fe fd2f 	bl	8000de4 <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	@ 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e123      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b79      	ldr	r3, [pc, #484]	@ (800257c <HAL_RCC_OscConfig+0x68c>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4013      	ands	r3, r2
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_OscConfig+0x4cc>
 80023ac:	4b70      	ldr	r3, [pc, #448]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023b2:	2180      	movs	r1, #128	@ 0x80
 80023b4:	0049      	lsls	r1, r1, #1
 80023b6:	430a      	orrs	r2, r1
 80023b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80023ba:	e031      	b.n	8002420 <HAL_RCC_OscConfig+0x530>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10c      	bne.n	80023de <HAL_RCC_OscConfig+0x4ee>
 80023c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023c8:	4b69      	ldr	r3, [pc, #420]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023ca:	496b      	ldr	r1, [pc, #428]	@ (8002578 <HAL_RCC_OscConfig+0x688>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80023d0:	4b67      	ldr	r3, [pc, #412]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023d4:	4b66      	ldr	r3, [pc, #408]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023d6:	496a      	ldr	r1, [pc, #424]	@ (8002580 <HAL_RCC_OscConfig+0x690>)
 80023d8:	400a      	ands	r2, r1
 80023da:	651a      	str	r2, [r3, #80]	@ 0x50
 80023dc:	e020      	b.n	8002420 <HAL_RCC_OscConfig+0x530>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	23a0      	movs	r3, #160	@ 0xa0
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d10e      	bne.n	8002408 <HAL_RCC_OscConfig+0x518>
 80023ea:	4b61      	ldr	r3, [pc, #388]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023ee:	4b60      	ldr	r3, [pc, #384]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023f0:	2180      	movs	r1, #128	@ 0x80
 80023f2:	00c9      	lsls	r1, r1, #3
 80023f4:	430a      	orrs	r2, r1
 80023f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80023f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80023fe:	2180      	movs	r1, #128	@ 0x80
 8002400:	0049      	lsls	r1, r1, #1
 8002402:	430a      	orrs	r2, r1
 8002404:	651a      	str	r2, [r3, #80]	@ 0x50
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0x530>
 8002408:	4b59      	ldr	r3, [pc, #356]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800240a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800240c:	4b58      	ldr	r3, [pc, #352]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800240e:	495a      	ldr	r1, [pc, #360]	@ (8002578 <HAL_RCC_OscConfig+0x688>)
 8002410:	400a      	ands	r2, r1
 8002412:	651a      	str	r2, [r3, #80]	@ 0x50
 8002414:	4b56      	ldr	r3, [pc, #344]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002416:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002418:	4b55      	ldr	r3, [pc, #340]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800241a:	4959      	ldr	r1, [pc, #356]	@ (8002580 <HAL_RCC_OscConfig+0x690>)
 800241c:	400a      	ands	r2, r1
 800241e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7fe fcdc 	bl	8000de4 <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002430:	e009      	b.n	8002446 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe fcd7 	bl	8000de4 <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	4a51      	ldr	r2, [pc, #324]	@ (8002584 <HAL_RCC_OscConfig+0x694>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e0ca      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002446:	4b4a      	ldr	r3, [pc, #296]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4013      	ands	r3, r2
 8002450:	d0ef      	beq.n	8002432 <HAL_RCC_OscConfig+0x542>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7fe fcc6 	bl	8000de4 <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800245c:	e009      	b.n	8002472 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fcc1 	bl	8000de4 <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	4a46      	ldr	r2, [pc, #280]	@ (8002584 <HAL_RCC_OscConfig+0x694>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e0b4      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002472:	4b3f      	ldr	r3, [pc, #252]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002474:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4013      	ands	r3, r2
 800247c:	d1ef      	bne.n	800245e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800247e:	2323      	movs	r3, #35	@ 0x23
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800248a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800248c:	4b38      	ldr	r3, [pc, #224]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800248e:	493e      	ldr	r1, [pc, #248]	@ (8002588 <HAL_RCC_OscConfig+0x698>)
 8002490:	400a      	ands	r2, r1
 8002492:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	2b00      	cmp	r3, #0
 800249a:	d100      	bne.n	800249e <HAL_RCC_OscConfig+0x5ae>
 800249c:	e09d      	b.n	80025da <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d100      	bne.n	80024a6 <HAL_RCC_OscConfig+0x5b6>
 80024a4:	e076      	b.n	8002594 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d145      	bne.n	800253a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b30      	ldr	r3, [pc, #192]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80024b4:	4935      	ldr	r1, [pc, #212]	@ (800258c <HAL_RCC_OscConfig+0x69c>)
 80024b6:	400a      	ands	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fc93 	bl	8000de4 <HAL_GetTick>
 80024be:	0003      	movs	r3, r0
 80024c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fc8e 	bl	8000de4 <HAL_GetTick>
 80024c8:	0002      	movs	r2, r0
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e082      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024d6:	4b26      	ldr	r3, [pc, #152]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	2380      	movs	r3, #128	@ 0x80
 80024dc:	049b      	lsls	r3, r3, #18
 80024de:	4013      	ands	r3, r2
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e2:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002590 <HAL_RCC_OscConfig+0x6a0>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	431a      	orrs	r2, r3
 80024fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 80024fe:	430a      	orrs	r2, r1
 8002500:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002502:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002508:	2180      	movs	r1, #128	@ 0x80
 800250a:	0449      	lsls	r1, r1, #17
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fc68 	bl	8000de4 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fc63 	bl	8000de4 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e057      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	049b      	lsls	r3, r3, #18
 8002534:	4013      	ands	r3, r2
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x62a>
 8002538:	e04f      	b.n	80025da <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002540:	4912      	ldr	r1, [pc, #72]	@ (800258c <HAL_RCC_OscConfig+0x69c>)
 8002542:	400a      	ands	r2, r1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe fc4d 	bl	8000de4 <HAL_GetTick>
 800254a:	0003      	movs	r3, r0
 800254c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fc48 	bl	8000de4 <HAL_GetTick>
 8002554:	0002      	movs	r2, r0
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e03c      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002562:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_RCC_OscConfig+0x680>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	049b      	lsls	r3, r3, #18
 800256a:	4013      	ands	r3, r2
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x660>
 800256e:	e034      	b.n	80025da <HAL_RCC_OscConfig+0x6ea>
 8002570:	40021000 	.word	0x40021000
 8002574:	ffff1fff 	.word	0xffff1fff
 8002578:	fffffeff 	.word	0xfffffeff
 800257c:	40007000 	.word	0x40007000
 8002580:	fffffbff 	.word	0xfffffbff
 8002584:	00001388 	.word	0x00001388
 8002588:	efffffff 	.word	0xefffffff
 800258c:	feffffff 	.word	0xfeffffff
 8002590:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a0:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <HAL_RCC_OscConfig+0x6f4>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	025b      	lsls	r3, r3, #9
 80025ac:	401a      	ands	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d10f      	bne.n	80025d6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	23f0      	movs	r3, #240	@ 0xf0
 80025ba:	039b      	lsls	r3, r3, #14
 80025bc:	401a      	ands	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	23c0      	movs	r3, #192	@ 0xc0
 80025ca:	041b      	lsls	r3, r3, #16
 80025cc:	401a      	ands	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b00a      	add	sp, #40	@ 0x28
 80025e2:	bdb0      	pop	{r4, r5, r7, pc}
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e128      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b96      	ldr	r3, [pc, #600]	@ (8002858 <HAL_RCC_ClockConfig+0x270>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2201      	movs	r2, #1
 8002602:	4013      	ands	r3, r2
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d91e      	bls.n	8002648 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b93      	ldr	r3, [pc, #588]	@ (8002858 <HAL_RCC_ClockConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2201      	movs	r2, #1
 8002610:	4393      	bics	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	4b90      	ldr	r3, [pc, #576]	@ (8002858 <HAL_RCC_ClockConfig+0x270>)
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800261c:	f7fe fbe2 	bl	8000de4 <HAL_GetTick>
 8002620:	0003      	movs	r3, r0
 8002622:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002624:	e009      	b.n	800263a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002626:	f7fe fbdd 	bl	8000de4 <HAL_GetTick>
 800262a:	0002      	movs	r2, r0
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	4a8a      	ldr	r2, [pc, #552]	@ (800285c <HAL_RCC_ClockConfig+0x274>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e109      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b87      	ldr	r3, [pc, #540]	@ (8002858 <HAL_RCC_ClockConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2201      	movs	r2, #1
 8002640:	4013      	ands	r3, r2
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d1ee      	bne.n	8002626 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2202      	movs	r2, #2
 800264e:	4013      	ands	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002652:	4b83      	ldr	r3, [pc, #524]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	22f0      	movs	r2, #240	@ 0xf0
 8002658:	4393      	bics	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	4b7f      	ldr	r3, [pc, #508]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 8002662:	430a      	orrs	r2, r1
 8002664:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2201      	movs	r2, #1
 800266c:	4013      	ands	r3, r2
 800266e:	d100      	bne.n	8002672 <HAL_RCC_ClockConfig+0x8a>
 8002670:	e089      	b.n	8002786 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800267a:	4b79      	ldr	r3, [pc, #484]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	029b      	lsls	r3, r3, #10
 8002682:	4013      	ands	r3, r2
 8002684:	d120      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0e1      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002692:	4b73      	ldr	r3, [pc, #460]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	049b      	lsls	r3, r3, #18
 800269a:	4013      	ands	r3, r2
 800269c:	d114      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0d5      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d106      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2204      	movs	r2, #4
 80026b0:	4013      	ands	r3, r2
 80026b2:	d109      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0ca      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026b8:	4b69      	ldr	r3, [pc, #420]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0c2      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c8:	4b65      	ldr	r3, [pc, #404]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2203      	movs	r2, #3
 80026ce:	4393      	bics	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4b62      	ldr	r3, [pc, #392]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026dc:	f7fe fb82 	bl	8000de4 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d111      	bne.n	8002710 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ec:	e009      	b.n	8002702 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ee:	f7fe fb79 	bl	8000de4 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	4a58      	ldr	r2, [pc, #352]	@ (800285c <HAL_RCC_ClockConfig+0x274>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0a5      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002702:	4b57      	ldr	r3, [pc, #348]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	220c      	movs	r2, #12
 8002708:	4013      	ands	r3, r2
 800270a:	2b08      	cmp	r3, #8
 800270c:	d1ef      	bne.n	80026ee <HAL_RCC_ClockConfig+0x106>
 800270e:	e03a      	b.n	8002786 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d111      	bne.n	800273c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002718:	e009      	b.n	800272e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271a:	f7fe fb63 	bl	8000de4 <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	4a4d      	ldr	r2, [pc, #308]	@ (800285c <HAL_RCC_ClockConfig+0x274>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e08f      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800272e:	4b4c      	ldr	r3, [pc, #304]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	220c      	movs	r2, #12
 8002734:	4013      	ands	r3, r2
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d1ef      	bne.n	800271a <HAL_RCC_ClockConfig+0x132>
 800273a:	e024      	b.n	8002786 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d11b      	bne.n	800277c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002744:	e009      	b.n	800275a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002746:	f7fe fb4d 	bl	8000de4 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	4a42      	ldr	r2, [pc, #264]	@ (800285c <HAL_RCC_ClockConfig+0x274>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e079      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800275a:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	220c      	movs	r2, #12
 8002760:	4013      	ands	r3, r2
 8002762:	2b04      	cmp	r3, #4
 8002764:	d1ef      	bne.n	8002746 <HAL_RCC_ClockConfig+0x15e>
 8002766:	e00e      	b.n	8002786 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe fb3c 	bl	8000de4 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	4a3a      	ldr	r2, [pc, #232]	@ (800285c <HAL_RCC_ClockConfig+0x274>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e068      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800277c:	4b38      	ldr	r3, [pc, #224]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	220c      	movs	r2, #12
 8002782:	4013      	ands	r3, r2
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002786:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <HAL_RCC_ClockConfig+0x270>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2201      	movs	r2, #1
 800278c:	4013      	ands	r3, r2
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d21e      	bcs.n	80027d2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002794:	4b30      	ldr	r3, [pc, #192]	@ (8002858 <HAL_RCC_ClockConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4393      	bics	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	4b2e      	ldr	r3, [pc, #184]	@ (8002858 <HAL_RCC_ClockConfig+0x270>)
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027a6:	f7fe fb1d 	bl	8000de4 <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	e009      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7fe fb18 	bl	8000de4 <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	4a28      	ldr	r2, [pc, #160]	@ (800285c <HAL_RCC_ClockConfig+0x274>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e044      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c4:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <HAL_RCC_ClockConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2201      	movs	r2, #1
 80027ca:	4013      	ands	r3, r2
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d1ee      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2204      	movs	r2, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a20      	ldr	r2, [pc, #128]	@ (8002864 <HAL_RCC_ClockConfig+0x27c>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	d00a      	beq.n	8002810 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fa:	4b19      	ldr	r3, [pc, #100]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002868 <HAL_RCC_ClockConfig+0x280>)
 8002800:	4013      	ands	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	00da      	lsls	r2, r3, #3
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 800280c:	430a      	orrs	r2, r1
 800280e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002810:	f000 f832 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002814:	0001      	movs	r1, r0
 8002816:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <HAL_RCC_ClockConfig+0x278>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	220f      	movs	r2, #15
 800281e:	4013      	ands	r3, r2
 8002820:	4a12      	ldr	r2, [pc, #72]	@ (800286c <HAL_RCC_ClockConfig+0x284>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	000a      	movs	r2, r1
 8002826:	40da      	lsrs	r2, r3
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_RCC_ClockConfig+0x288>)
 800282a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800282c:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <HAL_RCC_ClockConfig+0x28c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	250b      	movs	r5, #11
 8002832:	197c      	adds	r4, r7, r5
 8002834:	0018      	movs	r0, r3
 8002836:	f7fe fa8f 	bl	8000d58 <HAL_InitTick>
 800283a:	0003      	movs	r3, r0
 800283c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800283e:	197b      	adds	r3, r7, r5
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002846:	197b      	adds	r3, r7, r5
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	e000      	b.n	800284e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bdb0      	pop	{r4, r5, r7, pc}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	40022000 	.word	0x40022000
 800285c:	00001388 	.word	0x00001388
 8002860:	40021000 	.word	0x40021000
 8002864:	fffff8ff 	.word	0xfffff8ff
 8002868:	ffffc7ff 	.word	0xffffc7ff
 800286c:	08004ebc 	.word	0x08004ebc
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b08e      	sub	sp, #56	@ 0x38
 800287c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800287e:	4b4c      	ldr	r3, [pc, #304]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002886:	230c      	movs	r3, #12
 8002888:	4013      	ands	r3, r2
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d014      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x40>
 800288e:	d900      	bls.n	8002892 <HAL_RCC_GetSysClockFreq+0x1a>
 8002890:	e07b      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x112>
 8002892:	2b04      	cmp	r3, #4
 8002894:	d002      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x24>
 8002896:	2b08      	cmp	r3, #8
 8002898:	d00b      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800289a:	e076      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800289c:	4b44      	ldr	r3, [pc, #272]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2210      	movs	r2, #16
 80028a2:	4013      	ands	r3, r2
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80028a6:	4b43      	ldr	r3, [pc, #268]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028a8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80028aa:	e07c      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80028ac:	4b42      	ldr	r3, [pc, #264]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x140>)
 80028ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80028b0:	e079      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b2:	4b42      	ldr	r3, [pc, #264]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x144>)
 80028b4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80028b6:	e076      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ba:	0c9a      	lsrs	r2, r3, #18
 80028bc:	230f      	movs	r3, #15
 80028be:	401a      	ands	r2, r3
 80028c0:	4b3f      	ldr	r3, [pc, #252]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x148>)
 80028c2:	5c9b      	ldrb	r3, [r3, r2]
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c8:	0d9a      	lsrs	r2, r3, #22
 80028ca:	2303      	movs	r3, #3
 80028cc:	4013      	ands	r3, r2
 80028ce:	3301      	adds	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d2:	4b37      	ldr	r3, [pc, #220]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x138>)
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	025b      	lsls	r3, r3, #9
 80028da:	4013      	ands	r3, r2
 80028dc:	d01a      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	4a35      	ldr	r2, [pc, #212]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x144>)
 80028e8:	2300      	movs	r3, #0
 80028ea:	69b8      	ldr	r0, [r7, #24]
 80028ec:	69f9      	ldr	r1, [r7, #28]
 80028ee:	f7fd fcc1 	bl	8000274 <__aeabi_lmul>
 80028f2:	0002      	movs	r2, r0
 80028f4:	000b      	movs	r3, r1
 80028f6:	0010      	movs	r0, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f7fd fc95 	bl	8000234 <__aeabi_uldivmod>
 800290a:	0002      	movs	r2, r0
 800290c:	000b      	movs	r3, r1
 800290e:	0013      	movs	r3, r2
 8002910:	637b      	str	r3, [r7, #52]	@ 0x34
 8002912:	e037      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002914:	4b26      	ldr	r3, [pc, #152]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	4013      	ands	r3, r2
 800291c:	d01a      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4a23      	ldr	r2, [pc, #140]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002928:	2300      	movs	r3, #0
 800292a:	68b8      	ldr	r0, [r7, #8]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	f7fd fca1 	bl	8000274 <__aeabi_lmul>
 8002932:	0002      	movs	r2, r0
 8002934:	000b      	movs	r3, r1
 8002936:	0010      	movs	r0, r2
 8002938:	0019      	movs	r1, r3
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f7fd fc75 	bl	8000234 <__aeabi_uldivmod>
 800294a:	0002      	movs	r2, r0
 800294c:	000b      	movs	r3, r1
 800294e:	0013      	movs	r3, r2
 8002950:	637b      	str	r3, [r7, #52]	@ 0x34
 8002952:	e017      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002956:	0018      	movs	r0, r3
 8002958:	2300      	movs	r3, #0
 800295a:	0019      	movs	r1, r3
 800295c:	4a16      	ldr	r2, [pc, #88]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x140>)
 800295e:	2300      	movs	r3, #0
 8002960:	f7fd fc88 	bl	8000274 <__aeabi_lmul>
 8002964:	0002      	movs	r2, r0
 8002966:	000b      	movs	r3, r1
 8002968:	0010      	movs	r0, r2
 800296a:	0019      	movs	r1, r3
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	001c      	movs	r4, r3
 8002970:	2300      	movs	r3, #0
 8002972:	001d      	movs	r5, r3
 8002974:	0022      	movs	r2, r4
 8002976:	002b      	movs	r3, r5
 8002978:	f7fd fc5c 	bl	8000234 <__aeabi_uldivmod>
 800297c:	0002      	movs	r2, r0
 800297e:	000b      	movs	r3, r1
 8002980:	0013      	movs	r3, r2
 8002982:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002986:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002988:	e00d      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0b5b      	lsrs	r3, r3, #13
 8002990:	2207      	movs	r2, #7
 8002992:	4013      	ands	r3, r2
 8002994:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	3301      	adds	r3, #1
 800299a:	2280      	movs	r2, #128	@ 0x80
 800299c:	0212      	lsls	r2, r2, #8
 800299e:	409a      	lsls	r2, r3
 80029a0:	0013      	movs	r3, r2
 80029a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80029a4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b00e      	add	sp, #56	@ 0x38
 80029ae:	bdb0      	pop	{r4, r5, r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	003d0900 	.word	0x003d0900
 80029b8:	00f42400 	.word	0x00f42400
 80029bc:	007a1200 	.word	0x007a1200
 80029c0:	08004ed4 	.word	0x08004ed4

080029c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c8:	4b02      	ldr	r3, [pc, #8]	@ (80029d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	20000000 	.word	0x20000000

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029dc:	f7ff fff2 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 80029e0:	0001      	movs	r1, r0
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	2207      	movs	r2, #7
 80029ea:	4013      	ands	r3, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	@ (8002a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	40d9      	lsrs	r1, r3
 80029f2:	000b      	movs	r3, r1
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	40021000 	.word	0x40021000
 8002a00:	08004ecc 	.word	0x08004ecc

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a08:	f7ff ffdc 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002a0c:	0001      	movs	r1, r0
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	0adb      	lsrs	r3, r3, #11
 8002a14:	2207      	movs	r2, #7
 8002a16:	4013      	ands	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	40d9      	lsrs	r1, r3
 8002a1e:	000b      	movs	r3, r1
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08004ecc 	.word	0x08004ecc

08002a30 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a38:	2017      	movs	r0, #23
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2220      	movs	r2, #32
 8002a46:	4013      	ands	r3, r2
 8002a48:	d100      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002a4a:	e0c7      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4c:	4b84      	ldr	r3, [pc, #528]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	055b      	lsls	r3, r3, #21
 8002a54:	4013      	ands	r3, r2
 8002a56:	d109      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	4b81      	ldr	r3, [pc, #516]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a5c:	4b80      	ldr	r3, [pc, #512]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a5e:	2180      	movs	r1, #128	@ 0x80
 8002a60:	0549      	lsls	r1, r1, #21
 8002a62:	430a      	orrs	r2, r1
 8002a64:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b7d      	ldr	r3, [pc, #500]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	@ 0x80
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	d11a      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a78:	4b7a      	ldr	r3, [pc, #488]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b79      	ldr	r3, [pc, #484]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a7e:	2180      	movs	r1, #128	@ 0x80
 8002a80:	0049      	lsls	r1, r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe f9ad 	bl	8000de4 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe f9a8 	bl	8000de4 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0d9      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b70      	ldr	r3, [pc, #448]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002aae:	4b6c      	ldr	r3, [pc, #432]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	23c0      	movs	r3, #192	@ 0xc0
 8002ab4:	039b      	lsls	r3, r3, #14
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	23c0      	movs	r3, #192	@ 0xc0
 8002ac0:	039b      	lsls	r3, r3, #14
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d013      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	23c0      	movs	r3, #192	@ 0xc0
 8002ad0:	029b      	lsls	r3, r3, #10
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	23c0      	movs	r3, #192	@ 0xc0
 8002ad6:	029b      	lsls	r3, r3, #10
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d10a      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002adc:	4b60      	ldr	r3, [pc, #384]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	@ 0x80
 8002ae2:	029b      	lsls	r3, r3, #10
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	029b      	lsls	r3, r3, #10
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d101      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0b1      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002af2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002af4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002af6:	23c0      	movs	r3, #192	@ 0xc0
 8002af8:	029b      	lsls	r3, r3, #10
 8002afa:	4013      	ands	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d03b      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	23c0      	movs	r3, #192	@ 0xc0
 8002b0a:	029b      	lsls	r3, r3, #10
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d033      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d02e      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b1e:	4b50      	ldr	r3, [pc, #320]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b22:	4a51      	ldr	r2, [pc, #324]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b28:	4b4d      	ldr	r3, [pc, #308]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b2e:	2180      	movs	r1, #128	@ 0x80
 8002b30:	0309      	lsls	r1, r1, #12
 8002b32:	430a      	orrs	r2, r1
 8002b34:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b36:	4b4a      	ldr	r3, [pc, #296]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b3a:	4b49      	ldr	r3, [pc, #292]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b3c:	494b      	ldr	r1, [pc, #300]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b3e:	400a      	ands	r2, r1
 8002b40:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b42:	4b47      	ldr	r3, [pc, #284]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d014      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7fe f947 	bl	8000de4 <HAL_GetTick>
 8002b56:	0003      	movs	r3, r0
 8002b58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b5a:	e009      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fe f942 	bl	8000de4 <HAL_GetTick>
 8002b60:	0002      	movs	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	4a42      	ldr	r2, [pc, #264]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e072      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b70:	4b3b      	ldr	r3, [pc, #236]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d0ef      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2220      	movs	r2, #32
 8002b82:	4013      	ands	r3, r2
 8002b84:	d01f      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	23c0      	movs	r3, #192	@ 0xc0
 8002b8c:	029b      	lsls	r3, r3, #10
 8002b8e:	401a      	ands	r2, r3
 8002b90:	23c0      	movs	r3, #192	@ 0xc0
 8002b92:	029b      	lsls	r3, r3, #10
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002b98:	4b31      	ldr	r3, [pc, #196]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a35      	ldr	r2, [pc, #212]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	23c0      	movs	r3, #192	@ 0xc0
 8002ba8:	039b      	lsls	r3, r3, #14
 8002baa:	401a      	ands	r2, r3
 8002bac:	4b2c      	ldr	r3, [pc, #176]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bb4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	23c0      	movs	r3, #192	@ 0xc0
 8002bbc:	029b      	lsls	r3, r3, #10
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc6:	2317      	movs	r3, #23
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd4:	4b22      	ldr	r3, [pc, #136]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bd6:	4928      	ldr	r1, [pc, #160]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2202      	movs	r2, #2
 8002be2:	4013      	ands	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	220c      	movs	r2, #12
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	4013      	ands	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c04:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c08:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c14:	430a      	orrs	r2, r1
 8002c16:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c22:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2280      	movs	r2, #128	@ 0x80
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c40:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c44:	4a0f      	ldr	r2, [pc, #60]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b006      	add	sp, #24
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
 8002c68:	fffcffff 	.word	0xfffcffff
 8002c6c:	fff7ffff 	.word	0xfff7ffff
 8002c70:	00001388 	.word	0x00001388
 8002c74:	ffcfffff 	.word	0xffcfffff
 8002c78:	efffffff 	.word	0xefffffff
 8002c7c:	fffff3ff 	.word	0xfffff3ff
 8002c80:	ffffcfff 	.word	0xffffcfff
 8002c84:	fff3ffff 	.word	0xfff3ffff

08002c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e032      	b.n	8002d00 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2239      	movs	r2, #57	@ 0x39
 8002c9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d107      	bne.n	8002cb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2238      	movs	r2, #56	@ 0x38
 8002caa:	2100      	movs	r1, #0
 8002cac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fd fe55 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2239      	movs	r2, #57	@ 0x39
 8002cba:	2102      	movs	r1, #2
 8002cbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	0010      	movs	r0, r2
 8002cca:	f000 fa45 	bl	8003158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	223e      	movs	r2, #62	@ 0x3e
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	223a      	movs	r2, #58	@ 0x3a
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	223b      	movs	r2, #59	@ 0x3b
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	223c      	movs	r2, #60	@ 0x3c
 8002cea:	2101      	movs	r1, #1
 8002cec:	5499      	strb	r1, [r3, r2]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	223d      	movs	r2, #61	@ 0x3d
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2239      	movs	r2, #57	@ 0x39
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2239      	movs	r2, #57	@ 0x39
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d001      	beq.n	8002d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e036      	b.n	8002d8e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2239      	movs	r2, #57	@ 0x39
 8002d24:	2102      	movs	r1, #2
 8002d26:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2101      	movs	r1, #1
 8002d34:	430a      	orrs	r2, r1
 8002d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	@ 0x80
 8002d3e:	05db      	lsls	r3, r3, #23
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d009      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x50>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a13      	ldr	r2, [pc, #76]	@ (8002d98 <HAL_TIM_Base_Start_IT+0x90>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x50>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a12      	ldr	r2, [pc, #72]	@ (8002d9c <HAL_TIM_Base_Start_IT+0x94>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d111      	bne.n	8002d7c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2207      	movs	r2, #7
 8002d60:	4013      	ands	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d010      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7a:	e007      	b.n	8002d8c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	40011400 	.word	0x40011400

08002da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2202      	movs	r2, #2
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d124      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d11d      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	4252      	negs	r2, r2
 8002dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2203      	movs	r2, #3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 f9a0 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e007      	b.n	8002dfa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f993 	bl	8003118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 f99f 	bl	8003138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2204      	movs	r2, #4
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d125      	bne.n	8002e5a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2204      	movs	r2, #4
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d11e      	bne.n	8002e5a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2205      	movs	r2, #5
 8002e22:	4252      	negs	r2, r2
 8002e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	23c0      	movs	r3, #192	@ 0xc0
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4013      	ands	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 f973 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002e42:	e007      	b.n	8002e54 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f966 	bl	8003118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 f972 	bl	8003138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2208      	movs	r2, #8
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d124      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2208      	movs	r2, #8
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d11d      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2209      	movs	r2, #9
 8002e7c:	4252      	negs	r2, r2
 8002e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2204      	movs	r2, #4
 8002e84:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d004      	beq.n	8002e9c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 f947 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002e9a:	e007      	b.n	8002eac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 f93a 	bl	8003118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 f946 	bl	8003138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2210      	movs	r2, #16
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d125      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d11e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2211      	movs	r2, #17
 8002ed4:	4252      	negs	r2, r2
 8002ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2208      	movs	r2, #8
 8002edc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	23c0      	movs	r3, #192	@ 0xc0
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 f91a 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e007      	b.n	8002f06 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f000 f90d 	bl	8003118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 f919 	bl	8003138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2201      	movs	r2, #1
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10f      	bne.n	8002f3a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d108      	bne.n	8002f3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	4252      	negs	r2, r2
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7fd fad5 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2240      	movs	r2, #64	@ 0x40
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b40      	cmp	r3, #64	@ 0x40
 8002f46:	d10f      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2240      	movs	r2, #64	@ 0x40
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d108      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2241      	movs	r2, #65	@ 0x41
 8002f5c:	4252      	negs	r2, r2
 8002f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f8f0 	bl	8003148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7a:	230f      	movs	r3, #15
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2238      	movs	r2, #56	@ 0x38
 8002f86:	5c9b      	ldrb	r3, [r3, r2]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_TIM_ConfigClockSource+0x20>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e0bc      	b.n	800310a <HAL_TIM_ConfigClockSource+0x19a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2238      	movs	r2, #56	@ 0x38
 8002f94:	2101      	movs	r1, #1
 8002f96:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2239      	movs	r2, #57	@ 0x39
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2277      	movs	r2, #119	@ 0x77
 8002fac:	4393      	bics	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4a58      	ldr	r2, [pc, #352]	@ (8003114 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2280      	movs	r2, #128	@ 0x80
 8002fc6:	0192      	lsls	r2, r2, #6
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d040      	beq.n	800304e <HAL_TIM_ConfigClockSource+0xde>
 8002fcc:	2280      	movs	r2, #128	@ 0x80
 8002fce:	0192      	lsls	r2, r2, #6
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d900      	bls.n	8002fd6 <HAL_TIM_ConfigClockSource+0x66>
 8002fd4:	e088      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
 8002fd6:	2280      	movs	r2, #128	@ 0x80
 8002fd8:	0152      	lsls	r2, r2, #5
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d100      	bne.n	8002fe0 <HAL_TIM_ConfigClockSource+0x70>
 8002fde:	e088      	b.n	80030f2 <HAL_TIM_ConfigClockSource+0x182>
 8002fe0:	2280      	movs	r2, #128	@ 0x80
 8002fe2:	0152      	lsls	r2, r2, #5
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d900      	bls.n	8002fea <HAL_TIM_ConfigClockSource+0x7a>
 8002fe8:	e07e      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
 8002fea:	2b70      	cmp	r3, #112	@ 0x70
 8002fec:	d018      	beq.n	8003020 <HAL_TIM_ConfigClockSource+0xb0>
 8002fee:	d900      	bls.n	8002ff2 <HAL_TIM_ConfigClockSource+0x82>
 8002ff0:	e07a      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
 8002ff2:	2b60      	cmp	r3, #96	@ 0x60
 8002ff4:	d04f      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x126>
 8002ff6:	d900      	bls.n	8002ffa <HAL_TIM_ConfigClockSource+0x8a>
 8002ff8:	e076      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
 8002ffa:	2b50      	cmp	r3, #80	@ 0x50
 8002ffc:	d03b      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x106>
 8002ffe:	d900      	bls.n	8003002 <HAL_TIM_ConfigClockSource+0x92>
 8003000:	e072      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
 8003002:	2b40      	cmp	r3, #64	@ 0x40
 8003004:	d057      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x146>
 8003006:	d900      	bls.n	800300a <HAL_TIM_ConfigClockSource+0x9a>
 8003008:	e06e      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
 800300a:	2b30      	cmp	r3, #48	@ 0x30
 800300c:	d063      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x166>
 800300e:	d86b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d060      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x166>
 8003014:	d868      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d05d      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x166>
 800301a:	2b10      	cmp	r3, #16
 800301c:	d05b      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x166>
 800301e:	e063      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003030:	f000 f960 	bl	80032f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2277      	movs	r2, #119	@ 0x77
 8003040:	4313      	orrs	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]
      break;
 800304c:	e052      	b.n	80030f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800305e:	f000 f949 	bl	80032f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2180      	movs	r1, #128	@ 0x80
 800306e:	01c9      	lsls	r1, r1, #7
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
      break;
 8003074:	e03e      	b.n	80030f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	001a      	movs	r2, r3
 8003084:	f000 f8bc 	bl	8003200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2150      	movs	r1, #80	@ 0x50
 800308e:	0018      	movs	r0, r3
 8003090:	f000 f916 	bl	80032c0 <TIM_ITRx_SetConfig>
      break;
 8003094:	e02e      	b.n	80030f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a2:	001a      	movs	r2, r3
 80030a4:	f000 f8da 	bl	800325c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2160      	movs	r1, #96	@ 0x60
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 f906 	bl	80032c0 <TIM_ITRx_SetConfig>
      break;
 80030b4:	e01e      	b.n	80030f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	001a      	movs	r2, r3
 80030c4:	f000 f89c 	bl	8003200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2140      	movs	r1, #64	@ 0x40
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f8f6 	bl	80032c0 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e00e      	b.n	80030f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	0019      	movs	r1, r3
 80030e0:	0010      	movs	r0, r2
 80030e2:	f000 f8ed 	bl	80032c0 <TIM_ITRx_SetConfig>
      break;
 80030e6:	e005      	b.n	80030f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030e8:	230f      	movs	r3, #15
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
      break;
 80030f0:	e000      	b.n	80030f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80030f2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2239      	movs	r2, #57	@ 0x39
 80030f8:	2101      	movs	r1, #1
 80030fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2238      	movs	r2, #56	@ 0x38
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]

  return status;
 8003104:	230f      	movs	r3, #15
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	ffff00ff 	.word	0xffff00ff

08003118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003120:	46c0      	nop			@ (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b002      	add	sp, #8
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003130:	46c0      	nop			@ (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003140:	46c0      	nop			@ (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b002      	add	sp, #8
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003150:	46c0      	nop			@ (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}

08003158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	05db      	lsls	r3, r3, #23
 800316e:	429a      	cmp	r2, r3
 8003170:	d007      	beq.n	8003182 <TIM_Base_SetConfig+0x2a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1f      	ldr	r2, [pc, #124]	@ (80031f4 <TIM_Base_SetConfig+0x9c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0x2a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1e      	ldr	r2, [pc, #120]	@ (80031f8 <TIM_Base_SetConfig+0xa0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2270      	movs	r2, #112	@ 0x70
 8003186:	4393      	bics	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	2380      	movs	r3, #128	@ 0x80
 8003198:	05db      	lsls	r3, r3, #23
 800319a:	429a      	cmp	r2, r3
 800319c:	d007      	beq.n	80031ae <TIM_Base_SetConfig+0x56>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a14      	ldr	r2, [pc, #80]	@ (80031f4 <TIM_Base_SetConfig+0x9c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_Base_SetConfig+0x56>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a13      	ldr	r2, [pc, #76]	@ (80031f8 <TIM_Base_SetConfig+0xa0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d108      	bne.n	80031c0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a12      	ldr	r2, [pc, #72]	@ (80031fc <TIM_Base_SetConfig+0xa4>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2280      	movs	r2, #128	@ 0x80
 80031c4:	4393      	bics	r3, r2
 80031c6:	001a      	movs	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	615a      	str	r2, [r3, #20]
}
 80031ec:	46c0      	nop			@ (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b004      	add	sp, #16
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40010800 	.word	0x40010800
 80031f8:	40011400 	.word	0x40011400
 80031fc:	fffffcff 	.word	0xfffffcff

08003200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	2201      	movs	r2, #1
 8003218:	4393      	bics	r3, r2
 800321a:	001a      	movs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	22f0      	movs	r2, #240	@ 0xf0
 800322a:	4393      	bics	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	220a      	movs	r2, #10
 800323c:	4393      	bics	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	621a      	str	r2, [r3, #32]
}
 8003254:	46c0      	nop			@ (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b006      	add	sp, #24
 800325a:	bd80      	pop	{r7, pc}

0800325c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	2210      	movs	r2, #16
 800326e:	4393      	bics	r3, r2
 8003270:	001a      	movs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <TIM_TI2_ConfigInputStage+0x60>)
 8003286:	4013      	ands	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	031b      	lsls	r3, r3, #12
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	22a0      	movs	r2, #160	@ 0xa0
 8003298:	4393      	bics	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b006      	add	sp, #24
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	ffff0fff 	.word	0xffff0fff

080032c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2270      	movs	r2, #112	@ 0x70
 80032d4:	4393      	bics	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	2207      	movs	r2, #7
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	609a      	str	r2, [r3, #8]
}
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b004      	add	sp, #16
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <TIM_ETR_SetConfig+0x3c>)
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	431a      	orrs	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	46c0      	nop			@ (mov r8, r8)
 800332a:	46bd      	mov	sp, r7
 800332c:	b006      	add	sp, #24
 800332e:	bd80      	pop	{r7, pc}
 8003330:	ffff00ff 	.word	0xffff00ff

08003334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2238      	movs	r2, #56	@ 0x38
 8003342:	5c9b      	ldrb	r3, [r3, r2]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003348:	2302      	movs	r3, #2
 800334a:	e042      	b.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2238      	movs	r2, #56	@ 0x38
 8003350:	2101      	movs	r1, #1
 8003352:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2239      	movs	r2, #57	@ 0x39
 8003358:	2102      	movs	r1, #2
 800335a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2270      	movs	r2, #112	@ 0x70
 8003370:	4393      	bics	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	2380      	movs	r3, #128	@ 0x80
 800338c:	05db      	lsls	r3, r3, #23
 800338e:	429a      	cmp	r2, r3
 8003390:	d009      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a11      	ldr	r2, [pc, #68]	@ (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0f      	ldr	r2, [pc, #60]	@ (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10c      	bne.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2280      	movs	r2, #128	@ 0x80
 80033aa:	4393      	bics	r3, r2
 80033ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2239      	movs	r2, #57	@ 0x39
 80033c4:	2101      	movs	r1, #1
 80033c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2238      	movs	r2, #56	@ 0x38
 80033cc:	2100      	movs	r1, #0
 80033ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b004      	add	sp, #16
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	40010800 	.word	0x40010800
 80033e0:	40011400 	.word	0x40011400

080033e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e044      	b.n	8003480 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2278      	movs	r2, #120	@ 0x78
 8003402:	2100      	movs	r1, #0
 8003404:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0018      	movs	r0, r3
 800340a:	f7fd fac7 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2224      	movs	r2, #36	@ 0x24
 8003412:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2101      	movs	r1, #1
 8003420:	438a      	bics	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 f8d0 	bl	80035cc <UART_SetConfig>
 800342c:	0003      	movs	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e024      	b.n	8003480 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fb0d 	bl	8003a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	490d      	ldr	r1, [pc, #52]	@ (8003488 <HAL_UART_Init+0xa4>)
 8003452:	400a      	ands	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	212a      	movs	r1, #42	@ 0x2a
 8003462:	438a      	bics	r2, r1
 8003464:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2101      	movs	r1, #1
 8003472:	430a      	orrs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 fba5 	bl	8003bc8 <UART_CheckIdleState>
 800347e:	0003      	movs	r3, r0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b002      	add	sp, #8
 8003486:	bd80      	pop	{r7, pc}
 8003488:	ffffb7ff 	.word	0xffffb7ff

0800348c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	1dbb      	adds	r3, r7, #6
 800349a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d000      	beq.n	80034a6 <HAL_UART_Transmit+0x1a>
 80034a4:	e08c      	b.n	80035c0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_UART_Transmit+0x28>
 80034ac:	1dbb      	adds	r3, r7, #6
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e084      	b.n	80035c2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	015b      	lsls	r3, r3, #5
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d109      	bne.n	80034d8 <HAL_UART_Transmit+0x4c>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	d001      	beq.n	80034d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e074      	b.n	80035c2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2284      	movs	r2, #132	@ 0x84
 80034dc:	2100      	movs	r1, #0
 80034de:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2221      	movs	r2, #33	@ 0x21
 80034e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e6:	f7fd fc7d 	bl	8000de4 <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1dba      	adds	r2, r7, #6
 80034f2:	2150      	movs	r1, #80	@ 0x50
 80034f4:	8812      	ldrh	r2, [r2, #0]
 80034f6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1dba      	adds	r2, r7, #6
 80034fc:	2152      	movs	r1, #82	@ 0x52
 80034fe:	8812      	ldrh	r2, [r2, #0]
 8003500:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	2380      	movs	r3, #128	@ 0x80
 8003508:	015b      	lsls	r3, r3, #5
 800350a:	429a      	cmp	r2, r3
 800350c:	d108      	bne.n	8003520 <HAL_UART_Transmit+0x94>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e003      	b.n	8003528 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003528:	e02f      	b.n	800358a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	0013      	movs	r3, r2
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	f000 fbee 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 800353c:	1e03      	subs	r3, r0, #0
 800353e:	d004      	beq.n	800354a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e03b      	b.n	80035c2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	001a      	movs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	05d2      	lsls	r2, r2, #23
 800355c:	0dd2      	lsrs	r2, r2, #23
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	3302      	adds	r3, #2
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e007      	b.n	8003578 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	781a      	ldrb	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2252      	movs	r2, #82	@ 0x52
 800357c:	5a9b      	ldrh	r3, [r3, r2]
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b299      	uxth	r1, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2252      	movs	r2, #82	@ 0x52
 8003588:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2252      	movs	r2, #82	@ 0x52
 800358e:	5a9b      	ldrh	r3, [r3, r2]
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1c9      	bne.n	800352a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	0013      	movs	r3, r2
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	@ 0x40
 80035a4:	f000 fbb8 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 80035a8:	1e03      	subs	r3, r0, #0
 80035aa:	d004      	beq.n	80035b6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e005      	b.n	80035c2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b008      	add	sp, #32
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035cc:	b5b0      	push	{r4, r5, r7, lr}
 80035ce:	b08e      	sub	sp, #56	@ 0x38
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035d4:	231a      	movs	r3, #26
 80035d6:	2218      	movs	r2, #24
 80035d8:	189b      	adds	r3, r3, r2
 80035da:	19db      	adds	r3, r3, r7
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4ab4      	ldr	r2, [pc, #720]	@ (80038d0 <UART_SetConfig+0x304>)
 8003600:	4013      	ands	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800360a:	430a      	orrs	r2, r1
 800360c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4aaf      	ldr	r2, [pc, #700]	@ (80038d4 <UART_SetConfig+0x308>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4aa9      	ldr	r2, [pc, #676]	@ (80038d8 <UART_SetConfig+0x30c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800363c:	4313      	orrs	r3, r2
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4aa5      	ldr	r2, [pc, #660]	@ (80038dc <UART_SetConfig+0x310>)
 8003648:	4013      	ands	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003652:	430a      	orrs	r2, r1
 8003654:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4aa1      	ldr	r2, [pc, #644]	@ (80038e0 <UART_SetConfig+0x314>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d131      	bne.n	80036c4 <UART_SetConfig+0xf8>
 8003660:	4ba0      	ldr	r3, [pc, #640]	@ (80038e4 <UART_SetConfig+0x318>)
 8003662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003664:	220c      	movs	r2, #12
 8003666:	4013      	ands	r3, r2
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d01d      	beq.n	80036a8 <UART_SetConfig+0xdc>
 800366c:	d823      	bhi.n	80036b6 <UART_SetConfig+0xea>
 800366e:	2b08      	cmp	r3, #8
 8003670:	d00c      	beq.n	800368c <UART_SetConfig+0xc0>
 8003672:	d820      	bhi.n	80036b6 <UART_SetConfig+0xea>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <UART_SetConfig+0xb2>
 8003678:	2b04      	cmp	r3, #4
 800367a:	d00e      	beq.n	800369a <UART_SetConfig+0xce>
 800367c:	e01b      	b.n	80036b6 <UART_SetConfig+0xea>
 800367e:	231b      	movs	r3, #27
 8003680:	2218      	movs	r2, #24
 8003682:	189b      	adds	r3, r3, r2
 8003684:	19db      	adds	r3, r3, r7
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e065      	b.n	8003758 <UART_SetConfig+0x18c>
 800368c:	231b      	movs	r3, #27
 800368e:	2218      	movs	r2, #24
 8003690:	189b      	adds	r3, r3, r2
 8003692:	19db      	adds	r3, r3, r7
 8003694:	2202      	movs	r2, #2
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e05e      	b.n	8003758 <UART_SetConfig+0x18c>
 800369a:	231b      	movs	r3, #27
 800369c:	2218      	movs	r2, #24
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	19db      	adds	r3, r3, r7
 80036a2:	2204      	movs	r2, #4
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e057      	b.n	8003758 <UART_SetConfig+0x18c>
 80036a8:	231b      	movs	r3, #27
 80036aa:	2218      	movs	r2, #24
 80036ac:	189b      	adds	r3, r3, r2
 80036ae:	19db      	adds	r3, r3, r7
 80036b0:	2208      	movs	r2, #8
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e050      	b.n	8003758 <UART_SetConfig+0x18c>
 80036b6:	231b      	movs	r3, #27
 80036b8:	2218      	movs	r2, #24
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	19db      	adds	r3, r3, r7
 80036be:	2210      	movs	r2, #16
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e049      	b.n	8003758 <UART_SetConfig+0x18c>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a83      	ldr	r2, [pc, #524]	@ (80038d8 <UART_SetConfig+0x30c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d13e      	bne.n	800374c <UART_SetConfig+0x180>
 80036ce:	4b85      	ldr	r3, [pc, #532]	@ (80038e4 <UART_SetConfig+0x318>)
 80036d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036d2:	23c0      	movs	r3, #192	@ 0xc0
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	4013      	ands	r3, r2
 80036d8:	22c0      	movs	r2, #192	@ 0xc0
 80036da:	0112      	lsls	r2, r2, #4
 80036dc:	4293      	cmp	r3, r2
 80036de:	d027      	beq.n	8003730 <UART_SetConfig+0x164>
 80036e0:	22c0      	movs	r2, #192	@ 0xc0
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d82a      	bhi.n	800373e <UART_SetConfig+0x172>
 80036e8:	2280      	movs	r2, #128	@ 0x80
 80036ea:	0112      	lsls	r2, r2, #4
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d011      	beq.n	8003714 <UART_SetConfig+0x148>
 80036f0:	2280      	movs	r2, #128	@ 0x80
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d822      	bhi.n	800373e <UART_SetConfig+0x172>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <UART_SetConfig+0x13a>
 80036fc:	2280      	movs	r2, #128	@ 0x80
 80036fe:	00d2      	lsls	r2, r2, #3
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <UART_SetConfig+0x156>
 8003704:	e01b      	b.n	800373e <UART_SetConfig+0x172>
 8003706:	231b      	movs	r3, #27
 8003708:	2218      	movs	r2, #24
 800370a:	189b      	adds	r3, r3, r2
 800370c:	19db      	adds	r3, r3, r7
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e021      	b.n	8003758 <UART_SetConfig+0x18c>
 8003714:	231b      	movs	r3, #27
 8003716:	2218      	movs	r2, #24
 8003718:	189b      	adds	r3, r3, r2
 800371a:	19db      	adds	r3, r3, r7
 800371c:	2202      	movs	r2, #2
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e01a      	b.n	8003758 <UART_SetConfig+0x18c>
 8003722:	231b      	movs	r3, #27
 8003724:	2218      	movs	r2, #24
 8003726:	189b      	adds	r3, r3, r2
 8003728:	19db      	adds	r3, r3, r7
 800372a:	2204      	movs	r2, #4
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	e013      	b.n	8003758 <UART_SetConfig+0x18c>
 8003730:	231b      	movs	r3, #27
 8003732:	2218      	movs	r2, #24
 8003734:	189b      	adds	r3, r3, r2
 8003736:	19db      	adds	r3, r3, r7
 8003738:	2208      	movs	r2, #8
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e00c      	b.n	8003758 <UART_SetConfig+0x18c>
 800373e:	231b      	movs	r3, #27
 8003740:	2218      	movs	r2, #24
 8003742:	189b      	adds	r3, r3, r2
 8003744:	19db      	adds	r3, r3, r7
 8003746:	2210      	movs	r2, #16
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	e005      	b.n	8003758 <UART_SetConfig+0x18c>
 800374c:	231b      	movs	r3, #27
 800374e:	2218      	movs	r2, #24
 8003750:	189b      	adds	r3, r3, r2
 8003752:	19db      	adds	r3, r3, r7
 8003754:	2210      	movs	r2, #16
 8003756:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a5e      	ldr	r2, [pc, #376]	@ (80038d8 <UART_SetConfig+0x30c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d000      	beq.n	8003764 <UART_SetConfig+0x198>
 8003762:	e084      	b.n	800386e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003764:	231b      	movs	r3, #27
 8003766:	2218      	movs	r2, #24
 8003768:	189b      	adds	r3, r3, r2
 800376a:	19db      	adds	r3, r3, r7
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d01d      	beq.n	80037ae <UART_SetConfig+0x1e2>
 8003772:	dc20      	bgt.n	80037b6 <UART_SetConfig+0x1ea>
 8003774:	2b04      	cmp	r3, #4
 8003776:	d015      	beq.n	80037a4 <UART_SetConfig+0x1d8>
 8003778:	dc1d      	bgt.n	80037b6 <UART_SetConfig+0x1ea>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <UART_SetConfig+0x1b8>
 800377e:	2b02      	cmp	r3, #2
 8003780:	d005      	beq.n	800378e <UART_SetConfig+0x1c2>
 8003782:	e018      	b.n	80037b6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003784:	f7ff f928 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003788:	0003      	movs	r3, r0
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800378c:	e01c      	b.n	80037c8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800378e:	4b55      	ldr	r3, [pc, #340]	@ (80038e4 <UART_SetConfig+0x318>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2210      	movs	r2, #16
 8003794:	4013      	ands	r3, r2
 8003796:	d002      	beq.n	800379e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003798:	4b53      	ldr	r3, [pc, #332]	@ (80038e8 <UART_SetConfig+0x31c>)
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800379c:	e014      	b.n	80037c8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800379e:	4b53      	ldr	r3, [pc, #332]	@ (80038ec <UART_SetConfig+0x320>)
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037a2:	e011      	b.n	80037c8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a4:	f7ff f868 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 80037a8:	0003      	movs	r3, r0
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037ac:	e00c      	b.n	80037c8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037b4:	e008      	b.n	80037c8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80037ba:	231a      	movs	r3, #26
 80037bc:	2218      	movs	r2, #24
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	19db      	adds	r3, r3, r7
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]
        break;
 80037c6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d100      	bne.n	80037d0 <UART_SetConfig+0x204>
 80037ce:	e12f      	b.n	8003a30 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	0013      	movs	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	189b      	adds	r3, r3, r2
 80037da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037dc:	429a      	cmp	r2, r3
 80037de:	d305      	bcc.n	80037ec <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d906      	bls.n	80037fa <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80037ec:	231a      	movs	r3, #26
 80037ee:	2218      	movs	r2, #24
 80037f0:	189b      	adds	r3, r3, r2
 80037f2:	19db      	adds	r3, r3, r7
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e11a      	b.n	8003a30 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	6939      	ldr	r1, [r7, #16]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	000b      	movs	r3, r1
 8003808:	0e1b      	lsrs	r3, r3, #24
 800380a:	0010      	movs	r0, r2
 800380c:	0205      	lsls	r5, r0, #8
 800380e:	431d      	orrs	r5, r3
 8003810:	000b      	movs	r3, r1
 8003812:	021c      	lsls	r4, r3, #8
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68b8      	ldr	r0, [r7, #8]
 8003822:	68f9      	ldr	r1, [r7, #12]
 8003824:	1900      	adds	r0, r0, r4
 8003826:	4169      	adcs	r1, r5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f7fc fcfd 	bl	8000234 <__aeabi_uldivmod>
 800383a:	0002      	movs	r2, r0
 800383c:	000b      	movs	r3, r1
 800383e:	0013      	movs	r3, r2
 8003840:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003844:	23c0      	movs	r3, #192	@ 0xc0
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	429a      	cmp	r2, r3
 800384a:	d309      	bcc.n	8003860 <UART_SetConfig+0x294>
 800384c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	035b      	lsls	r3, r3, #13
 8003852:	429a      	cmp	r2, r3
 8003854:	d204      	bcs.n	8003860 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	e0e7      	b.n	8003a30 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003860:	231a      	movs	r3, #26
 8003862:	2218      	movs	r2, #24
 8003864:	189b      	adds	r3, r3, r2
 8003866:	19db      	adds	r3, r3, r7
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e0e0      	b.n	8003a30 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	2380      	movs	r3, #128	@ 0x80
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	429a      	cmp	r2, r3
 8003878:	d000      	beq.n	800387c <UART_SetConfig+0x2b0>
 800387a:	e082      	b.n	8003982 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800387c:	231b      	movs	r3, #27
 800387e:	2218      	movs	r2, #24
 8003880:	189b      	adds	r3, r3, r2
 8003882:	19db      	adds	r3, r3, r7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b08      	cmp	r3, #8
 8003888:	d834      	bhi.n	80038f4 <UART_SetConfig+0x328>
 800388a:	009a      	lsls	r2, r3, #2
 800388c:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <UART_SetConfig+0x324>)
 800388e:	18d3      	adds	r3, r2, r3
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003894:	f7ff f8a0 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003898:	0003      	movs	r3, r0
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800389c:	e033      	b.n	8003906 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800389e:	f7ff f8b1 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 80038a2:	0003      	movs	r3, r0
 80038a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038a6:	e02e      	b.n	8003906 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038a8:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <UART_SetConfig+0x318>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2210      	movs	r2, #16
 80038ae:	4013      	ands	r3, r2
 80038b0:	d002      	beq.n	80038b8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80038b2:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <UART_SetConfig+0x31c>)
 80038b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038b6:	e026      	b.n	8003906 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80038b8:	4b0c      	ldr	r3, [pc, #48]	@ (80038ec <UART_SetConfig+0x320>)
 80038ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038bc:	e023      	b.n	8003906 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038be:	f7fe ffdb 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 80038c2:	0003      	movs	r3, r0
 80038c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038c6:	e01e      	b.n	8003906 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c8:	2380      	movs	r3, #128	@ 0x80
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038ce:	e01a      	b.n	8003906 <UART_SetConfig+0x33a>
 80038d0:	efff69f3 	.word	0xefff69f3
 80038d4:	ffffcfff 	.word	0xffffcfff
 80038d8:	40004800 	.word	0x40004800
 80038dc:	fffff4ff 	.word	0xfffff4ff
 80038e0:	40004400 	.word	0x40004400
 80038e4:	40021000 	.word	0x40021000
 80038e8:	003d0900 	.word	0x003d0900
 80038ec:	00f42400 	.word	0x00f42400
 80038f0:	08004ee0 	.word	0x08004ee0
      default:
        pclk = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80038f8:	231a      	movs	r3, #26
 80038fa:	2218      	movs	r2, #24
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	19db      	adds	r3, r3, r7
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
        break;
 8003904:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d100      	bne.n	800390e <UART_SetConfig+0x342>
 800390c:	e090      	b.n	8003a30 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003910:	005a      	lsls	r2, r3, #1
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	18d2      	adds	r2, r2, r3
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	0019      	movs	r1, r3
 8003920:	0010      	movs	r0, r2
 8003922:	f7fc fbfb 	bl	800011c <__udivsi3>
 8003926:	0003      	movs	r3, r0
 8003928:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800392a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392c:	2b0f      	cmp	r3, #15
 800392e:	d921      	bls.n	8003974 <UART_SetConfig+0x3a8>
 8003930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	025b      	lsls	r3, r3, #9
 8003936:	429a      	cmp	r2, r3
 8003938:	d21c      	bcs.n	8003974 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800393a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393c:	b29a      	uxth	r2, r3
 800393e:	200e      	movs	r0, #14
 8003940:	2418      	movs	r4, #24
 8003942:	1903      	adds	r3, r0, r4
 8003944:	19db      	adds	r3, r3, r7
 8003946:	210f      	movs	r1, #15
 8003948:	438a      	bics	r2, r1
 800394a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	b29b      	uxth	r3, r3
 8003952:	2207      	movs	r2, #7
 8003954:	4013      	ands	r3, r2
 8003956:	b299      	uxth	r1, r3
 8003958:	1903      	adds	r3, r0, r4
 800395a:	19db      	adds	r3, r3, r7
 800395c:	1902      	adds	r2, r0, r4
 800395e:	19d2      	adds	r2, r2, r7
 8003960:	8812      	ldrh	r2, [r2, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	1902      	adds	r2, r0, r4
 800396c:	19d2      	adds	r2, r2, r7
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	e05d      	b.n	8003a30 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003974:	231a      	movs	r3, #26
 8003976:	2218      	movs	r2, #24
 8003978:	189b      	adds	r3, r3, r2
 800397a:	19db      	adds	r3, r3, r7
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e056      	b.n	8003a30 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003982:	231b      	movs	r3, #27
 8003984:	2218      	movs	r2, #24
 8003986:	189b      	adds	r3, r3, r2
 8003988:	19db      	adds	r3, r3, r7
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d822      	bhi.n	80039d6 <UART_SetConfig+0x40a>
 8003990:	009a      	lsls	r2, r3, #2
 8003992:	4b2f      	ldr	r3, [pc, #188]	@ (8003a50 <UART_SetConfig+0x484>)
 8003994:	18d3      	adds	r3, r2, r3
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800399a:	f7ff f81d 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800399e:	0003      	movs	r3, r0
 80039a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039a2:	e021      	b.n	80039e8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a4:	f7ff f82e 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 80039a8:	0003      	movs	r3, r0
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039ac:	e01c      	b.n	80039e8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039ae:	4b29      	ldr	r3, [pc, #164]	@ (8003a54 <UART_SetConfig+0x488>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2210      	movs	r2, #16
 80039b4:	4013      	ands	r3, r2
 80039b6:	d002      	beq.n	80039be <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80039b8:	4b27      	ldr	r3, [pc, #156]	@ (8003a58 <UART_SetConfig+0x48c>)
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80039bc:	e014      	b.n	80039e8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80039be:	4b27      	ldr	r3, [pc, #156]	@ (8003a5c <UART_SetConfig+0x490>)
 80039c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039c2:	e011      	b.n	80039e8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c4:	f7fe ff58 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 80039c8:	0003      	movs	r3, r0
 80039ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039cc:	e00c      	b.n	80039e8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039d4:	e008      	b.n	80039e8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80039da:	231a      	movs	r3, #26
 80039dc:	2218      	movs	r2, #24
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	19db      	adds	r3, r3, r7
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
        break;
 80039e6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80039e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d020      	beq.n	8003a30 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	085a      	lsrs	r2, r3, #1
 80039f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f6:	18d2      	adds	r2, r2, r3
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	0019      	movs	r1, r3
 80039fe:	0010      	movs	r0, r2
 8003a00:	f7fc fb8c 	bl	800011c <__udivsi3>
 8003a04:	0003      	movs	r3, r0
 8003a06:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	d90a      	bls.n	8003a24 <UART_SetConfig+0x458>
 8003a0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a10:	2380      	movs	r3, #128	@ 0x80
 8003a12:	025b      	lsls	r3, r3, #9
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d205      	bcs.n	8003a24 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	e005      	b.n	8003a30 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003a24:	231a      	movs	r3, #26
 8003a26:	2218      	movs	r2, #24
 8003a28:	189b      	adds	r3, r3, r2
 8003a2a:	19db      	adds	r3, r3, r7
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2200      	movs	r2, #0
 8003a34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a3c:	231a      	movs	r3, #26
 8003a3e:	2218      	movs	r2, #24
 8003a40:	189b      	adds	r3, r3, r2
 8003a42:	19db      	adds	r3, r3, r7
 8003a44:	781b      	ldrb	r3, [r3, #0]
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b00e      	add	sp, #56	@ 0x38
 8003a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	08004f04 	.word	0x08004f04
 8003a54:	40021000 	.word	0x40021000
 8003a58:	003d0900 	.word	0x003d0900
 8003a5c:	00f42400 	.word	0x00f42400

08003a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d00b      	beq.n	8003a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba4 <UART_AdvFeatureConfig+0x144>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	2202      	movs	r2, #2
 8003a90:	4013      	ands	r3, r2
 8003a92:	d00b      	beq.n	8003aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4a43      	ldr	r2, [pc, #268]	@ (8003ba8 <UART_AdvFeatureConfig+0x148>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d00b      	beq.n	8003ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a3b      	ldr	r2, [pc, #236]	@ (8003bac <UART_AdvFeatureConfig+0x14c>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4a34      	ldr	r2, [pc, #208]	@ (8003bb0 <UART_AdvFeatureConfig+0x150>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	2210      	movs	r2, #16
 8003af6:	4013      	ands	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb4 <UART_AdvFeatureConfig+0x154>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	0019      	movs	r1, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	2220      	movs	r2, #32
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	4a25      	ldr	r2, [pc, #148]	@ (8003bb8 <UART_AdvFeatureConfig+0x158>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	0019      	movs	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	2240      	movs	r2, #64	@ 0x40
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d01d      	beq.n	8003b7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a1d      	ldr	r2, [pc, #116]	@ (8003bbc <UART_AdvFeatureConfig+0x15c>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	0019      	movs	r1, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b5a:	2380      	movs	r3, #128	@ 0x80
 8003b5c:	035b      	lsls	r3, r3, #13
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d10b      	bne.n	8003b7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a15      	ldr	r2, [pc, #84]	@ (8003bc0 <UART_AdvFeatureConfig+0x160>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	2280      	movs	r2, #128	@ 0x80
 8003b80:	4013      	ands	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8003bc4 <UART_AdvFeatureConfig+0x164>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	0019      	movs	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]
  }
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	fffdffff 	.word	0xfffdffff
 8003ba8:	fffeffff 	.word	0xfffeffff
 8003bac:	fffbffff 	.word	0xfffbffff
 8003bb0:	ffff7fff 	.word	0xffff7fff
 8003bb4:	ffffefff 	.word	0xffffefff
 8003bb8:	ffffdfff 	.word	0xffffdfff
 8003bbc:	ffefffff 	.word	0xffefffff
 8003bc0:	ff9fffff 	.word	0xff9fffff
 8003bc4:	fff7ffff 	.word	0xfff7ffff

08003bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b092      	sub	sp, #72	@ 0x48
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2284      	movs	r2, #132	@ 0x84
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bd8:	f7fd f904 	bl	8000de4 <HAL_GetTick>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2208      	movs	r2, #8
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d12c      	bne.n	8003c48 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf0:	2280      	movs	r2, #128	@ 0x80
 8003bf2:	0391      	lsls	r1, r2, #14
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4a46      	ldr	r2, [pc, #280]	@ (8003d10 <UART_CheckIdleState+0x148>)
 8003bf8:	9200      	str	r2, [sp, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f000 f88c 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 8003c00:	1e03      	subs	r3, r0, #0
 8003c02:	d021      	beq.n	8003c48 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c04:	f3ef 8310 	mrs	r3, PRIMASK
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c0e:	2301      	movs	r3, #1
 8003c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	f383 8810 	msr	PRIMASK, r3
}
 8003c18:	46c0      	nop			@ (mov r8, r8)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2180      	movs	r1, #128	@ 0x80
 8003c26:	438a      	bics	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	f383 8810 	msr	PRIMASK, r3
}
 8003c34:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2278      	movs	r2, #120	@ 0x78
 8003c40:	2100      	movs	r1, #0
 8003c42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e05f      	b.n	8003d08 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2204      	movs	r2, #4
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d146      	bne.n	8003ce4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c58:	2280      	movs	r2, #128	@ 0x80
 8003c5a:	03d1      	lsls	r1, r2, #15
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d10 <UART_CheckIdleState+0x148>)
 8003c60:	9200      	str	r2, [sp, #0]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f000 f858 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d03b      	beq.n	8003ce4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c72:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c76:	2301      	movs	r3, #1
 8003c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f383 8810 	msr	PRIMASK, r3
}
 8003c80:	46c0      	nop			@ (mov r8, r8)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4921      	ldr	r1, [pc, #132]	@ (8003d14 <UART_CheckIdleState+0x14c>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f383 8810 	msr	PRIMASK, r3
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca8:	2301      	movs	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	f383 8810 	msr	PRIMASK, r3
}
 8003cce:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2280      	movs	r2, #128	@ 0x80
 8003cd4:	2120      	movs	r1, #32
 8003cd6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2278      	movs	r2, #120	@ 0x78
 8003cdc:	2100      	movs	r1, #0
 8003cde:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e011      	b.n	8003d08 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2280      	movs	r2, #128	@ 0x80
 8003cee:	2120      	movs	r1, #32
 8003cf0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2278      	movs	r2, #120	@ 0x78
 8003d02:	2100      	movs	r1, #0
 8003d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b010      	add	sp, #64	@ 0x40
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	01ffffff 	.word	0x01ffffff
 8003d14:	fffffedf 	.word	0xfffffedf

08003d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	1dfb      	adds	r3, r7, #7
 8003d26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d28:	e04b      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	d048      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d30:	f7fd f858 	bl	8000de4 <HAL_GetTick>
 8003d34:	0002      	movs	r2, r0
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d302      	bcc.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e04b      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2204      	movs	r2, #4
 8003d52:	4013      	ands	r3, r2
 8003d54:	d035      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d111      	bne.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 f83c 	bl	8003dec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2284      	movs	r2, #132	@ 0x84
 8003d78:	2108      	movs	r1, #8
 8003d7a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2278      	movs	r2, #120	@ 0x78
 8003d80:	2100      	movs	r1, #0
 8003d82:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e02c      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	2380      	movs	r3, #128	@ 0x80
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	401a      	ands	r2, r3
 8003d94:	2380      	movs	r3, #128	@ 0x80
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d112      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2280      	movs	r2, #128	@ 0x80
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f000 f81f 	bl	8003dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2284      	movs	r2, #132	@ 0x84
 8003db2:	2120      	movs	r1, #32
 8003db4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2278      	movs	r2, #120	@ 0x78
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e00f      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	425a      	negs	r2, r3
 8003dd2:	4153      	adcs	r3, r2
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	001a      	movs	r2, r3
 8003dd8:	1dfb      	adds	r3, r7, #7
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d0a4      	beq.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b004      	add	sp, #16
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08e      	sub	sp, #56	@ 0x38
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df4:	f3ef 8310 	mrs	r3, PRIMASK
 8003df8:	617b      	str	r3, [r7, #20]
  return(result);
 8003dfa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f383 8810 	msr	PRIMASK, r3
}
 8003e08:	46c0      	nop			@ (mov r8, r8)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4926      	ldr	r1, [pc, #152]	@ (8003eb0 <UART_EndRxTransfer+0xc4>)
 8003e16:	400a      	ands	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2a:	623b      	str	r3, [r7, #32]
  return(result);
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e30:	2301      	movs	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2101      	movs	r1, #1
 8003e48:	438a      	bics	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d118      	bne.n	8003e92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e60:	f3ef 8310 	mrs	r3, PRIMASK
 8003e64:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f383 8810 	msr	PRIMASK, r3
}
 8003e74:	46c0      	nop			@ (mov r8, r8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2110      	movs	r1, #16
 8003e82:	438a      	bics	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f383 8810 	msr	PRIMASK, r3
}
 8003e90:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2280      	movs	r2, #128	@ 0x80
 8003e96:	2120      	movs	r1, #32
 8003e98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b00e      	add	sp, #56	@ 0x38
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	fffffedf 	.word	0xfffffedf

08003eb4 <std>:
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	0004      	movs	r4, r0
 8003eba:	6003      	str	r3, [r0, #0]
 8003ebc:	6043      	str	r3, [r0, #4]
 8003ebe:	6083      	str	r3, [r0, #8]
 8003ec0:	8181      	strh	r1, [r0, #12]
 8003ec2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ec4:	81c2      	strh	r2, [r0, #14]
 8003ec6:	6103      	str	r3, [r0, #16]
 8003ec8:	6143      	str	r3, [r0, #20]
 8003eca:	6183      	str	r3, [r0, #24]
 8003ecc:	0019      	movs	r1, r3
 8003ece:	2208      	movs	r2, #8
 8003ed0:	305c      	adds	r0, #92	@ 0x5c
 8003ed2:	f000 fa0f 	bl	80042f4 <memset>
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <std+0x50>)
 8003ed8:	6224      	str	r4, [r4, #32]
 8003eda:	6263      	str	r3, [r4, #36]	@ 0x24
 8003edc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f08 <std+0x54>)
 8003ede:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8003f0c <std+0x58>)
 8003ee2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <std+0x5c>)
 8003ee6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <std+0x60>)
 8003eea:	429c      	cmp	r4, r3
 8003eec:	d005      	beq.n	8003efa <std+0x46>
 8003eee:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <std+0x64>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d002      	beq.n	8003efa <std+0x46>
 8003ef4:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <std+0x68>)
 8003ef6:	429c      	cmp	r4, r3
 8003ef8:	d103      	bne.n	8003f02 <std+0x4e>
 8003efa:	0020      	movs	r0, r4
 8003efc:	3058      	adds	r0, #88	@ 0x58
 8003efe:	f000 fa79 	bl	80043f4 <__retarget_lock_init_recursive>
 8003f02:	bd10      	pop	{r4, pc}
 8003f04:	0800411d 	.word	0x0800411d
 8003f08:	08004145 	.word	0x08004145
 8003f0c:	0800417d 	.word	0x0800417d
 8003f10:	080041a9 	.word	0x080041a9
 8003f14:	200001ac 	.word	0x200001ac
 8003f18:	20000214 	.word	0x20000214
 8003f1c:	2000027c 	.word	0x2000027c

08003f20 <stdio_exit_handler>:
 8003f20:	b510      	push	{r4, lr}
 8003f22:	4a03      	ldr	r2, [pc, #12]	@ (8003f30 <stdio_exit_handler+0x10>)
 8003f24:	4903      	ldr	r1, [pc, #12]	@ (8003f34 <stdio_exit_handler+0x14>)
 8003f26:	4804      	ldr	r0, [pc, #16]	@ (8003f38 <stdio_exit_handler+0x18>)
 8003f28:	f000 f86c 	bl	8004004 <_fwalk_sglue>
 8003f2c:	bd10      	pop	{r4, pc}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	2000000c 	.word	0x2000000c
 8003f34:	08004c85 	.word	0x08004c85
 8003f38:	2000001c 	.word	0x2000001c

08003f3c <cleanup_stdio>:
 8003f3c:	6841      	ldr	r1, [r0, #4]
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f6c <cleanup_stdio+0x30>)
 8003f40:	b510      	push	{r4, lr}
 8003f42:	0004      	movs	r4, r0
 8003f44:	4299      	cmp	r1, r3
 8003f46:	d001      	beq.n	8003f4c <cleanup_stdio+0x10>
 8003f48:	f000 fe9c 	bl	8004c84 <_fflush_r>
 8003f4c:	68a1      	ldr	r1, [r4, #8]
 8003f4e:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <cleanup_stdio+0x34>)
 8003f50:	4299      	cmp	r1, r3
 8003f52:	d002      	beq.n	8003f5a <cleanup_stdio+0x1e>
 8003f54:	0020      	movs	r0, r4
 8003f56:	f000 fe95 	bl	8004c84 <_fflush_r>
 8003f5a:	68e1      	ldr	r1, [r4, #12]
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <cleanup_stdio+0x38>)
 8003f5e:	4299      	cmp	r1, r3
 8003f60:	d002      	beq.n	8003f68 <cleanup_stdio+0x2c>
 8003f62:	0020      	movs	r0, r4
 8003f64:	f000 fe8e 	bl	8004c84 <_fflush_r>
 8003f68:	bd10      	pop	{r4, pc}
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	200001ac 	.word	0x200001ac
 8003f70:	20000214 	.word	0x20000214
 8003f74:	2000027c 	.word	0x2000027c

08003f78 <global_stdio_init.part.0>:
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <global_stdio_init.part.0+0x28>)
 8003f7c:	4a09      	ldr	r2, [pc, #36]	@ (8003fa4 <global_stdio_init.part.0+0x2c>)
 8003f7e:	2104      	movs	r1, #4
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	4809      	ldr	r0, [pc, #36]	@ (8003fa8 <global_stdio_init.part.0+0x30>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	f7ff ff95 	bl	8003eb4 <std>
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	2109      	movs	r1, #9
 8003f8e:	4807      	ldr	r0, [pc, #28]	@ (8003fac <global_stdio_init.part.0+0x34>)
 8003f90:	f7ff ff90 	bl	8003eb4 <std>
 8003f94:	2202      	movs	r2, #2
 8003f96:	2112      	movs	r1, #18
 8003f98:	4805      	ldr	r0, [pc, #20]	@ (8003fb0 <global_stdio_init.part.0+0x38>)
 8003f9a:	f7ff ff8b 	bl	8003eb4 <std>
 8003f9e:	bd10      	pop	{r4, pc}
 8003fa0:	200002e4 	.word	0x200002e4
 8003fa4:	08003f21 	.word	0x08003f21
 8003fa8:	200001ac 	.word	0x200001ac
 8003fac:	20000214 	.word	0x20000214
 8003fb0:	2000027c 	.word	0x2000027c

08003fb4 <__sfp_lock_acquire>:
 8003fb4:	b510      	push	{r4, lr}
 8003fb6:	4802      	ldr	r0, [pc, #8]	@ (8003fc0 <__sfp_lock_acquire+0xc>)
 8003fb8:	f000 fa1d 	bl	80043f6 <__retarget_lock_acquire_recursive>
 8003fbc:	bd10      	pop	{r4, pc}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	200002ed 	.word	0x200002ed

08003fc4 <__sfp_lock_release>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4802      	ldr	r0, [pc, #8]	@ (8003fd0 <__sfp_lock_release+0xc>)
 8003fc8:	f000 fa16 	bl	80043f8 <__retarget_lock_release_recursive>
 8003fcc:	bd10      	pop	{r4, pc}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	200002ed 	.word	0x200002ed

08003fd4 <__sinit>:
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	0004      	movs	r4, r0
 8003fd8:	f7ff ffec 	bl	8003fb4 <__sfp_lock_acquire>
 8003fdc:	6a23      	ldr	r3, [r4, #32]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <__sinit+0x14>
 8003fe2:	f7ff ffef 	bl	8003fc4 <__sfp_lock_release>
 8003fe6:	bd10      	pop	{r4, pc}
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <__sinit+0x28>)
 8003fea:	6223      	str	r3, [r4, #32]
 8003fec:	4b04      	ldr	r3, [pc, #16]	@ (8004000 <__sinit+0x2c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f6      	bne.n	8003fe2 <__sinit+0xe>
 8003ff4:	f7ff ffc0 	bl	8003f78 <global_stdio_init.part.0>
 8003ff8:	e7f3      	b.n	8003fe2 <__sinit+0xe>
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	08003f3d 	.word	0x08003f3d
 8004000:	200002e4 	.word	0x200002e4

08004004 <_fwalk_sglue>:
 8004004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004006:	0014      	movs	r4, r2
 8004008:	2600      	movs	r6, #0
 800400a:	9000      	str	r0, [sp, #0]
 800400c:	9101      	str	r1, [sp, #4]
 800400e:	68a5      	ldr	r5, [r4, #8]
 8004010:	6867      	ldr	r7, [r4, #4]
 8004012:	3f01      	subs	r7, #1
 8004014:	d504      	bpl.n	8004020 <_fwalk_sglue+0x1c>
 8004016:	6824      	ldr	r4, [r4, #0]
 8004018:	2c00      	cmp	r4, #0
 800401a:	d1f8      	bne.n	800400e <_fwalk_sglue+0xa>
 800401c:	0030      	movs	r0, r6
 800401e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004020:	89ab      	ldrh	r3, [r5, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d908      	bls.n	8004038 <_fwalk_sglue+0x34>
 8004026:	220e      	movs	r2, #14
 8004028:	5eab      	ldrsh	r3, [r5, r2]
 800402a:	3301      	adds	r3, #1
 800402c:	d004      	beq.n	8004038 <_fwalk_sglue+0x34>
 800402e:	0029      	movs	r1, r5
 8004030:	9800      	ldr	r0, [sp, #0]
 8004032:	9b01      	ldr	r3, [sp, #4]
 8004034:	4798      	blx	r3
 8004036:	4306      	orrs	r6, r0
 8004038:	3568      	adds	r5, #104	@ 0x68
 800403a:	e7ea      	b.n	8004012 <_fwalk_sglue+0xe>

0800403c <iprintf>:
 800403c:	b40f      	push	{r0, r1, r2, r3}
 800403e:	b507      	push	{r0, r1, r2, lr}
 8004040:	4905      	ldr	r1, [pc, #20]	@ (8004058 <iprintf+0x1c>)
 8004042:	ab04      	add	r3, sp, #16
 8004044:	6808      	ldr	r0, [r1, #0]
 8004046:	cb04      	ldmia	r3!, {r2}
 8004048:	6881      	ldr	r1, [r0, #8]
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	f000 fafa 	bl	8004644 <_vfiprintf_r>
 8004050:	b003      	add	sp, #12
 8004052:	bc08      	pop	{r3}
 8004054:	b004      	add	sp, #16
 8004056:	4718      	bx	r3
 8004058:	20000018 	.word	0x20000018

0800405c <_puts_r>:
 800405c:	6a03      	ldr	r3, [r0, #32]
 800405e:	b570      	push	{r4, r5, r6, lr}
 8004060:	0005      	movs	r5, r0
 8004062:	000e      	movs	r6, r1
 8004064:	6884      	ldr	r4, [r0, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <_puts_r+0x12>
 800406a:	f7ff ffb3 	bl	8003fd4 <__sinit>
 800406e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004070:	07db      	lsls	r3, r3, #31
 8004072:	d405      	bmi.n	8004080 <_puts_r+0x24>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	059b      	lsls	r3, r3, #22
 8004078:	d402      	bmi.n	8004080 <_puts_r+0x24>
 800407a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800407c:	f000 f9bb 	bl	80043f6 <__retarget_lock_acquire_recursive>
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	071b      	lsls	r3, r3, #28
 8004084:	d502      	bpl.n	800408c <_puts_r+0x30>
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d11f      	bne.n	80040cc <_puts_r+0x70>
 800408c:	0021      	movs	r1, r4
 800408e:	0028      	movs	r0, r5
 8004090:	f000 f8d2 	bl	8004238 <__swsetup_r>
 8004094:	2800      	cmp	r0, #0
 8004096:	d019      	beq.n	80040cc <_puts_r+0x70>
 8004098:	2501      	movs	r5, #1
 800409a:	426d      	negs	r5, r5
 800409c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800409e:	07db      	lsls	r3, r3, #31
 80040a0:	d405      	bmi.n	80040ae <_puts_r+0x52>
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	059b      	lsls	r3, r3, #22
 80040a6:	d402      	bmi.n	80040ae <_puts_r+0x52>
 80040a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040aa:	f000 f9a5 	bl	80043f8 <__retarget_lock_release_recursive>
 80040ae:	0028      	movs	r0, r5
 80040b0:	bd70      	pop	{r4, r5, r6, pc}
 80040b2:	3601      	adds	r6, #1
 80040b4:	60a3      	str	r3, [r4, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	da04      	bge.n	80040c4 <_puts_r+0x68>
 80040ba:	69a2      	ldr	r2, [r4, #24]
 80040bc:	429a      	cmp	r2, r3
 80040be:	dc16      	bgt.n	80040ee <_puts_r+0x92>
 80040c0:	290a      	cmp	r1, #10
 80040c2:	d014      	beq.n	80040ee <_puts_r+0x92>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	6022      	str	r2, [r4, #0]
 80040ca:	7019      	strb	r1, [r3, #0]
 80040cc:	68a3      	ldr	r3, [r4, #8]
 80040ce:	7831      	ldrb	r1, [r6, #0]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	2900      	cmp	r1, #0
 80040d4:	d1ed      	bne.n	80040b2 <_puts_r+0x56>
 80040d6:	60a3      	str	r3, [r4, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da0f      	bge.n	80040fc <_puts_r+0xa0>
 80040dc:	0022      	movs	r2, r4
 80040de:	0028      	movs	r0, r5
 80040e0:	310a      	adds	r1, #10
 80040e2:	f000 f867 	bl	80041b4 <__swbuf_r>
 80040e6:	3001      	adds	r0, #1
 80040e8:	d0d6      	beq.n	8004098 <_puts_r+0x3c>
 80040ea:	250a      	movs	r5, #10
 80040ec:	e7d6      	b.n	800409c <_puts_r+0x40>
 80040ee:	0022      	movs	r2, r4
 80040f0:	0028      	movs	r0, r5
 80040f2:	f000 f85f 	bl	80041b4 <__swbuf_r>
 80040f6:	3001      	adds	r0, #1
 80040f8:	d1e8      	bne.n	80040cc <_puts_r+0x70>
 80040fa:	e7cd      	b.n	8004098 <_puts_r+0x3c>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	6022      	str	r2, [r4, #0]
 8004102:	220a      	movs	r2, #10
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e7f0      	b.n	80040ea <_puts_r+0x8e>

08004108 <puts>:
 8004108:	b510      	push	{r4, lr}
 800410a:	4b03      	ldr	r3, [pc, #12]	@ (8004118 <puts+0x10>)
 800410c:	0001      	movs	r1, r0
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	f7ff ffa4 	bl	800405c <_puts_r>
 8004114:	bd10      	pop	{r4, pc}
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	20000018 	.word	0x20000018

0800411c <__sread>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	000c      	movs	r4, r1
 8004120:	250e      	movs	r5, #14
 8004122:	5f49      	ldrsh	r1, [r1, r5]
 8004124:	f000 f914 	bl	8004350 <_read_r>
 8004128:	2800      	cmp	r0, #0
 800412a:	db03      	blt.n	8004134 <__sread+0x18>
 800412c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800412e:	181b      	adds	r3, r3, r0
 8004130:	6563      	str	r3, [r4, #84]	@ 0x54
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	4a02      	ldr	r2, [pc, #8]	@ (8004140 <__sread+0x24>)
 8004138:	4013      	ands	r3, r2
 800413a:	81a3      	strh	r3, [r4, #12]
 800413c:	e7f9      	b.n	8004132 <__sread+0x16>
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	ffffefff 	.word	0xffffefff

08004144 <__swrite>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	001f      	movs	r7, r3
 8004148:	898b      	ldrh	r3, [r1, #12]
 800414a:	0005      	movs	r5, r0
 800414c:	000c      	movs	r4, r1
 800414e:	0016      	movs	r6, r2
 8004150:	05db      	lsls	r3, r3, #23
 8004152:	d505      	bpl.n	8004160 <__swrite+0x1c>
 8004154:	230e      	movs	r3, #14
 8004156:	5ec9      	ldrsh	r1, [r1, r3]
 8004158:	2200      	movs	r2, #0
 800415a:	2302      	movs	r3, #2
 800415c:	f000 f8e4 	bl	8004328 <_lseek_r>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	4a05      	ldr	r2, [pc, #20]	@ (8004178 <__swrite+0x34>)
 8004164:	0028      	movs	r0, r5
 8004166:	4013      	ands	r3, r2
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	0032      	movs	r2, r6
 800416c:	230e      	movs	r3, #14
 800416e:	5ee1      	ldrsh	r1, [r4, r3]
 8004170:	003b      	movs	r3, r7
 8004172:	f000 f901 	bl	8004378 <_write_r>
 8004176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004178:	ffffefff 	.word	0xffffefff

0800417c <__sseek>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	000c      	movs	r4, r1
 8004180:	250e      	movs	r5, #14
 8004182:	5f49      	ldrsh	r1, [r1, r5]
 8004184:	f000 f8d0 	bl	8004328 <_lseek_r>
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	1c42      	adds	r2, r0, #1
 800418c:	d103      	bne.n	8004196 <__sseek+0x1a>
 800418e:	4a05      	ldr	r2, [pc, #20]	@ (80041a4 <__sseek+0x28>)
 8004190:	4013      	ands	r3, r2
 8004192:	81a3      	strh	r3, [r4, #12]
 8004194:	bd70      	pop	{r4, r5, r6, pc}
 8004196:	2280      	movs	r2, #128	@ 0x80
 8004198:	0152      	lsls	r2, r2, #5
 800419a:	4313      	orrs	r3, r2
 800419c:	81a3      	strh	r3, [r4, #12]
 800419e:	6560      	str	r0, [r4, #84]	@ 0x54
 80041a0:	e7f8      	b.n	8004194 <__sseek+0x18>
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	ffffefff 	.word	0xffffefff

080041a8 <__sclose>:
 80041a8:	b510      	push	{r4, lr}
 80041aa:	230e      	movs	r3, #14
 80041ac:	5ec9      	ldrsh	r1, [r1, r3]
 80041ae:	f000 f8a9 	bl	8004304 <_close_r>
 80041b2:	bd10      	pop	{r4, pc}

080041b4 <__swbuf_r>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	0006      	movs	r6, r0
 80041b8:	000d      	movs	r5, r1
 80041ba:	0014      	movs	r4, r2
 80041bc:	2800      	cmp	r0, #0
 80041be:	d004      	beq.n	80041ca <__swbuf_r+0x16>
 80041c0:	6a03      	ldr	r3, [r0, #32]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <__swbuf_r+0x16>
 80041c6:	f7ff ff05 	bl	8003fd4 <__sinit>
 80041ca:	69a3      	ldr	r3, [r4, #24]
 80041cc:	60a3      	str	r3, [r4, #8]
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	071b      	lsls	r3, r3, #28
 80041d2:	d502      	bpl.n	80041da <__swbuf_r+0x26>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <__swbuf_r+0x3a>
 80041da:	0021      	movs	r1, r4
 80041dc:	0030      	movs	r0, r6
 80041de:	f000 f82b 	bl	8004238 <__swsetup_r>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d003      	beq.n	80041ee <__swbuf_r+0x3a>
 80041e6:	2501      	movs	r5, #1
 80041e8:	426d      	negs	r5, r5
 80041ea:	0028      	movs	r0, r5
 80041ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	6820      	ldr	r0, [r4, #0]
 80041f2:	b2ef      	uxtb	r7, r5
 80041f4:	1ac0      	subs	r0, r0, r3
 80041f6:	6963      	ldr	r3, [r4, #20]
 80041f8:	b2ed      	uxtb	r5, r5
 80041fa:	4283      	cmp	r3, r0
 80041fc:	dc05      	bgt.n	800420a <__swbuf_r+0x56>
 80041fe:	0021      	movs	r1, r4
 8004200:	0030      	movs	r0, r6
 8004202:	f000 fd3f 	bl	8004c84 <_fflush_r>
 8004206:	2800      	cmp	r0, #0
 8004208:	d1ed      	bne.n	80041e6 <__swbuf_r+0x32>
 800420a:	68a3      	ldr	r3, [r4, #8]
 800420c:	3001      	adds	r0, #1
 800420e:	3b01      	subs	r3, #1
 8004210:	60a3      	str	r3, [r4, #8]
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	6022      	str	r2, [r4, #0]
 8004218:	701f      	strb	r7, [r3, #0]
 800421a:	6963      	ldr	r3, [r4, #20]
 800421c:	4283      	cmp	r3, r0
 800421e:	d004      	beq.n	800422a <__swbuf_r+0x76>
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	07db      	lsls	r3, r3, #31
 8004224:	d5e1      	bpl.n	80041ea <__swbuf_r+0x36>
 8004226:	2d0a      	cmp	r5, #10
 8004228:	d1df      	bne.n	80041ea <__swbuf_r+0x36>
 800422a:	0021      	movs	r1, r4
 800422c:	0030      	movs	r0, r6
 800422e:	f000 fd29 	bl	8004c84 <_fflush_r>
 8004232:	2800      	cmp	r0, #0
 8004234:	d0d9      	beq.n	80041ea <__swbuf_r+0x36>
 8004236:	e7d6      	b.n	80041e6 <__swbuf_r+0x32>

08004238 <__swsetup_r>:
 8004238:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <__swsetup_r+0xb8>)
 800423a:	b570      	push	{r4, r5, r6, lr}
 800423c:	0005      	movs	r5, r0
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	000c      	movs	r4, r1
 8004242:	2800      	cmp	r0, #0
 8004244:	d004      	beq.n	8004250 <__swsetup_r+0x18>
 8004246:	6a03      	ldr	r3, [r0, #32]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <__swsetup_r+0x18>
 800424c:	f7ff fec2 	bl	8003fd4 <__sinit>
 8004250:	230c      	movs	r3, #12
 8004252:	5ee2      	ldrsh	r2, [r4, r3]
 8004254:	0713      	lsls	r3, r2, #28
 8004256:	d423      	bmi.n	80042a0 <__swsetup_r+0x68>
 8004258:	06d3      	lsls	r3, r2, #27
 800425a:	d407      	bmi.n	800426c <__swsetup_r+0x34>
 800425c:	2309      	movs	r3, #9
 800425e:	602b      	str	r3, [r5, #0]
 8004260:	2340      	movs	r3, #64	@ 0x40
 8004262:	2001      	movs	r0, #1
 8004264:	4313      	orrs	r3, r2
 8004266:	81a3      	strh	r3, [r4, #12]
 8004268:	4240      	negs	r0, r0
 800426a:	e03a      	b.n	80042e2 <__swsetup_r+0xaa>
 800426c:	0752      	lsls	r2, r2, #29
 800426e:	d513      	bpl.n	8004298 <__swsetup_r+0x60>
 8004270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004272:	2900      	cmp	r1, #0
 8004274:	d008      	beq.n	8004288 <__swsetup_r+0x50>
 8004276:	0023      	movs	r3, r4
 8004278:	3344      	adds	r3, #68	@ 0x44
 800427a:	4299      	cmp	r1, r3
 800427c:	d002      	beq.n	8004284 <__swsetup_r+0x4c>
 800427e:	0028      	movs	r0, r5
 8004280:	f000 f8bc 	bl	80043fc <_free_r>
 8004284:	2300      	movs	r3, #0
 8004286:	6363      	str	r3, [r4, #52]	@ 0x34
 8004288:	2224      	movs	r2, #36	@ 0x24
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	4393      	bics	r3, r2
 800428e:	81a3      	strh	r3, [r4, #12]
 8004290:	2300      	movs	r3, #0
 8004292:	6063      	str	r3, [r4, #4]
 8004294:	6923      	ldr	r3, [r4, #16]
 8004296:	6023      	str	r3, [r4, #0]
 8004298:	2308      	movs	r3, #8
 800429a:	89a2      	ldrh	r2, [r4, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <__swsetup_r+0x86>
 80042a6:	21a0      	movs	r1, #160	@ 0xa0
 80042a8:	2280      	movs	r2, #128	@ 0x80
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	0089      	lsls	r1, r1, #2
 80042ae:	0092      	lsls	r2, r2, #2
 80042b0:	400b      	ands	r3, r1
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <__swsetup_r+0x86>
 80042b6:	0021      	movs	r1, r4
 80042b8:	0028      	movs	r0, r5
 80042ba:	f000 fd39 	bl	8004d30 <__smakebuf_r>
 80042be:	230c      	movs	r3, #12
 80042c0:	5ee2      	ldrsh	r2, [r4, r3]
 80042c2:	2101      	movs	r1, #1
 80042c4:	0013      	movs	r3, r2
 80042c6:	400b      	ands	r3, r1
 80042c8:	420a      	tst	r2, r1
 80042ca:	d00b      	beq.n	80042e4 <__swsetup_r+0xac>
 80042cc:	2300      	movs	r3, #0
 80042ce:	60a3      	str	r3, [r4, #8]
 80042d0:	6963      	ldr	r3, [r4, #20]
 80042d2:	425b      	negs	r3, r3
 80042d4:	61a3      	str	r3, [r4, #24]
 80042d6:	2000      	movs	r0, #0
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	4283      	cmp	r3, r0
 80042dc:	d101      	bne.n	80042e2 <__swsetup_r+0xaa>
 80042de:	0613      	lsls	r3, r2, #24
 80042e0:	d4be      	bmi.n	8004260 <__swsetup_r+0x28>
 80042e2:	bd70      	pop	{r4, r5, r6, pc}
 80042e4:	0791      	lsls	r1, r2, #30
 80042e6:	d400      	bmi.n	80042ea <__swsetup_r+0xb2>
 80042e8:	6963      	ldr	r3, [r4, #20]
 80042ea:	60a3      	str	r3, [r4, #8]
 80042ec:	e7f3      	b.n	80042d6 <__swsetup_r+0x9e>
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	20000018 	.word	0x20000018

080042f4 <memset>:
 80042f4:	0003      	movs	r3, r0
 80042f6:	1882      	adds	r2, r0, r2
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d100      	bne.n	80042fe <memset+0xa>
 80042fc:	4770      	bx	lr
 80042fe:	7019      	strb	r1, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	e7f9      	b.n	80042f8 <memset+0x4>

08004304 <_close_r>:
 8004304:	2300      	movs	r3, #0
 8004306:	b570      	push	{r4, r5, r6, lr}
 8004308:	4d06      	ldr	r5, [pc, #24]	@ (8004324 <_close_r+0x20>)
 800430a:	0004      	movs	r4, r0
 800430c:	0008      	movs	r0, r1
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	f7fc fbe9 	bl	8000ae6 <_close>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	d103      	bne.n	8004320 <_close_r+0x1c>
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d000      	beq.n	8004320 <_close_r+0x1c>
 800431e:	6023      	str	r3, [r4, #0]
 8004320:	bd70      	pop	{r4, r5, r6, pc}
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	200002e8 	.word	0x200002e8

08004328 <_lseek_r>:
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	0004      	movs	r4, r0
 800432c:	0008      	movs	r0, r1
 800432e:	0011      	movs	r1, r2
 8004330:	001a      	movs	r2, r3
 8004332:	2300      	movs	r3, #0
 8004334:	4d05      	ldr	r5, [pc, #20]	@ (800434c <_lseek_r+0x24>)
 8004336:	602b      	str	r3, [r5, #0]
 8004338:	f7fc fbf6 	bl	8000b28 <_lseek>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d103      	bne.n	8004348 <_lseek_r+0x20>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d000      	beq.n	8004348 <_lseek_r+0x20>
 8004346:	6023      	str	r3, [r4, #0]
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	200002e8 	.word	0x200002e8

08004350 <_read_r>:
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	0004      	movs	r4, r0
 8004354:	0008      	movs	r0, r1
 8004356:	0011      	movs	r1, r2
 8004358:	001a      	movs	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	4d05      	ldr	r5, [pc, #20]	@ (8004374 <_read_r+0x24>)
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	f7fc fb88 	bl	8000a74 <_read>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d103      	bne.n	8004370 <_read_r+0x20>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d000      	beq.n	8004370 <_read_r+0x20>
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	200002e8 	.word	0x200002e8

08004378 <_write_r>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	0004      	movs	r4, r0
 800437c:	0008      	movs	r0, r1
 800437e:	0011      	movs	r1, r2
 8004380:	001a      	movs	r2, r3
 8004382:	2300      	movs	r3, #0
 8004384:	4d05      	ldr	r5, [pc, #20]	@ (800439c <_write_r+0x24>)
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	f7fc fb91 	bl	8000aae <_write>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d103      	bne.n	8004398 <_write_r+0x20>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d000      	beq.n	8004398 <_write_r+0x20>
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	bd70      	pop	{r4, r5, r6, pc}
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	200002e8 	.word	0x200002e8

080043a0 <__errno>:
 80043a0:	4b01      	ldr	r3, [pc, #4]	@ (80043a8 <__errno+0x8>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	4770      	bx	lr
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	20000018 	.word	0x20000018

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	2600      	movs	r6, #0
 80043b0:	4c0c      	ldr	r4, [pc, #48]	@ (80043e4 <__libc_init_array+0x38>)
 80043b2:	4d0d      	ldr	r5, [pc, #52]	@ (80043e8 <__libc_init_array+0x3c>)
 80043b4:	1b64      	subs	r4, r4, r5
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	42a6      	cmp	r6, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	2600      	movs	r6, #0
 80043be:	f000 fd3b 	bl	8004e38 <_init>
 80043c2:	4c0a      	ldr	r4, [pc, #40]	@ (80043ec <__libc_init_array+0x40>)
 80043c4:	4d0a      	ldr	r5, [pc, #40]	@ (80043f0 <__libc_init_array+0x44>)
 80043c6:	1b64      	subs	r4, r4, r5
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	42a6      	cmp	r6, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	00b3      	lsls	r3, r6, #2
 80043d2:	58eb      	ldr	r3, [r5, r3]
 80043d4:	4798      	blx	r3
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	00b3      	lsls	r3, r6, #2
 80043dc:	58eb      	ldr	r3, [r5, r3]
 80043de:	4798      	blx	r3
 80043e0:	3601      	adds	r6, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	08004f64 	.word	0x08004f64
 80043e8:	08004f64 	.word	0x08004f64
 80043ec:	08004f68 	.word	0x08004f68
 80043f0:	08004f64 	.word	0x08004f64

080043f4 <__retarget_lock_init_recursive>:
 80043f4:	4770      	bx	lr

080043f6 <__retarget_lock_acquire_recursive>:
 80043f6:	4770      	bx	lr

080043f8 <__retarget_lock_release_recursive>:
 80043f8:	4770      	bx	lr
	...

080043fc <_free_r>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	0005      	movs	r5, r0
 8004400:	1e0c      	subs	r4, r1, #0
 8004402:	d010      	beq.n	8004426 <_free_r+0x2a>
 8004404:	3c04      	subs	r4, #4
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	da00      	bge.n	800440e <_free_r+0x12>
 800440c:	18e4      	adds	r4, r4, r3
 800440e:	0028      	movs	r0, r5
 8004410:	f000 f8e0 	bl	80045d4 <__malloc_lock>
 8004414:	4a1d      	ldr	r2, [pc, #116]	@ (800448c <_free_r+0x90>)
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <_free_r+0x2c>
 800441c:	6063      	str	r3, [r4, #4]
 800441e:	6014      	str	r4, [r2, #0]
 8004420:	0028      	movs	r0, r5
 8004422:	f000 f8df 	bl	80045e4 <__malloc_unlock>
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	42a3      	cmp	r3, r4
 800442a:	d908      	bls.n	800443e <_free_r+0x42>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	1821      	adds	r1, r4, r0
 8004430:	428b      	cmp	r3, r1
 8004432:	d1f3      	bne.n	800441c <_free_r+0x20>
 8004434:	6819      	ldr	r1, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	1809      	adds	r1, r1, r0
 800443a:	6021      	str	r1, [r4, #0]
 800443c:	e7ee      	b.n	800441c <_free_r+0x20>
 800443e:	001a      	movs	r2, r3
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <_free_r+0x4e>
 8004446:	42a3      	cmp	r3, r4
 8004448:	d9f9      	bls.n	800443e <_free_r+0x42>
 800444a:	6811      	ldr	r1, [r2, #0]
 800444c:	1850      	adds	r0, r2, r1
 800444e:	42a0      	cmp	r0, r4
 8004450:	d10b      	bne.n	800446a <_free_r+0x6e>
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	1809      	adds	r1, r1, r0
 8004456:	1850      	adds	r0, r2, r1
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	4283      	cmp	r3, r0
 800445c:	d1e0      	bne.n	8004420 <_free_r+0x24>
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	1841      	adds	r1, r0, r1
 8004464:	6011      	str	r1, [r2, #0]
 8004466:	6053      	str	r3, [r2, #4]
 8004468:	e7da      	b.n	8004420 <_free_r+0x24>
 800446a:	42a0      	cmp	r0, r4
 800446c:	d902      	bls.n	8004474 <_free_r+0x78>
 800446e:	230c      	movs	r3, #12
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	e7d5      	b.n	8004420 <_free_r+0x24>
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	1821      	adds	r1, r4, r0
 8004478:	428b      	cmp	r3, r1
 800447a:	d103      	bne.n	8004484 <_free_r+0x88>
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	1809      	adds	r1, r1, r0
 8004482:	6021      	str	r1, [r4, #0]
 8004484:	6063      	str	r3, [r4, #4]
 8004486:	6054      	str	r4, [r2, #4]
 8004488:	e7ca      	b.n	8004420 <_free_r+0x24>
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	200002f4 	.word	0x200002f4

08004490 <sbrk_aligned>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	4e0f      	ldr	r6, [pc, #60]	@ (80044d0 <sbrk_aligned+0x40>)
 8004494:	000d      	movs	r5, r1
 8004496:	6831      	ldr	r1, [r6, #0]
 8004498:	0004      	movs	r4, r0
 800449a:	2900      	cmp	r1, #0
 800449c:	d102      	bne.n	80044a4 <sbrk_aligned+0x14>
 800449e:	f000 fcad 	bl	8004dfc <_sbrk_r>
 80044a2:	6030      	str	r0, [r6, #0]
 80044a4:	0029      	movs	r1, r5
 80044a6:	0020      	movs	r0, r4
 80044a8:	f000 fca8 	bl	8004dfc <_sbrk_r>
 80044ac:	1c43      	adds	r3, r0, #1
 80044ae:	d103      	bne.n	80044b8 <sbrk_aligned+0x28>
 80044b0:	2501      	movs	r5, #1
 80044b2:	426d      	negs	r5, r5
 80044b4:	0028      	movs	r0, r5
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	2303      	movs	r3, #3
 80044ba:	1cc5      	adds	r5, r0, #3
 80044bc:	439d      	bics	r5, r3
 80044be:	42a8      	cmp	r0, r5
 80044c0:	d0f8      	beq.n	80044b4 <sbrk_aligned+0x24>
 80044c2:	1a29      	subs	r1, r5, r0
 80044c4:	0020      	movs	r0, r4
 80044c6:	f000 fc99 	bl	8004dfc <_sbrk_r>
 80044ca:	3001      	adds	r0, #1
 80044cc:	d1f2      	bne.n	80044b4 <sbrk_aligned+0x24>
 80044ce:	e7ef      	b.n	80044b0 <sbrk_aligned+0x20>
 80044d0:	200002f0 	.word	0x200002f0

080044d4 <_malloc_r>:
 80044d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044d6:	2203      	movs	r2, #3
 80044d8:	1ccb      	adds	r3, r1, #3
 80044da:	4393      	bics	r3, r2
 80044dc:	3308      	adds	r3, #8
 80044de:	0005      	movs	r5, r0
 80044e0:	001f      	movs	r7, r3
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	d234      	bcs.n	8004550 <_malloc_r+0x7c>
 80044e6:	270c      	movs	r7, #12
 80044e8:	42b9      	cmp	r1, r7
 80044ea:	d833      	bhi.n	8004554 <_malloc_r+0x80>
 80044ec:	0028      	movs	r0, r5
 80044ee:	f000 f871 	bl	80045d4 <__malloc_lock>
 80044f2:	4e37      	ldr	r6, [pc, #220]	@ (80045d0 <_malloc_r+0xfc>)
 80044f4:	6833      	ldr	r3, [r6, #0]
 80044f6:	001c      	movs	r4, r3
 80044f8:	2c00      	cmp	r4, #0
 80044fa:	d12f      	bne.n	800455c <_malloc_r+0x88>
 80044fc:	0039      	movs	r1, r7
 80044fe:	0028      	movs	r0, r5
 8004500:	f7ff ffc6 	bl	8004490 <sbrk_aligned>
 8004504:	0004      	movs	r4, r0
 8004506:	1c43      	adds	r3, r0, #1
 8004508:	d15f      	bne.n	80045ca <_malloc_r+0xf6>
 800450a:	6834      	ldr	r4, [r6, #0]
 800450c:	9400      	str	r4, [sp, #0]
 800450e:	9b00      	ldr	r3, [sp, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d14a      	bne.n	80045aa <_malloc_r+0xd6>
 8004514:	2c00      	cmp	r4, #0
 8004516:	d052      	beq.n	80045be <_malloc_r+0xea>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	0028      	movs	r0, r5
 800451c:	18e3      	adds	r3, r4, r3
 800451e:	9900      	ldr	r1, [sp, #0]
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	f000 fc6b 	bl	8004dfc <_sbrk_r>
 8004526:	9b01      	ldr	r3, [sp, #4]
 8004528:	4283      	cmp	r3, r0
 800452a:	d148      	bne.n	80045be <_malloc_r+0xea>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	0028      	movs	r0, r5
 8004530:	1aff      	subs	r7, r7, r3
 8004532:	0039      	movs	r1, r7
 8004534:	f7ff ffac 	bl	8004490 <sbrk_aligned>
 8004538:	3001      	adds	r0, #1
 800453a:	d040      	beq.n	80045be <_malloc_r+0xea>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	19db      	adds	r3, r3, r7
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	6833      	ldr	r3, [r6, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	2a00      	cmp	r2, #0
 8004548:	d133      	bne.n	80045b2 <_malloc_r+0xde>
 800454a:	9b00      	ldr	r3, [sp, #0]
 800454c:	6033      	str	r3, [r6, #0]
 800454e:	e019      	b.n	8004584 <_malloc_r+0xb0>
 8004550:	2b00      	cmp	r3, #0
 8004552:	dac9      	bge.n	80044e8 <_malloc_r+0x14>
 8004554:	230c      	movs	r3, #12
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	2000      	movs	r0, #0
 800455a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800455c:	6821      	ldr	r1, [r4, #0]
 800455e:	1bc9      	subs	r1, r1, r7
 8004560:	d420      	bmi.n	80045a4 <_malloc_r+0xd0>
 8004562:	290b      	cmp	r1, #11
 8004564:	d90a      	bls.n	800457c <_malloc_r+0xa8>
 8004566:	19e2      	adds	r2, r4, r7
 8004568:	6027      	str	r7, [r4, #0]
 800456a:	42a3      	cmp	r3, r4
 800456c:	d104      	bne.n	8004578 <_malloc_r+0xa4>
 800456e:	6032      	str	r2, [r6, #0]
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	6011      	str	r1, [r2, #0]
 8004574:	6053      	str	r3, [r2, #4]
 8004576:	e005      	b.n	8004584 <_malloc_r+0xb0>
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	e7f9      	b.n	8004570 <_malloc_r+0x9c>
 800457c:	6862      	ldr	r2, [r4, #4]
 800457e:	42a3      	cmp	r3, r4
 8004580:	d10e      	bne.n	80045a0 <_malloc_r+0xcc>
 8004582:	6032      	str	r2, [r6, #0]
 8004584:	0028      	movs	r0, r5
 8004586:	f000 f82d 	bl	80045e4 <__malloc_unlock>
 800458a:	0020      	movs	r0, r4
 800458c:	2207      	movs	r2, #7
 800458e:	300b      	adds	r0, #11
 8004590:	1d23      	adds	r3, r4, #4
 8004592:	4390      	bics	r0, r2
 8004594:	1ac2      	subs	r2, r0, r3
 8004596:	4298      	cmp	r0, r3
 8004598:	d0df      	beq.n	800455a <_malloc_r+0x86>
 800459a:	1a1b      	subs	r3, r3, r0
 800459c:	50a3      	str	r3, [r4, r2]
 800459e:	e7dc      	b.n	800455a <_malloc_r+0x86>
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	e7ef      	b.n	8004584 <_malloc_r+0xb0>
 80045a4:	0023      	movs	r3, r4
 80045a6:	6864      	ldr	r4, [r4, #4]
 80045a8:	e7a6      	b.n	80044f8 <_malloc_r+0x24>
 80045aa:	9c00      	ldr	r4, [sp, #0]
 80045ac:	6863      	ldr	r3, [r4, #4]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	e7ad      	b.n	800450e <_malloc_r+0x3a>
 80045b2:	001a      	movs	r2, r3
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	42a3      	cmp	r3, r4
 80045b8:	d1fb      	bne.n	80045b2 <_malloc_r+0xde>
 80045ba:	2300      	movs	r3, #0
 80045bc:	e7da      	b.n	8004574 <_malloc_r+0xa0>
 80045be:	230c      	movs	r3, #12
 80045c0:	0028      	movs	r0, r5
 80045c2:	602b      	str	r3, [r5, #0]
 80045c4:	f000 f80e 	bl	80045e4 <__malloc_unlock>
 80045c8:	e7c6      	b.n	8004558 <_malloc_r+0x84>
 80045ca:	6007      	str	r7, [r0, #0]
 80045cc:	e7da      	b.n	8004584 <_malloc_r+0xb0>
 80045ce:	46c0      	nop			@ (mov r8, r8)
 80045d0:	200002f4 	.word	0x200002f4

080045d4 <__malloc_lock>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4802      	ldr	r0, [pc, #8]	@ (80045e0 <__malloc_lock+0xc>)
 80045d8:	f7ff ff0d 	bl	80043f6 <__retarget_lock_acquire_recursive>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	200002ec 	.word	0x200002ec

080045e4 <__malloc_unlock>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4802      	ldr	r0, [pc, #8]	@ (80045f0 <__malloc_unlock+0xc>)
 80045e8:	f7ff ff06 	bl	80043f8 <__retarget_lock_release_recursive>
 80045ec:	bd10      	pop	{r4, pc}
 80045ee:	46c0      	nop			@ (mov r8, r8)
 80045f0:	200002ec 	.word	0x200002ec

080045f4 <__sfputc_r>:
 80045f4:	6893      	ldr	r3, [r2, #8]
 80045f6:	b510      	push	{r4, lr}
 80045f8:	3b01      	subs	r3, #1
 80045fa:	6093      	str	r3, [r2, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	da04      	bge.n	800460a <__sfputc_r+0x16>
 8004600:	6994      	ldr	r4, [r2, #24]
 8004602:	42a3      	cmp	r3, r4
 8004604:	db07      	blt.n	8004616 <__sfputc_r+0x22>
 8004606:	290a      	cmp	r1, #10
 8004608:	d005      	beq.n	8004616 <__sfputc_r+0x22>
 800460a:	6813      	ldr	r3, [r2, #0]
 800460c:	1c58      	adds	r0, r3, #1
 800460e:	6010      	str	r0, [r2, #0]
 8004610:	7019      	strb	r1, [r3, #0]
 8004612:	0008      	movs	r0, r1
 8004614:	bd10      	pop	{r4, pc}
 8004616:	f7ff fdcd 	bl	80041b4 <__swbuf_r>
 800461a:	0001      	movs	r1, r0
 800461c:	e7f9      	b.n	8004612 <__sfputc_r+0x1e>

0800461e <__sfputs_r>:
 800461e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004620:	0006      	movs	r6, r0
 8004622:	000f      	movs	r7, r1
 8004624:	0014      	movs	r4, r2
 8004626:	18d5      	adds	r5, r2, r3
 8004628:	42ac      	cmp	r4, r5
 800462a:	d101      	bne.n	8004630 <__sfputs_r+0x12>
 800462c:	2000      	movs	r0, #0
 800462e:	e007      	b.n	8004640 <__sfputs_r+0x22>
 8004630:	7821      	ldrb	r1, [r4, #0]
 8004632:	003a      	movs	r2, r7
 8004634:	0030      	movs	r0, r6
 8004636:	f7ff ffdd 	bl	80045f4 <__sfputc_r>
 800463a:	3401      	adds	r4, #1
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d1f3      	bne.n	8004628 <__sfputs_r+0xa>
 8004640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004644 <_vfiprintf_r>:
 8004644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004646:	b0a1      	sub	sp, #132	@ 0x84
 8004648:	000f      	movs	r7, r1
 800464a:	0015      	movs	r5, r2
 800464c:	001e      	movs	r6, r3
 800464e:	9003      	str	r0, [sp, #12]
 8004650:	2800      	cmp	r0, #0
 8004652:	d004      	beq.n	800465e <_vfiprintf_r+0x1a>
 8004654:	6a03      	ldr	r3, [r0, #32]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <_vfiprintf_r+0x1a>
 800465a:	f7ff fcbb 	bl	8003fd4 <__sinit>
 800465e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004660:	07db      	lsls	r3, r3, #31
 8004662:	d405      	bmi.n	8004670 <_vfiprintf_r+0x2c>
 8004664:	89bb      	ldrh	r3, [r7, #12]
 8004666:	059b      	lsls	r3, r3, #22
 8004668:	d402      	bmi.n	8004670 <_vfiprintf_r+0x2c>
 800466a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800466c:	f7ff fec3 	bl	80043f6 <__retarget_lock_acquire_recursive>
 8004670:	89bb      	ldrh	r3, [r7, #12]
 8004672:	071b      	lsls	r3, r3, #28
 8004674:	d502      	bpl.n	800467c <_vfiprintf_r+0x38>
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d113      	bne.n	80046a4 <_vfiprintf_r+0x60>
 800467c:	0039      	movs	r1, r7
 800467e:	9803      	ldr	r0, [sp, #12]
 8004680:	f7ff fdda 	bl	8004238 <__swsetup_r>
 8004684:	2800      	cmp	r0, #0
 8004686:	d00d      	beq.n	80046a4 <_vfiprintf_r+0x60>
 8004688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800468a:	07db      	lsls	r3, r3, #31
 800468c:	d503      	bpl.n	8004696 <_vfiprintf_r+0x52>
 800468e:	2001      	movs	r0, #1
 8004690:	4240      	negs	r0, r0
 8004692:	b021      	add	sp, #132	@ 0x84
 8004694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004696:	89bb      	ldrh	r3, [r7, #12]
 8004698:	059b      	lsls	r3, r3, #22
 800469a:	d4f8      	bmi.n	800468e <_vfiprintf_r+0x4a>
 800469c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800469e:	f7ff feab 	bl	80043f8 <__retarget_lock_release_recursive>
 80046a2:	e7f4      	b.n	800468e <_vfiprintf_r+0x4a>
 80046a4:	2300      	movs	r3, #0
 80046a6:	ac08      	add	r4, sp, #32
 80046a8:	6163      	str	r3, [r4, #20]
 80046aa:	3320      	adds	r3, #32
 80046ac:	7663      	strb	r3, [r4, #25]
 80046ae:	3310      	adds	r3, #16
 80046b0:	76a3      	strb	r3, [r4, #26]
 80046b2:	9607      	str	r6, [sp, #28]
 80046b4:	002e      	movs	r6, r5
 80046b6:	7833      	ldrb	r3, [r6, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <_vfiprintf_r+0x7c>
 80046bc:	2b25      	cmp	r3, #37	@ 0x25
 80046be:	d148      	bne.n	8004752 <_vfiprintf_r+0x10e>
 80046c0:	1b73      	subs	r3, r6, r5
 80046c2:	9305      	str	r3, [sp, #20]
 80046c4:	42ae      	cmp	r6, r5
 80046c6:	d00b      	beq.n	80046e0 <_vfiprintf_r+0x9c>
 80046c8:	002a      	movs	r2, r5
 80046ca:	0039      	movs	r1, r7
 80046cc:	9803      	ldr	r0, [sp, #12]
 80046ce:	f7ff ffa6 	bl	800461e <__sfputs_r>
 80046d2:	3001      	adds	r0, #1
 80046d4:	d100      	bne.n	80046d8 <_vfiprintf_r+0x94>
 80046d6:	e0ae      	b.n	8004836 <_vfiprintf_r+0x1f2>
 80046d8:	6963      	ldr	r3, [r4, #20]
 80046da:	9a05      	ldr	r2, [sp, #20]
 80046dc:	189b      	adds	r3, r3, r2
 80046de:	6163      	str	r3, [r4, #20]
 80046e0:	7833      	ldrb	r3, [r6, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d100      	bne.n	80046e8 <_vfiprintf_r+0xa4>
 80046e6:	e0a6      	b.n	8004836 <_vfiprintf_r+0x1f2>
 80046e8:	2201      	movs	r2, #1
 80046ea:	2300      	movs	r3, #0
 80046ec:	4252      	negs	r2, r2
 80046ee:	6062      	str	r2, [r4, #4]
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	3254      	adds	r2, #84	@ 0x54
 80046f4:	1852      	adds	r2, r2, r1
 80046f6:	1c75      	adds	r5, r6, #1
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	60e3      	str	r3, [r4, #12]
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	7013      	strb	r3, [r2, #0]
 8004700:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004702:	4b59      	ldr	r3, [pc, #356]	@ (8004868 <_vfiprintf_r+0x224>)
 8004704:	2205      	movs	r2, #5
 8004706:	0018      	movs	r0, r3
 8004708:	7829      	ldrb	r1, [r5, #0]
 800470a:	9305      	str	r3, [sp, #20]
 800470c:	f000 fb88 	bl	8004e20 <memchr>
 8004710:	1c6e      	adds	r6, r5, #1
 8004712:	2800      	cmp	r0, #0
 8004714:	d11f      	bne.n	8004756 <_vfiprintf_r+0x112>
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	06d3      	lsls	r3, r2, #27
 800471a:	d504      	bpl.n	8004726 <_vfiprintf_r+0xe2>
 800471c:	2353      	movs	r3, #83	@ 0x53
 800471e:	a904      	add	r1, sp, #16
 8004720:	185b      	adds	r3, r3, r1
 8004722:	2120      	movs	r1, #32
 8004724:	7019      	strb	r1, [r3, #0]
 8004726:	0713      	lsls	r3, r2, #28
 8004728:	d504      	bpl.n	8004734 <_vfiprintf_r+0xf0>
 800472a:	2353      	movs	r3, #83	@ 0x53
 800472c:	a904      	add	r1, sp, #16
 800472e:	185b      	adds	r3, r3, r1
 8004730:	212b      	movs	r1, #43	@ 0x2b
 8004732:	7019      	strb	r1, [r3, #0]
 8004734:	782b      	ldrb	r3, [r5, #0]
 8004736:	2b2a      	cmp	r3, #42	@ 0x2a
 8004738:	d016      	beq.n	8004768 <_vfiprintf_r+0x124>
 800473a:	002e      	movs	r6, r5
 800473c:	2100      	movs	r1, #0
 800473e:	200a      	movs	r0, #10
 8004740:	68e3      	ldr	r3, [r4, #12]
 8004742:	7832      	ldrb	r2, [r6, #0]
 8004744:	1c75      	adds	r5, r6, #1
 8004746:	3a30      	subs	r2, #48	@ 0x30
 8004748:	2a09      	cmp	r2, #9
 800474a:	d950      	bls.n	80047ee <_vfiprintf_r+0x1aa>
 800474c:	2900      	cmp	r1, #0
 800474e:	d111      	bne.n	8004774 <_vfiprintf_r+0x130>
 8004750:	e017      	b.n	8004782 <_vfiprintf_r+0x13e>
 8004752:	3601      	adds	r6, #1
 8004754:	e7af      	b.n	80046b6 <_vfiprintf_r+0x72>
 8004756:	9b05      	ldr	r3, [sp, #20]
 8004758:	6822      	ldr	r2, [r4, #0]
 800475a:	1ac0      	subs	r0, r0, r3
 800475c:	2301      	movs	r3, #1
 800475e:	4083      	lsls	r3, r0
 8004760:	4313      	orrs	r3, r2
 8004762:	0035      	movs	r5, r6
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	e7cc      	b.n	8004702 <_vfiprintf_r+0xbe>
 8004768:	9b07      	ldr	r3, [sp, #28]
 800476a:	1d19      	adds	r1, r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	9107      	str	r1, [sp, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	db01      	blt.n	8004778 <_vfiprintf_r+0x134>
 8004774:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004776:	e004      	b.n	8004782 <_vfiprintf_r+0x13e>
 8004778:	425b      	negs	r3, r3
 800477a:	60e3      	str	r3, [r4, #12]
 800477c:	2302      	movs	r3, #2
 800477e:	4313      	orrs	r3, r2
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	7833      	ldrb	r3, [r6, #0]
 8004784:	2b2e      	cmp	r3, #46	@ 0x2e
 8004786:	d10c      	bne.n	80047a2 <_vfiprintf_r+0x15e>
 8004788:	7873      	ldrb	r3, [r6, #1]
 800478a:	2b2a      	cmp	r3, #42	@ 0x2a
 800478c:	d134      	bne.n	80047f8 <_vfiprintf_r+0x1b4>
 800478e:	9b07      	ldr	r3, [sp, #28]
 8004790:	3602      	adds	r6, #2
 8004792:	1d1a      	adds	r2, r3, #4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	9207      	str	r2, [sp, #28]
 8004798:	2b00      	cmp	r3, #0
 800479a:	da01      	bge.n	80047a0 <_vfiprintf_r+0x15c>
 800479c:	2301      	movs	r3, #1
 800479e:	425b      	negs	r3, r3
 80047a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80047a2:	4d32      	ldr	r5, [pc, #200]	@ (800486c <_vfiprintf_r+0x228>)
 80047a4:	2203      	movs	r2, #3
 80047a6:	0028      	movs	r0, r5
 80047a8:	7831      	ldrb	r1, [r6, #0]
 80047aa:	f000 fb39 	bl	8004e20 <memchr>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d006      	beq.n	80047c0 <_vfiprintf_r+0x17c>
 80047b2:	2340      	movs	r3, #64	@ 0x40
 80047b4:	1b40      	subs	r0, r0, r5
 80047b6:	4083      	lsls	r3, r0
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	3601      	adds	r6, #1
 80047bc:	4313      	orrs	r3, r2
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	7831      	ldrb	r1, [r6, #0]
 80047c2:	2206      	movs	r2, #6
 80047c4:	482a      	ldr	r0, [pc, #168]	@ (8004870 <_vfiprintf_r+0x22c>)
 80047c6:	1c75      	adds	r5, r6, #1
 80047c8:	7621      	strb	r1, [r4, #24]
 80047ca:	f000 fb29 	bl	8004e20 <memchr>
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d040      	beq.n	8004854 <_vfiprintf_r+0x210>
 80047d2:	4b28      	ldr	r3, [pc, #160]	@ (8004874 <_vfiprintf_r+0x230>)
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d122      	bne.n	800481e <_vfiprintf_r+0x1da>
 80047d8:	2207      	movs	r2, #7
 80047da:	9b07      	ldr	r3, [sp, #28]
 80047dc:	3307      	adds	r3, #7
 80047de:	4393      	bics	r3, r2
 80047e0:	3308      	adds	r3, #8
 80047e2:	9307      	str	r3, [sp, #28]
 80047e4:	6963      	ldr	r3, [r4, #20]
 80047e6:	9a04      	ldr	r2, [sp, #16]
 80047e8:	189b      	adds	r3, r3, r2
 80047ea:	6163      	str	r3, [r4, #20]
 80047ec:	e762      	b.n	80046b4 <_vfiprintf_r+0x70>
 80047ee:	4343      	muls	r3, r0
 80047f0:	002e      	movs	r6, r5
 80047f2:	2101      	movs	r1, #1
 80047f4:	189b      	adds	r3, r3, r2
 80047f6:	e7a4      	b.n	8004742 <_vfiprintf_r+0xfe>
 80047f8:	2300      	movs	r3, #0
 80047fa:	200a      	movs	r0, #10
 80047fc:	0019      	movs	r1, r3
 80047fe:	3601      	adds	r6, #1
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	7832      	ldrb	r2, [r6, #0]
 8004804:	1c75      	adds	r5, r6, #1
 8004806:	3a30      	subs	r2, #48	@ 0x30
 8004808:	2a09      	cmp	r2, #9
 800480a:	d903      	bls.n	8004814 <_vfiprintf_r+0x1d0>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0c8      	beq.n	80047a2 <_vfiprintf_r+0x15e>
 8004810:	9109      	str	r1, [sp, #36]	@ 0x24
 8004812:	e7c6      	b.n	80047a2 <_vfiprintf_r+0x15e>
 8004814:	4341      	muls	r1, r0
 8004816:	002e      	movs	r6, r5
 8004818:	2301      	movs	r3, #1
 800481a:	1889      	adds	r1, r1, r2
 800481c:	e7f1      	b.n	8004802 <_vfiprintf_r+0x1be>
 800481e:	aa07      	add	r2, sp, #28
 8004820:	9200      	str	r2, [sp, #0]
 8004822:	0021      	movs	r1, r4
 8004824:	003a      	movs	r2, r7
 8004826:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <_vfiprintf_r+0x234>)
 8004828:	9803      	ldr	r0, [sp, #12]
 800482a:	e000      	b.n	800482e <_vfiprintf_r+0x1ea>
 800482c:	bf00      	nop
 800482e:	9004      	str	r0, [sp, #16]
 8004830:	9b04      	ldr	r3, [sp, #16]
 8004832:	3301      	adds	r3, #1
 8004834:	d1d6      	bne.n	80047e4 <_vfiprintf_r+0x1a0>
 8004836:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004838:	07db      	lsls	r3, r3, #31
 800483a:	d405      	bmi.n	8004848 <_vfiprintf_r+0x204>
 800483c:	89bb      	ldrh	r3, [r7, #12]
 800483e:	059b      	lsls	r3, r3, #22
 8004840:	d402      	bmi.n	8004848 <_vfiprintf_r+0x204>
 8004842:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004844:	f7ff fdd8 	bl	80043f8 <__retarget_lock_release_recursive>
 8004848:	89bb      	ldrh	r3, [r7, #12]
 800484a:	065b      	lsls	r3, r3, #25
 800484c:	d500      	bpl.n	8004850 <_vfiprintf_r+0x20c>
 800484e:	e71e      	b.n	800468e <_vfiprintf_r+0x4a>
 8004850:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004852:	e71e      	b.n	8004692 <_vfiprintf_r+0x4e>
 8004854:	aa07      	add	r2, sp, #28
 8004856:	9200      	str	r2, [sp, #0]
 8004858:	0021      	movs	r1, r4
 800485a:	003a      	movs	r2, r7
 800485c:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <_vfiprintf_r+0x234>)
 800485e:	9803      	ldr	r0, [sp, #12]
 8004860:	f000 f87c 	bl	800495c <_printf_i>
 8004864:	e7e3      	b.n	800482e <_vfiprintf_r+0x1ea>
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	08004f28 	.word	0x08004f28
 800486c:	08004f2e 	.word	0x08004f2e
 8004870:	08004f32 	.word	0x08004f32
 8004874:	00000000 	.word	0x00000000
 8004878:	0800461f 	.word	0x0800461f

0800487c <_printf_common>:
 800487c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800487e:	0016      	movs	r6, r2
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	688a      	ldr	r2, [r1, #8]
 8004884:	690b      	ldr	r3, [r1, #16]
 8004886:	000c      	movs	r4, r1
 8004888:	9000      	str	r0, [sp, #0]
 800488a:	4293      	cmp	r3, r2
 800488c:	da00      	bge.n	8004890 <_printf_common+0x14>
 800488e:	0013      	movs	r3, r2
 8004890:	0022      	movs	r2, r4
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	3243      	adds	r2, #67	@ 0x43
 8004896:	7812      	ldrb	r2, [r2, #0]
 8004898:	2a00      	cmp	r2, #0
 800489a:	d001      	beq.n	80048a0 <_printf_common+0x24>
 800489c:	3301      	adds	r3, #1
 800489e:	6033      	str	r3, [r6, #0]
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	069b      	lsls	r3, r3, #26
 80048a4:	d502      	bpl.n	80048ac <_printf_common+0x30>
 80048a6:	6833      	ldr	r3, [r6, #0]
 80048a8:	3302      	adds	r3, #2
 80048aa:	6033      	str	r3, [r6, #0]
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	2306      	movs	r3, #6
 80048b0:	0015      	movs	r5, r2
 80048b2:	401d      	ands	r5, r3
 80048b4:	421a      	tst	r2, r3
 80048b6:	d027      	beq.n	8004908 <_printf_common+0x8c>
 80048b8:	0023      	movs	r3, r4
 80048ba:	3343      	adds	r3, #67	@ 0x43
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	1e5a      	subs	r2, r3, #1
 80048c0:	4193      	sbcs	r3, r2
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	0692      	lsls	r2, r2, #26
 80048c6:	d430      	bmi.n	800492a <_printf_common+0xae>
 80048c8:	0022      	movs	r2, r4
 80048ca:	9901      	ldr	r1, [sp, #4]
 80048cc:	9800      	ldr	r0, [sp, #0]
 80048ce:	9d08      	ldr	r5, [sp, #32]
 80048d0:	3243      	adds	r2, #67	@ 0x43
 80048d2:	47a8      	blx	r5
 80048d4:	3001      	adds	r0, #1
 80048d6:	d025      	beq.n	8004924 <_printf_common+0xa8>
 80048d8:	2206      	movs	r2, #6
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	2500      	movs	r5, #0
 80048de:	4013      	ands	r3, r2
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d105      	bne.n	80048f0 <_printf_common+0x74>
 80048e4:	6833      	ldr	r3, [r6, #0]
 80048e6:	68e5      	ldr	r5, [r4, #12]
 80048e8:	1aed      	subs	r5, r5, r3
 80048ea:	43eb      	mvns	r3, r5
 80048ec:	17db      	asrs	r3, r3, #31
 80048ee:	401d      	ands	r5, r3
 80048f0:	68a3      	ldr	r3, [r4, #8]
 80048f2:	6922      	ldr	r2, [r4, #16]
 80048f4:	4293      	cmp	r3, r2
 80048f6:	dd01      	ble.n	80048fc <_printf_common+0x80>
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	18ed      	adds	r5, r5, r3
 80048fc:	2600      	movs	r6, #0
 80048fe:	42b5      	cmp	r5, r6
 8004900:	d120      	bne.n	8004944 <_printf_common+0xc8>
 8004902:	2000      	movs	r0, #0
 8004904:	e010      	b.n	8004928 <_printf_common+0xac>
 8004906:	3501      	adds	r5, #1
 8004908:	68e3      	ldr	r3, [r4, #12]
 800490a:	6832      	ldr	r2, [r6, #0]
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	42ab      	cmp	r3, r5
 8004910:	ddd2      	ble.n	80048b8 <_printf_common+0x3c>
 8004912:	0022      	movs	r2, r4
 8004914:	2301      	movs	r3, #1
 8004916:	9901      	ldr	r1, [sp, #4]
 8004918:	9800      	ldr	r0, [sp, #0]
 800491a:	9f08      	ldr	r7, [sp, #32]
 800491c:	3219      	adds	r2, #25
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	d1f0      	bne.n	8004906 <_printf_common+0x8a>
 8004924:	2001      	movs	r0, #1
 8004926:	4240      	negs	r0, r0
 8004928:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800492a:	2030      	movs	r0, #48	@ 0x30
 800492c:	18e1      	adds	r1, r4, r3
 800492e:	3143      	adds	r1, #67	@ 0x43
 8004930:	7008      	strb	r0, [r1, #0]
 8004932:	0021      	movs	r1, r4
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	3145      	adds	r1, #69	@ 0x45
 8004938:	7809      	ldrb	r1, [r1, #0]
 800493a:	18a2      	adds	r2, r4, r2
 800493c:	3243      	adds	r2, #67	@ 0x43
 800493e:	3302      	adds	r3, #2
 8004940:	7011      	strb	r1, [r2, #0]
 8004942:	e7c1      	b.n	80048c8 <_printf_common+0x4c>
 8004944:	0022      	movs	r2, r4
 8004946:	2301      	movs	r3, #1
 8004948:	9901      	ldr	r1, [sp, #4]
 800494a:	9800      	ldr	r0, [sp, #0]
 800494c:	9f08      	ldr	r7, [sp, #32]
 800494e:	321a      	adds	r2, #26
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	d0e6      	beq.n	8004924 <_printf_common+0xa8>
 8004956:	3601      	adds	r6, #1
 8004958:	e7d1      	b.n	80048fe <_printf_common+0x82>
	...

0800495c <_printf_i>:
 800495c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495e:	b08b      	sub	sp, #44	@ 0x2c
 8004960:	9206      	str	r2, [sp, #24]
 8004962:	000a      	movs	r2, r1
 8004964:	3243      	adds	r2, #67	@ 0x43
 8004966:	9307      	str	r3, [sp, #28]
 8004968:	9005      	str	r0, [sp, #20]
 800496a:	9203      	str	r2, [sp, #12]
 800496c:	7e0a      	ldrb	r2, [r1, #24]
 800496e:	000c      	movs	r4, r1
 8004970:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004972:	2a78      	cmp	r2, #120	@ 0x78
 8004974:	d809      	bhi.n	800498a <_printf_i+0x2e>
 8004976:	2a62      	cmp	r2, #98	@ 0x62
 8004978:	d80b      	bhi.n	8004992 <_printf_i+0x36>
 800497a:	2a00      	cmp	r2, #0
 800497c:	d100      	bne.n	8004980 <_printf_i+0x24>
 800497e:	e0bc      	b.n	8004afa <_printf_i+0x19e>
 8004980:	497b      	ldr	r1, [pc, #492]	@ (8004b70 <_printf_i+0x214>)
 8004982:	9104      	str	r1, [sp, #16]
 8004984:	2a58      	cmp	r2, #88	@ 0x58
 8004986:	d100      	bne.n	800498a <_printf_i+0x2e>
 8004988:	e090      	b.n	8004aac <_printf_i+0x150>
 800498a:	0025      	movs	r5, r4
 800498c:	3542      	adds	r5, #66	@ 0x42
 800498e:	702a      	strb	r2, [r5, #0]
 8004990:	e022      	b.n	80049d8 <_printf_i+0x7c>
 8004992:	0010      	movs	r0, r2
 8004994:	3863      	subs	r0, #99	@ 0x63
 8004996:	2815      	cmp	r0, #21
 8004998:	d8f7      	bhi.n	800498a <_printf_i+0x2e>
 800499a:	f7fb fbb5 	bl	8000108 <__gnu_thumb1_case_shi>
 800499e:	0016      	.short	0x0016
 80049a0:	fff6001f 	.word	0xfff6001f
 80049a4:	fff6fff6 	.word	0xfff6fff6
 80049a8:	001ffff6 	.word	0x001ffff6
 80049ac:	fff6fff6 	.word	0xfff6fff6
 80049b0:	fff6fff6 	.word	0xfff6fff6
 80049b4:	003600a1 	.word	0x003600a1
 80049b8:	fff60080 	.word	0xfff60080
 80049bc:	00b2fff6 	.word	0x00b2fff6
 80049c0:	0036fff6 	.word	0x0036fff6
 80049c4:	fff6fff6 	.word	0xfff6fff6
 80049c8:	0084      	.short	0x0084
 80049ca:	0025      	movs	r5, r4
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	3542      	adds	r5, #66	@ 0x42
 80049d0:	1d11      	adds	r1, r2, #4
 80049d2:	6019      	str	r1, [r3, #0]
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	702b      	strb	r3, [r5, #0]
 80049d8:	2301      	movs	r3, #1
 80049da:	e0a0      	b.n	8004b1e <_printf_i+0x1c2>
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	6809      	ldr	r1, [r1, #0]
 80049e0:	1d02      	adds	r2, r0, #4
 80049e2:	060d      	lsls	r5, r1, #24
 80049e4:	d50b      	bpl.n	80049fe <_printf_i+0xa2>
 80049e6:	6806      	ldr	r6, [r0, #0]
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	da03      	bge.n	80049f6 <_printf_i+0x9a>
 80049ee:	232d      	movs	r3, #45	@ 0x2d
 80049f0:	9a03      	ldr	r2, [sp, #12]
 80049f2:	4276      	negs	r6, r6
 80049f4:	7013      	strb	r3, [r2, #0]
 80049f6:	4b5e      	ldr	r3, [pc, #376]	@ (8004b70 <_printf_i+0x214>)
 80049f8:	270a      	movs	r7, #10
 80049fa:	9304      	str	r3, [sp, #16]
 80049fc:	e018      	b.n	8004a30 <_printf_i+0xd4>
 80049fe:	6806      	ldr	r6, [r0, #0]
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	0649      	lsls	r1, r1, #25
 8004a04:	d5f1      	bpl.n	80049ea <_printf_i+0x8e>
 8004a06:	b236      	sxth	r6, r6
 8004a08:	e7ef      	b.n	80049ea <_printf_i+0x8e>
 8004a0a:	6808      	ldr	r0, [r1, #0]
 8004a0c:	6819      	ldr	r1, [r3, #0]
 8004a0e:	c940      	ldmia	r1!, {r6}
 8004a10:	0605      	lsls	r5, r0, #24
 8004a12:	d402      	bmi.n	8004a1a <_printf_i+0xbe>
 8004a14:	0640      	lsls	r0, r0, #25
 8004a16:	d500      	bpl.n	8004a1a <_printf_i+0xbe>
 8004a18:	b2b6      	uxth	r6, r6
 8004a1a:	6019      	str	r1, [r3, #0]
 8004a1c:	4b54      	ldr	r3, [pc, #336]	@ (8004b70 <_printf_i+0x214>)
 8004a1e:	270a      	movs	r7, #10
 8004a20:	9304      	str	r3, [sp, #16]
 8004a22:	2a6f      	cmp	r2, #111	@ 0x6f
 8004a24:	d100      	bne.n	8004a28 <_printf_i+0xcc>
 8004a26:	3f02      	subs	r7, #2
 8004a28:	0023      	movs	r3, r4
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	3343      	adds	r3, #67	@ 0x43
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	60a3      	str	r3, [r4, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	db03      	blt.n	8004a40 <_printf_i+0xe4>
 8004a38:	2104      	movs	r1, #4
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	438a      	bics	r2, r1
 8004a3e:	6022      	str	r2, [r4, #0]
 8004a40:	2e00      	cmp	r6, #0
 8004a42:	d102      	bne.n	8004a4a <_printf_i+0xee>
 8004a44:	9d03      	ldr	r5, [sp, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00c      	beq.n	8004a64 <_printf_i+0x108>
 8004a4a:	9d03      	ldr	r5, [sp, #12]
 8004a4c:	0030      	movs	r0, r6
 8004a4e:	0039      	movs	r1, r7
 8004a50:	f7fb fbea 	bl	8000228 <__aeabi_uidivmod>
 8004a54:	9b04      	ldr	r3, [sp, #16]
 8004a56:	3d01      	subs	r5, #1
 8004a58:	5c5b      	ldrb	r3, [r3, r1]
 8004a5a:	702b      	strb	r3, [r5, #0]
 8004a5c:	0033      	movs	r3, r6
 8004a5e:	0006      	movs	r6, r0
 8004a60:	429f      	cmp	r7, r3
 8004a62:	d9f3      	bls.n	8004a4c <_printf_i+0xf0>
 8004a64:	2f08      	cmp	r7, #8
 8004a66:	d109      	bne.n	8004a7c <_printf_i+0x120>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	07db      	lsls	r3, r3, #31
 8004a6c:	d506      	bpl.n	8004a7c <_printf_i+0x120>
 8004a6e:	6862      	ldr	r2, [r4, #4]
 8004a70:	6923      	ldr	r3, [r4, #16]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	dc02      	bgt.n	8004a7c <_printf_i+0x120>
 8004a76:	2330      	movs	r3, #48	@ 0x30
 8004a78:	3d01      	subs	r5, #1
 8004a7a:	702b      	strb	r3, [r5, #0]
 8004a7c:	9b03      	ldr	r3, [sp, #12]
 8004a7e:	1b5b      	subs	r3, r3, r5
 8004a80:	6123      	str	r3, [r4, #16]
 8004a82:	9b07      	ldr	r3, [sp, #28]
 8004a84:	0021      	movs	r1, r4
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	9805      	ldr	r0, [sp, #20]
 8004a8a:	9b06      	ldr	r3, [sp, #24]
 8004a8c:	aa09      	add	r2, sp, #36	@ 0x24
 8004a8e:	f7ff fef5 	bl	800487c <_printf_common>
 8004a92:	3001      	adds	r0, #1
 8004a94:	d148      	bne.n	8004b28 <_printf_i+0x1cc>
 8004a96:	2001      	movs	r0, #1
 8004a98:	4240      	negs	r0, r0
 8004a9a:	b00b      	add	sp, #44	@ 0x2c
 8004a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	6809      	ldr	r1, [r1, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	6022      	str	r2, [r4, #0]
 8004aa6:	2278      	movs	r2, #120	@ 0x78
 8004aa8:	4932      	ldr	r1, [pc, #200]	@ (8004b74 <_printf_i+0x218>)
 8004aaa:	9104      	str	r1, [sp, #16]
 8004aac:	0021      	movs	r1, r4
 8004aae:	3145      	adds	r1, #69	@ 0x45
 8004ab0:	700a      	strb	r2, [r1, #0]
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	c940      	ldmia	r1!, {r6}
 8004ab8:	0610      	lsls	r0, r2, #24
 8004aba:	d402      	bmi.n	8004ac2 <_printf_i+0x166>
 8004abc:	0650      	lsls	r0, r2, #25
 8004abe:	d500      	bpl.n	8004ac2 <_printf_i+0x166>
 8004ac0:	b2b6      	uxth	r6, r6
 8004ac2:	6019      	str	r1, [r3, #0]
 8004ac4:	07d3      	lsls	r3, r2, #31
 8004ac6:	d502      	bpl.n	8004ace <_printf_i+0x172>
 8004ac8:	2320      	movs	r3, #32
 8004aca:	4313      	orrs	r3, r2
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	2e00      	cmp	r6, #0
 8004ad0:	d001      	beq.n	8004ad6 <_printf_i+0x17a>
 8004ad2:	2710      	movs	r7, #16
 8004ad4:	e7a8      	b.n	8004a28 <_printf_i+0xcc>
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	4393      	bics	r3, r2
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	e7f8      	b.n	8004ad2 <_printf_i+0x176>
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	680d      	ldr	r5, [r1, #0]
 8004ae4:	1d10      	adds	r0, r2, #4
 8004ae6:	6949      	ldr	r1, [r1, #20]
 8004ae8:	6018      	str	r0, [r3, #0]
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	062e      	lsls	r6, r5, #24
 8004aee:	d501      	bpl.n	8004af4 <_printf_i+0x198>
 8004af0:	6019      	str	r1, [r3, #0]
 8004af2:	e002      	b.n	8004afa <_printf_i+0x19e>
 8004af4:	066d      	lsls	r5, r5, #25
 8004af6:	d5fb      	bpl.n	8004af0 <_printf_i+0x194>
 8004af8:	8019      	strh	r1, [r3, #0]
 8004afa:	2300      	movs	r3, #0
 8004afc:	9d03      	ldr	r5, [sp, #12]
 8004afe:	6123      	str	r3, [r4, #16]
 8004b00:	e7bf      	b.n	8004a82 <_printf_i+0x126>
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	1d11      	adds	r1, r2, #4
 8004b06:	6019      	str	r1, [r3, #0]
 8004b08:	6815      	ldr	r5, [r2, #0]
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	0028      	movs	r0, r5
 8004b0e:	6862      	ldr	r2, [r4, #4]
 8004b10:	f000 f986 	bl	8004e20 <memchr>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d001      	beq.n	8004b1c <_printf_i+0x1c0>
 8004b18:	1b40      	subs	r0, r0, r5
 8004b1a:	6060      	str	r0, [r4, #4]
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	2300      	movs	r3, #0
 8004b22:	9a03      	ldr	r2, [sp, #12]
 8004b24:	7013      	strb	r3, [r2, #0]
 8004b26:	e7ac      	b.n	8004a82 <_printf_i+0x126>
 8004b28:	002a      	movs	r2, r5
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	9906      	ldr	r1, [sp, #24]
 8004b2e:	9805      	ldr	r0, [sp, #20]
 8004b30:	9d07      	ldr	r5, [sp, #28]
 8004b32:	47a8      	blx	r5
 8004b34:	3001      	adds	r0, #1
 8004b36:	d0ae      	beq.n	8004a96 <_printf_i+0x13a>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	079b      	lsls	r3, r3, #30
 8004b3c:	d415      	bmi.n	8004b6a <_printf_i+0x20e>
 8004b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b40:	68e0      	ldr	r0, [r4, #12]
 8004b42:	4298      	cmp	r0, r3
 8004b44:	daa9      	bge.n	8004a9a <_printf_i+0x13e>
 8004b46:	0018      	movs	r0, r3
 8004b48:	e7a7      	b.n	8004a9a <_printf_i+0x13e>
 8004b4a:	0022      	movs	r2, r4
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	9906      	ldr	r1, [sp, #24]
 8004b50:	9805      	ldr	r0, [sp, #20]
 8004b52:	9e07      	ldr	r6, [sp, #28]
 8004b54:	3219      	adds	r2, #25
 8004b56:	47b0      	blx	r6
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d09c      	beq.n	8004a96 <_printf_i+0x13a>
 8004b5c:	3501      	adds	r5, #1
 8004b5e:	68e3      	ldr	r3, [r4, #12]
 8004b60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	42ab      	cmp	r3, r5
 8004b66:	dcf0      	bgt.n	8004b4a <_printf_i+0x1ee>
 8004b68:	e7e9      	b.n	8004b3e <_printf_i+0x1e2>
 8004b6a:	2500      	movs	r5, #0
 8004b6c:	e7f7      	b.n	8004b5e <_printf_i+0x202>
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	08004f39 	.word	0x08004f39
 8004b74:	08004f4a 	.word	0x08004f4a

08004b78 <__sflush_r>:
 8004b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b7a:	220c      	movs	r2, #12
 8004b7c:	5e8b      	ldrsh	r3, [r1, r2]
 8004b7e:	0005      	movs	r5, r0
 8004b80:	000c      	movs	r4, r1
 8004b82:	071a      	lsls	r2, r3, #28
 8004b84:	d456      	bmi.n	8004c34 <__sflush_r+0xbc>
 8004b86:	684a      	ldr	r2, [r1, #4]
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	dc02      	bgt.n	8004b92 <__sflush_r+0x1a>
 8004b8c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004b8e:	2a00      	cmp	r2, #0
 8004b90:	dd4e      	ble.n	8004c30 <__sflush_r+0xb8>
 8004b92:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004b94:	2f00      	cmp	r7, #0
 8004b96:	d04b      	beq.n	8004c30 <__sflush_r+0xb8>
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2080      	movs	r0, #128	@ 0x80
 8004b9c:	682e      	ldr	r6, [r5, #0]
 8004b9e:	602a      	str	r2, [r5, #0]
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	0140      	lsls	r0, r0, #5
 8004ba4:	6a21      	ldr	r1, [r4, #32]
 8004ba6:	4002      	ands	r2, r0
 8004ba8:	4203      	tst	r3, r0
 8004baa:	d033      	beq.n	8004c14 <__sflush_r+0x9c>
 8004bac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	075b      	lsls	r3, r3, #29
 8004bb2:	d506      	bpl.n	8004bc2 <__sflush_r+0x4a>
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	1ad2      	subs	r2, r2, r3
 8004bb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <__sflush_r+0x4a>
 8004bbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bc0:	1ad2      	subs	r2, r2, r3
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	0028      	movs	r0, r5
 8004bc6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004bc8:	6a21      	ldr	r1, [r4, #32]
 8004bca:	47b8      	blx	r7
 8004bcc:	89a2      	ldrh	r2, [r4, #12]
 8004bce:	1c43      	adds	r3, r0, #1
 8004bd0:	d106      	bne.n	8004be0 <__sflush_r+0x68>
 8004bd2:	6829      	ldr	r1, [r5, #0]
 8004bd4:	291d      	cmp	r1, #29
 8004bd6:	d846      	bhi.n	8004c66 <__sflush_r+0xee>
 8004bd8:	4b29      	ldr	r3, [pc, #164]	@ (8004c80 <__sflush_r+0x108>)
 8004bda:	410b      	asrs	r3, r1
 8004bdc:	07db      	lsls	r3, r3, #31
 8004bde:	d442      	bmi.n	8004c66 <__sflush_r+0xee>
 8004be0:	2300      	movs	r3, #0
 8004be2:	6063      	str	r3, [r4, #4]
 8004be4:	6923      	ldr	r3, [r4, #16]
 8004be6:	6023      	str	r3, [r4, #0]
 8004be8:	04d2      	lsls	r2, r2, #19
 8004bea:	d505      	bpl.n	8004bf8 <__sflush_r+0x80>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <__sflush_r+0x7e>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d100      	bne.n	8004bf8 <__sflush_r+0x80>
 8004bf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bfa:	602e      	str	r6, [r5, #0]
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	d017      	beq.n	8004c30 <__sflush_r+0xb8>
 8004c00:	0023      	movs	r3, r4
 8004c02:	3344      	adds	r3, #68	@ 0x44
 8004c04:	4299      	cmp	r1, r3
 8004c06:	d002      	beq.n	8004c0e <__sflush_r+0x96>
 8004c08:	0028      	movs	r0, r5
 8004c0a:	f7ff fbf7 	bl	80043fc <_free_r>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c12:	e00d      	b.n	8004c30 <__sflush_r+0xb8>
 8004c14:	2301      	movs	r3, #1
 8004c16:	0028      	movs	r0, r5
 8004c18:	47b8      	blx	r7
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d1c6      	bne.n	8004bae <__sflush_r+0x36>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0c3      	beq.n	8004bae <__sflush_r+0x36>
 8004c26:	2b1d      	cmp	r3, #29
 8004c28:	d001      	beq.n	8004c2e <__sflush_r+0xb6>
 8004c2a:	2b16      	cmp	r3, #22
 8004c2c:	d11a      	bne.n	8004c64 <__sflush_r+0xec>
 8004c2e:	602e      	str	r6, [r5, #0]
 8004c30:	2000      	movs	r0, #0
 8004c32:	e01e      	b.n	8004c72 <__sflush_r+0xfa>
 8004c34:	690e      	ldr	r6, [r1, #16]
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	d0fa      	beq.n	8004c30 <__sflush_r+0xb8>
 8004c3a:	680f      	ldr	r7, [r1, #0]
 8004c3c:	600e      	str	r6, [r1, #0]
 8004c3e:	1bba      	subs	r2, r7, r6
 8004c40:	9201      	str	r2, [sp, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	079b      	lsls	r3, r3, #30
 8004c46:	d100      	bne.n	8004c4a <__sflush_r+0xd2>
 8004c48:	694a      	ldr	r2, [r1, #20]
 8004c4a:	60a2      	str	r2, [r4, #8]
 8004c4c:	9b01      	ldr	r3, [sp, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	ddee      	ble.n	8004c30 <__sflush_r+0xb8>
 8004c52:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004c54:	0032      	movs	r2, r6
 8004c56:	001f      	movs	r7, r3
 8004c58:	0028      	movs	r0, r5
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	6a21      	ldr	r1, [r4, #32]
 8004c5e:	47b8      	blx	r7
 8004c60:	2800      	cmp	r0, #0
 8004c62:	dc07      	bgt.n	8004c74 <__sflush_r+0xfc>
 8004c64:	89a2      	ldrh	r2, [r4, #12]
 8004c66:	2340      	movs	r3, #64	@ 0x40
 8004c68:	2001      	movs	r0, #1
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	b21b      	sxth	r3, r3
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	4240      	negs	r0, r0
 8004c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c74:	9b01      	ldr	r3, [sp, #4]
 8004c76:	1836      	adds	r6, r6, r0
 8004c78:	1a1b      	subs	r3, r3, r0
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	e7e6      	b.n	8004c4c <__sflush_r+0xd4>
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	dfbffffe 	.word	0xdfbffffe

08004c84 <_fflush_r>:
 8004c84:	690b      	ldr	r3, [r1, #16]
 8004c86:	b570      	push	{r4, r5, r6, lr}
 8004c88:	0005      	movs	r5, r0
 8004c8a:	000c      	movs	r4, r1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <_fflush_r+0x12>
 8004c90:	2500      	movs	r5, #0
 8004c92:	0028      	movs	r0, r5
 8004c94:	bd70      	pop	{r4, r5, r6, pc}
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d004      	beq.n	8004ca4 <_fflush_r+0x20>
 8004c9a:	6a03      	ldr	r3, [r0, #32]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <_fflush_r+0x20>
 8004ca0:	f7ff f998 	bl	8003fd4 <__sinit>
 8004ca4:	220c      	movs	r2, #12
 8004ca6:	5ea3      	ldrsh	r3, [r4, r2]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f1      	beq.n	8004c90 <_fflush_r+0xc>
 8004cac:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cae:	07d2      	lsls	r2, r2, #31
 8004cb0:	d404      	bmi.n	8004cbc <_fflush_r+0x38>
 8004cb2:	059b      	lsls	r3, r3, #22
 8004cb4:	d402      	bmi.n	8004cbc <_fflush_r+0x38>
 8004cb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cb8:	f7ff fb9d 	bl	80043f6 <__retarget_lock_acquire_recursive>
 8004cbc:	0028      	movs	r0, r5
 8004cbe:	0021      	movs	r1, r4
 8004cc0:	f7ff ff5a 	bl	8004b78 <__sflush_r>
 8004cc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cc6:	0005      	movs	r5, r0
 8004cc8:	07db      	lsls	r3, r3, #31
 8004cca:	d4e2      	bmi.n	8004c92 <_fflush_r+0xe>
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	059b      	lsls	r3, r3, #22
 8004cd0:	d4df      	bmi.n	8004c92 <_fflush_r+0xe>
 8004cd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cd4:	f7ff fb90 	bl	80043f8 <__retarget_lock_release_recursive>
 8004cd8:	e7db      	b.n	8004c92 <_fflush_r+0xe>
	...

08004cdc <__swhatbuf_r>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	000e      	movs	r6, r1
 8004ce0:	001d      	movs	r5, r3
 8004ce2:	230e      	movs	r3, #14
 8004ce4:	5ec9      	ldrsh	r1, [r1, r3]
 8004ce6:	0014      	movs	r4, r2
 8004ce8:	b096      	sub	sp, #88	@ 0x58
 8004cea:	2900      	cmp	r1, #0
 8004cec:	da0c      	bge.n	8004d08 <__swhatbuf_r+0x2c>
 8004cee:	89b2      	ldrh	r2, [r6, #12]
 8004cf0:	2380      	movs	r3, #128	@ 0x80
 8004cf2:	0011      	movs	r1, r2
 8004cf4:	4019      	ands	r1, r3
 8004cf6:	421a      	tst	r2, r3
 8004cf8:	d114      	bne.n	8004d24 <__swhatbuf_r+0x48>
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	2000      	movs	r0, #0
 8004d00:	6029      	str	r1, [r5, #0]
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	b016      	add	sp, #88	@ 0x58
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	466a      	mov	r2, sp
 8004d0a:	f000 f853 	bl	8004db4 <_fstat_r>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	dbed      	blt.n	8004cee <__swhatbuf_r+0x12>
 8004d12:	23f0      	movs	r3, #240	@ 0xf0
 8004d14:	9901      	ldr	r1, [sp, #4]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	4019      	ands	r1, r3
 8004d1a:	4b04      	ldr	r3, [pc, #16]	@ (8004d2c <__swhatbuf_r+0x50>)
 8004d1c:	18c9      	adds	r1, r1, r3
 8004d1e:	424b      	negs	r3, r1
 8004d20:	4159      	adcs	r1, r3
 8004d22:	e7ea      	b.n	8004cfa <__swhatbuf_r+0x1e>
 8004d24:	2100      	movs	r1, #0
 8004d26:	2340      	movs	r3, #64	@ 0x40
 8004d28:	e7e9      	b.n	8004cfe <__swhatbuf_r+0x22>
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	ffffe000 	.word	0xffffe000

08004d30 <__smakebuf_r>:
 8004d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d32:	2602      	movs	r6, #2
 8004d34:	898b      	ldrh	r3, [r1, #12]
 8004d36:	0005      	movs	r5, r0
 8004d38:	000c      	movs	r4, r1
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	4233      	tst	r3, r6
 8004d3e:	d007      	beq.n	8004d50 <__smakebuf_r+0x20>
 8004d40:	0023      	movs	r3, r4
 8004d42:	3347      	adds	r3, #71	@ 0x47
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	6123      	str	r3, [r4, #16]
 8004d48:	2301      	movs	r3, #1
 8004d4a:	6163      	str	r3, [r4, #20]
 8004d4c:	b005      	add	sp, #20
 8004d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d50:	ab03      	add	r3, sp, #12
 8004d52:	aa02      	add	r2, sp, #8
 8004d54:	f7ff ffc2 	bl	8004cdc <__swhatbuf_r>
 8004d58:	9f02      	ldr	r7, [sp, #8]
 8004d5a:	9001      	str	r0, [sp, #4]
 8004d5c:	0039      	movs	r1, r7
 8004d5e:	0028      	movs	r0, r5
 8004d60:	f7ff fbb8 	bl	80044d4 <_malloc_r>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d108      	bne.n	8004d7a <__smakebuf_r+0x4a>
 8004d68:	220c      	movs	r2, #12
 8004d6a:	5ea3      	ldrsh	r3, [r4, r2]
 8004d6c:	059a      	lsls	r2, r3, #22
 8004d6e:	d4ed      	bmi.n	8004d4c <__smakebuf_r+0x1c>
 8004d70:	2203      	movs	r2, #3
 8004d72:	4393      	bics	r3, r2
 8004d74:	431e      	orrs	r6, r3
 8004d76:	81a6      	strh	r6, [r4, #12]
 8004d78:	e7e2      	b.n	8004d40 <__smakebuf_r+0x10>
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	89a2      	ldrh	r2, [r4, #12]
 8004d7e:	6020      	str	r0, [r4, #0]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	81a3      	strh	r3, [r4, #12]
 8004d84:	9b03      	ldr	r3, [sp, #12]
 8004d86:	6120      	str	r0, [r4, #16]
 8004d88:	6167      	str	r7, [r4, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00c      	beq.n	8004da8 <__smakebuf_r+0x78>
 8004d8e:	0028      	movs	r0, r5
 8004d90:	230e      	movs	r3, #14
 8004d92:	5ee1      	ldrsh	r1, [r4, r3]
 8004d94:	f000 f820 	bl	8004dd8 <_isatty_r>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d005      	beq.n	8004da8 <__smakebuf_r+0x78>
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	89a2      	ldrh	r2, [r4, #12]
 8004da0:	439a      	bics	r2, r3
 8004da2:	3b02      	subs	r3, #2
 8004da4:	4313      	orrs	r3, r2
 8004da6:	81a3      	strh	r3, [r4, #12]
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	9a01      	ldr	r2, [sp, #4]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	e7cc      	b.n	8004d4c <__smakebuf_r+0x1c>
	...

08004db4 <_fstat_r>:
 8004db4:	2300      	movs	r3, #0
 8004db6:	b570      	push	{r4, r5, r6, lr}
 8004db8:	4d06      	ldr	r5, [pc, #24]	@ (8004dd4 <_fstat_r+0x20>)
 8004dba:	0004      	movs	r4, r0
 8004dbc:	0008      	movs	r0, r1
 8004dbe:	0011      	movs	r1, r2
 8004dc0:	602b      	str	r3, [r5, #0]
 8004dc2:	f7fb fe9a 	bl	8000afa <_fstat>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	d103      	bne.n	8004dd2 <_fstat_r+0x1e>
 8004dca:	682b      	ldr	r3, [r5, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d000      	beq.n	8004dd2 <_fstat_r+0x1e>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	200002e8 	.word	0x200002e8

08004dd8 <_isatty_r>:
 8004dd8:	2300      	movs	r3, #0
 8004dda:	b570      	push	{r4, r5, r6, lr}
 8004ddc:	4d06      	ldr	r5, [pc, #24]	@ (8004df8 <_isatty_r+0x20>)
 8004dde:	0004      	movs	r4, r0
 8004de0:	0008      	movs	r0, r1
 8004de2:	602b      	str	r3, [r5, #0]
 8004de4:	f7fb fe97 	bl	8000b16 <_isatty>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d103      	bne.n	8004df4 <_isatty_r+0x1c>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d000      	beq.n	8004df4 <_isatty_r+0x1c>
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	bd70      	pop	{r4, r5, r6, pc}
 8004df6:	46c0      	nop			@ (mov r8, r8)
 8004df8:	200002e8 	.word	0x200002e8

08004dfc <_sbrk_r>:
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	b570      	push	{r4, r5, r6, lr}
 8004e00:	4d06      	ldr	r5, [pc, #24]	@ (8004e1c <_sbrk_r+0x20>)
 8004e02:	0004      	movs	r4, r0
 8004e04:	0008      	movs	r0, r1
 8004e06:	602b      	str	r3, [r5, #0]
 8004e08:	f7fb fe9a 	bl	8000b40 <_sbrk>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d103      	bne.n	8004e18 <_sbrk_r+0x1c>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d000      	beq.n	8004e18 <_sbrk_r+0x1c>
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	bd70      	pop	{r4, r5, r6, pc}
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	200002e8 	.word	0x200002e8

08004e20 <memchr>:
 8004e20:	b2c9      	uxtb	r1, r1
 8004e22:	1882      	adds	r2, r0, r2
 8004e24:	4290      	cmp	r0, r2
 8004e26:	d101      	bne.n	8004e2c <memchr+0xc>
 8004e28:	2000      	movs	r0, #0
 8004e2a:	4770      	bx	lr
 8004e2c:	7803      	ldrb	r3, [r0, #0]
 8004e2e:	428b      	cmp	r3, r1
 8004e30:	d0fb      	beq.n	8004e2a <memchr+0xa>
 8004e32:	3001      	adds	r0, #1
 8004e34:	e7f6      	b.n	8004e24 <memchr+0x4>
	...

08004e38 <_init>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr

08004e44 <_fini>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	46c0      	nop			@ (mov r8, r8)
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr
