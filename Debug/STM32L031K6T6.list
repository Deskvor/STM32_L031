
STM32L031K6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d4c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef4  08004ef4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef4  08004ef4  00005ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004efc  08004efc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004f04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  08004f6c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004f6c  000062f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3d4  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b5  00000000  00000000  00015464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00017720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2c  00000000  00000000  00018570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d55  00000000  00000000  0001909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b7a  00000000  00000000  0002bdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000709a1  00000000  00000000  0003d96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae30c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b60  00000000  00000000  000ae350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b1eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004df4 	.word	0x08004df4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004df4 	.word	0x08004df4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <__io_putchar+0x20>)
 80004c6:	1d39      	adds	r1, r7, #4
 80004c8:	4805      	ldr	r0, [pc, #20]	@ (80004e0 <__io_putchar+0x24>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	f002 ffbc 	bl	8003448 <HAL_UART_Transmit>

	return ch;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	0018      	movs	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	0000ffff 	.word	0x0000ffff
 80004e0:	20000118 	.word	0x20000118

080004e4 <HAL_TIM_PeriodElapsedCallback>:

// Task 3 (LED Blinky (timer))
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	2380      	movs	r3, #128	@ 0x80
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d104      	bne.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004f8:	4b04      	ldr	r3, [pc, #16]	@ (800050c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004fa:	2110      	movs	r1, #16
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fece 	bl	800129e <HAL_GPIO_TogglePin>
	}
}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	50000400 	.word	0x50000400

08000510 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000514:	f000 fbea 	bl	8000cec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000518:	f000 f830 	bl	800057c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051c:	f000 f962 	bl	80007e4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000520:	f000 f930 	bl	8000784 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000524:	f000 f8d8 	bl	80006d8 <MX_TIM2_Init>
	MX_I2C1_Init();
 8000528:	f000 f896 	bl	8000658 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2); // Handle TIM2 interrupt and clear interrupt flags (Task 3)
 800052c:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <main+0x58>)
 800052e:	0018      	movs	r0, r3
 8000530:	f002 fbc8 	bl	8002cc4 <HAL_TIM_Base_Start_IT>

	VEML6030_Init(&hi2c1);
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <main+0x5c>)
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fb21 	bl	8000b7e <VEML6030_Init>

	printf("HAL init complete \n");
 800053c:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <main+0x60>)
 800053e:	0018      	movs	r0, r3
 8000540:	f003 fdc0 	bl	80040c4 <puts>
		/* Task 2 (LED Blinking)
		 printf("Hello from infinite loop \n");
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		 HAL_Delay(1000);
		 */
		ambient_light = VEML6030_ReadALS(&hi2c1);
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <main+0x5c>)
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fb2c 	bl	8000ba4 <VEML6030_ReadALS>
 800054c:	0003      	movs	r3, r0
 800054e:	001a      	movs	r2, r3
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <main+0x64>)
 8000552:	801a      	strh	r2, [r3, #0]
		printf("Ambient Light Level: %u\n", ambient_light);
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <main+0x64>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	001a      	movs	r2, r3
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <main+0x68>)
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f003 fd4a 	bl	8003ff8 <iprintf>
		ambient_light = VEML6030_ReadALS(&hi2c1);
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	e7ed      	b.n	8000544 <main+0x34>
 8000568:	200000d8 	.word	0x200000d8
 800056c:	20000084 	.word	0x20000084
 8000570:	08004e0c 	.word	0x08004e0c
 8000574:	200001a0 	.word	0x200001a0
 8000578:	08004e20 	.word	0x08004e20

0800057c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b099      	sub	sp, #100	@ 0x64
 8000580:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000582:	242c      	movs	r4, #44	@ 0x2c
 8000584:	193b      	adds	r3, r7, r4
 8000586:	0018      	movs	r0, r3
 8000588:	2334      	movs	r3, #52	@ 0x34
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f003 fe8f 	bl	80042b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000592:	2318      	movs	r3, #24
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	0018      	movs	r0, r3
 8000598:	2314      	movs	r3, #20
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f003 fe87 	bl	80042b0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005a2:	003b      	movs	r3, r7
 80005a4:	0018      	movs	r0, r3
 80005a6:	2318      	movs	r3, #24
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f003 fe80 	bl	80042b0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a27      	ldr	r2, [pc, #156]	@ (8000654 <SystemClock_Config+0xd8>)
 80005b6:	401a      	ands	r2, r3
 80005b8:	4b25      	ldr	r3, [pc, #148]	@ (8000650 <SystemClock_Config+0xd4>)
 80005ba:	2180      	movs	r1, #128	@ 0x80
 80005bc:	0109      	lsls	r1, r1, #4
 80005be:	430a      	orrs	r2, r1
 80005c0:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2210      	movs	r2, #16
 80005c8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	22a0      	movs	r2, #160	@ 0xa0
 80005da:	0212      	lsls	r2, r2, #8
 80005dc:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fc60 	bl	8001eac <HAL_RCC_OscConfig>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x78>
		Error_Handler();
 80005f0:	f000 f93c 	bl	800086c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005f4:	2118      	movs	r1, #24
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	220f      	movs	r2, #15
 80005fa:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2100      	movs	r1, #0
 8000618:	0018      	movs	r0, r3
 800061a:	f001 ffc3 	bl	80025a4 <HAL_RCC_ClockConfig>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xaa>
		Error_Handler();
 8000622:	f000 f923 	bl	800086c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8000626:	003b      	movs	r3, r7
 8000628:	220a      	movs	r2, #10
 800062a:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800062c:	003b      	movs	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000632:	003b      	movs	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000638:	003b      	movs	r3, r7
 800063a:	0018      	movs	r0, r3
 800063c:	f002 f9d6 	bl	80029ec <HAL_RCCEx_PeriphCLKConfig>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xcc>
		Error_Handler();
 8000644:	f000 f912 	bl	800086c <Error_Handler>
	}
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b019      	add	sp, #100	@ 0x64
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	40007000 	.word	0x40007000
 8000654:	ffffe7ff 	.word	0xffffe7ff

08000658 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800065c:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <MX_I2C1_Init+0x78>)
 800065e:	4a1d      	ldr	r2, [pc, #116]	@ (80006d4 <MX_I2C1_Init+0x7c>)
 8000660:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000608;
 8000662:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000664:	22c1      	movs	r2, #193	@ 0xc1
 8000666:	00d2      	lsls	r2, r2, #3
 8000668:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <MX_I2C1_Init+0x78>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000672:	2201      	movs	r2, #1
 8000674:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000676:	4b16      	ldr	r3, [pc, #88]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800067c:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_I2C1_Init+0x78>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_I2C1_Init+0x78>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000694:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fe1c 	bl	80012d4 <HAL_I2C_Init>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80006a0:	f000 f8e4 	bl	800086c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80006a4:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <MX_I2C1_Init+0x78>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fb67 	bl	8001d7c <HAL_I2CEx_ConfigAnalogFilter>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80006b2:	f000 f8db 	bl	800086c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_I2C1_Init+0x78>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 fbaa 	bl	8001e14 <HAL_I2CEx_ConfigDigitalFilter>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x70>
		Error_Handler();
 80006c4:	f000 f8d2 	bl	800086c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006c8:	46c0      	nop			@ (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	20000084 	.word	0x20000084
 80006d4:	40005400 	.word	0x40005400

080006d8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006de:	2308      	movs	r3, #8
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	0018      	movs	r0, r3
 80006e4:	2310      	movs	r3, #16
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f003 fde1 	bl	80042b0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006ee:	003b      	movs	r3, r7
 80006f0:	0018      	movs	r0, r3
 80006f2:	2308      	movs	r3, #8
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f003 fdda 	bl	80042b0 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_TIM2_Init+0xa4>)
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	05d2      	lsls	r2, r2, #23
 8000702:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 2096;
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000706:	2283      	movs	r2, #131	@ 0x83
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <MX_TIM2_Init+0xa4>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000714:	4a1a      	ldr	r2, [pc, #104]	@ (8000780 <MX_TIM2_Init+0xa8>)
 8000716:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_TIM2_Init+0xa4>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000726:	0018      	movs	r0, r3
 8000728:	f002 fa8c 	bl	8002c44 <HAL_TIM_Base_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x5c>
		Error_Handler();
 8000730:	f000 f89c 	bl	800086c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000734:	2108      	movs	r1, #8
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2280      	movs	r2, #128	@ 0x80
 800073a:	0152      	lsls	r2, r2, #5
 800073c:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800073e:	187a      	adds	r2, r7, r1
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f002 fbf1 	bl	8002f2c <HAL_TIM_ConfigClockSource>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x7a>
		Error_Handler();
 800074e:	f000 f88d 	bl	800086c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	003b      	movs	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	003b      	movs	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800075e:	003a      	movs	r2, r7
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f002 fdc3 	bl	80032f0 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800076e:	f000 f87d 	bl	800086c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b006      	add	sp, #24
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	200000d8 	.word	0x200000d8
 8000780:	000003e7 	.word	0x000003e7

08000784 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	@ (80007e0 <MX_USART2_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 8000790:	22e1      	movs	r2, #225	@ 0xe1
 8000792:	0252      	lsls	r2, r2, #9
 8000794:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007c6:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f002 fde9 	bl	80033a0 <HAL_UART_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80007d2:	f000 f84b 	bl	800086c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000118 	.word	0x20000118
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b089      	sub	sp, #36	@ 0x24
 80007e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007ea:	240c      	movs	r4, #12
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	0018      	movs	r0, r3
 80007f0:	2314      	movs	r3, #20
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f003 fd5b 	bl	80042b0 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_GPIO_Init+0x80>)
 80007fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_GPIO_Init+0x80>)
 8000800:	2101      	movs	r1, #1
 8000802:	430a      	orrs	r2, r1
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_GPIO_Init+0x80>)
 8000808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800080a:	2201      	movs	r2, #1
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_GPIO_Init+0x80>)
 8000814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000816:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <MX_GPIO_Init+0x80>)
 8000818:	2102      	movs	r1, #2
 800081a:	430a      	orrs	r2, r1
 800081c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_GPIO_Init+0x80>)
 8000820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000822:	2202      	movs	r2, #2
 8000824:	4013      	ands	r3, r2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LED_Pin, GPIO_PIN_RESET);
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_GPIO_Init+0x84>)
 800082c:	2200      	movs	r2, #0
 800082e:	2118      	movs	r1, #24
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fd17 	bl	8001264 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LD3_Pin LED_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LED_Pin;
 8000836:	0021      	movs	r1, r4
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2218      	movs	r2, #24
 800083c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2201      	movs	r2, #1
 8000842:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	187b      	adds	r3, r7, r1
 8000852:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <MX_GPIO_Init+0x84>)
 8000854:	0019      	movs	r1, r3
 8000856:	0010      	movs	r0, r2
 8000858:	f000 fb96 	bl	8000f88 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b009      	add	sp, #36	@ 0x24
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	40021000 	.word	0x40021000
 8000868:	50000400 	.word	0x50000400

0800086c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	e7fd      	b.n	8000874 <Error_Handler+0x8>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <HAL_MspInit+0x24>)
 800087e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x24>)
 8000882:	2101      	movs	r1, #1
 8000884:	430a      	orrs	r2, r1
 8000886:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <HAL_MspInit+0x24>)
 800088a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800088c:	4b03      	ldr	r3, [pc, #12]	@ (800089c <HAL_MspInit+0x24>)
 800088e:	2180      	movs	r1, #128	@ 0x80
 8000890:	0549      	lsls	r1, r1, #21
 8000892:	430a      	orrs	r2, r1
 8000894:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b089      	sub	sp, #36	@ 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	240c      	movs	r4, #12
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f003 fcfc 	bl	80042b0 <memset>
  if(hi2c->Instance==I2C1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a17      	ldr	r2, [pc, #92]	@ (800091c <HAL_I2C_MspInit+0x7c>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d128      	bne.n	8000914 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <HAL_I2C_MspInit+0x80>)
 80008c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <HAL_I2C_MspInit+0x80>)
 80008c8:	2102      	movs	r1, #2
 80008ca:	430a      	orrs	r2, r1
 80008cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <HAL_I2C_MspInit+0x80>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d2:	2202      	movs	r2, #2
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008da:	0021      	movs	r1, r4
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	22c0      	movs	r2, #192	@ 0xc0
 80008e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2212      	movs	r2, #18
 80008e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2203      	movs	r2, #3
 80008f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2201      	movs	r2, #1
 80008f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <HAL_I2C_MspInit+0x84>)
 80008fe:	0019      	movs	r1, r3
 8000900:	0010      	movs	r0, r2
 8000902:	f000 fb41 	bl	8000f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_I2C_MspInit+0x80>)
 8000908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800090a:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <HAL_I2C_MspInit+0x80>)
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	0389      	lsls	r1, r1, #14
 8000910:	430a      	orrs	r2, r1
 8000912:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b009      	add	sp, #36	@ 0x24
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	40005400 	.word	0x40005400
 8000920:	40021000 	.word	0x40021000
 8000924:	50000400 	.word	0x50000400

08000928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	429a      	cmp	r2, r3
 800093a:	d10d      	bne.n	8000958 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_TIM_Base_MspInit+0x38>)
 800093e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <HAL_TIM_Base_MspInit+0x38>)
 8000942:	2101      	movs	r1, #1
 8000944:	430a      	orrs	r2, r1
 8000946:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	200f      	movs	r0, #15
 800094e:	f000 fae9 	bl	8000f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000952:	200f      	movs	r0, #15
 8000954:	f000 fafb 	bl	8000f4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b089      	sub	sp, #36	@ 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	240c      	movs	r4, #12
 800096e:	193b      	adds	r3, r7, r4
 8000970:	0018      	movs	r0, r3
 8000972:	2314      	movs	r3, #20
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f003 fc9a 	bl	80042b0 <memset>
  if(huart->Instance==USART2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <HAL_UART_MspInit+0x80>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d129      	bne.n	80009da <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <HAL_UART_MspInit+0x84>)
 8000988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <HAL_UART_MspInit+0x84>)
 800098c:	2180      	movs	r1, #128	@ 0x80
 800098e:	0289      	lsls	r1, r1, #10
 8000990:	430a      	orrs	r2, r1
 8000992:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <HAL_UART_MspInit+0x84>)
 8000996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <HAL_UART_MspInit+0x84>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <HAL_UART_MspInit+0x84>)
 80009a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a4:	2201      	movs	r2, #1
 80009a6:	4013      	ands	r3, r2
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80009ac:	0021      	movs	r1, r4
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	4a0e      	ldr	r2, [pc, #56]	@ (80009ec <HAL_UART_MspInit+0x88>)
 80009b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2202      	movs	r2, #2
 80009b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2203      	movs	r2, #3
 80009c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2204      	movs	r2, #4
 80009ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	187a      	adds	r2, r7, r1
 80009ce:	23a0      	movs	r3, #160	@ 0xa0
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fad7 	bl	8000f88 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b009      	add	sp, #36	@ 0x24
 80009e0:	bd90      	pop	{r4, r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	00008004 	.word	0x00008004

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	e7fd      	b.n	80009f4 <NMI_Handler+0x4>

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	e7fd      	b.n	80009fc <HardFault_Handler+0x4>

08000a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f9bc 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <TIM2_IRQHandler+0x14>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f002 f996 	bl	8002d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	200000d8 	.word	0x200000d8

08000a3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4e:	e000      	b.n	8000a52 <_read+0x16>
 8000a50:	bf00      	nop
 8000a52:	0001      	movs	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
  }

  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	0018      	movs	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b006      	add	sp, #24
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e009      	b.n	8000a9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fd13 	bl	80004bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf1      	blt.n	8000a88 <_write+0x12>
  }
  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b006      	add	sp, #24
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_close>:

int _close(int file)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	425b      	negs	r3, r3
}
 8000aba:	0018      	movs	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	0192      	lsls	r2, r2, #6
 8000ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	0018      	movs	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b004      	add	sp, #16
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	18d3      	adds	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f003 fc10 	bl	800435c <__errno>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	425b      	negs	r3, r3
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	18d2      	adds	r2, r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <_sbrk+0x64>)
 8000b58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b006      	add	sp, #24
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20002000 	.word	0x20002000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	200001a4 	.word	0x200001a4
 8000b70:	200002f8 	.word	0x200002f8

08000b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <VEML6030_Init>:
#include "veml6030.h"

// Function to initialize VEML6030 sensor
void VEML6030_Init(I2C_HandleTypeDef *hi2c) {
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b084      	sub	sp, #16
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	// Set ALS Configuration: Gain x1, Integration time 100ms, No interrupt
	uint16_t als_conf = 0x0000;  // Default config
 8000b86:	210e      	movs	r1, #14
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	801a      	strh	r2, [r3, #0]
	VEML6030_WriteRegister(hi2c, VEML6030_ALS_CONF, als_conf);
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	881a      	ldrh	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2100      	movs	r1, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 f812 	bl	8000bc0 <VEML6030_WriteRegister>
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b004      	add	sp, #16
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <VEML6030_ReadALS>:

// Function to read ALS (ambient light sensor) value
uint16_t VEML6030_ReadALS(I2C_HandleTypeDef *hi2c) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	return VEML6030_ReadRegister(hi2c, VEML6030_ALS_DATA);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2104      	movs	r1, #4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 f849 	bl	8000c48 <VEML6030_ReadRegister>
 8000bb6:	0003      	movs	r3, r0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <VEML6030_WriteRegister>:

// Function to write a 16-bit value to a register
void VEML6030_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg,
		uint16_t value) {
 8000bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	0008      	movs	r0, r1
 8000bca:	0011      	movs	r1, r2
 8000bcc:	1cfb      	adds	r3, r7, #3
 8000bce:	1c02      	adds	r2, r0, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	1c0a      	adds	r2, r1, #0
 8000bd6:	801a      	strh	r2, [r3, #0]

	uint8_t data[3];
	data[0] = reg;               // Register address
 8000bd8:	210c      	movs	r1, #12
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	1cfa      	adds	r2, r7, #3
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
	data[1] = value & 0xFF;      // Lower byte
 8000be2:	003b      	movs	r3, r7
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	705a      	strb	r2, [r3, #1]
	data[2] = (value >> 8) & 0xFF; // Upper byte
 8000bec:	003b      	movs	r3, r7
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(hi2c, VEML6030_I2C_ADDR << 1, data, 3, 200);
 8000bfa:	000d      	movs	r5, r1
 8000bfc:	187a      	adds	r2, r7, r1
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	23c8      	movs	r3, #200	@ 0xc8
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2303      	movs	r3, #3
 8000c06:	2120      	movs	r1, #32
 8000c08:	f000 fbfa 	bl	8001400 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c,
 8000c0c:	260f      	movs	r6, #15
 8000c0e:	19bc      	adds	r4, r7, r6
 8000c10:	197a      	adds	r2, r7, r5
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	23c8      	movs	r3, #200	@ 0xc8
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2303      	movs	r3, #3
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	f000 fbf0 	bl	8001400 <HAL_I2C_Master_Transmit>
 8000c20:	0003      	movs	r3, r0
 8000c22:	7023      	strb	r3, [r4, #0]
			VEML6030_I2C_ADDR << 1, data, 3, 200);
	if (status != HAL_OK) {
 8000c24:	19bb      	adds	r3, r7, r6
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <VEML6030_WriteRegister+0x7a>
		printf("I2C Transmit Error: %d\n", status);
 8000c2c:	19bb      	adds	r3, r7, r6
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <VEML6030_WriteRegister+0x84>)
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f003 f9df 	bl	8003ff8 <iprintf>
	}
}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b005      	add	sp, #20
 8000c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	08004e3c 	.word	0x08004e3c

08000c48 <VEML6030_ReadRegister>:

// Function to read a 16-bit value from a register
uint16_t VEML6030_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg) {
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	000a      	movs	r2, r1
 8000c52:	1cfb      	adds	r3, r7, #3
 8000c54:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	HAL_I2C_Master_Transmit(hi2c, VEML6030_I2C_ADDR << 1, &reg, 1, 200);
 8000c56:	1cfa      	adds	r2, r7, #3
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	23c8      	movs	r3, #200	@ 0xc8
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	2120      	movs	r1, #32
 8000c62:	f000 fbcd 	bl	8001400 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, VEML6030_I2C_ADDR << 1, data, 2, 200);
 8000c66:	240c      	movs	r4, #12
 8000c68:	193a      	adds	r2, r7, r4
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	23c8      	movs	r3, #200	@ 0xc8
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2302      	movs	r3, #2
 8000c72:	2120      	movs	r1, #32
 8000c74:	f000 fccc 	bl	8001610 <HAL_I2C_Master_Receive>
	return (uint16_t) (data[1] << 8 | data[0]);
 8000c78:	0021      	movs	r1, r4
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	785b      	ldrb	r3, [r3, #1]
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	b29b      	uxth	r3, r3
	status = HAL_I2C_Master_Receive(hi2c,
			VEML6030_I2C_ADDR << 1, data, 3, 200);
	if (status != HAL_OK) {
		printf("I2C Receive Error: %d\n", status);
	}
}
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b005      	add	sp, #20
 8000c94:	bd90      	pop	{r4, r7, pc}
	...

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c98:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c9a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c9c:	f7ff ff6a 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	@ (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 fb4f 	bl	8004368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fc21 	bl	8000510 <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
   ldr   r0, =_estack
 8000cd0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cdc:	08004f04 	.word	0x08004f04
  ldr r2, =_sbss
 8000ce0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ce4:	200002f8 	.word	0x200002f8

08000ce8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_COMP_IRQHandler>
	...

08000cec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_Init+0x3c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_Init+0x3c>)
 8000cfe:	2140      	movs	r1, #64	@ 0x40
 8000d00:	430a      	orrs	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d04:	2000      	movs	r0, #0
 8000d06:	f000 f811 	bl	8000d2c <HAL_InitTick>
 8000d0a:	1e03      	subs	r3, r0, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	e001      	b.n	8000d1a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d16:	f7ff fdaf 	bl	8000878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
}
 8000d1e:	0018      	movs	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <HAL_InitTick+0x5c>)
 8000d36:	681c      	ldr	r4, [r3, #0]
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <HAL_InitTick+0x60>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	23fa      	movs	r3, #250	@ 0xfa
 8000d40:	0098      	lsls	r0, r3, #2
 8000d42:	f7ff f9eb 	bl	800011c <__udivsi3>
 8000d46:	0003      	movs	r3, r0
 8000d48:	0019      	movs	r1, r3
 8000d4a:	0020      	movs	r0, r4
 8000d4c:	f7ff f9e6 	bl	800011c <__udivsi3>
 8000d50:	0003      	movs	r3, r0
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 f90b 	bl	8000f6e <HAL_SYSTICK_Config>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e00f      	b.n	8000d80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d80b      	bhi.n	8000d7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 f8d8 	bl	8000f24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_InitTick+0x64>)
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	0018      	movs	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b003      	add	sp, #12
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <HAL_IncTick+0x1c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_IncTick+0x20>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	18d2      	adds	r2, r2, r3
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <HAL_IncTick+0x20>)
 8000da6:	601a      	str	r2, [r3, #0]
}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	20000008 	.word	0x20000008
 8000db4:	200001a8 	.word	0x200001a8

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	@ (8000dc8 <HAL_GetTick+0x10>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	200001a8 	.word	0x200001a8

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dde:	d809      	bhi.n	8000df4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	001a      	movs	r2, r3
 8000de6:	231f      	movs	r3, #31
 8000de8:	401a      	ands	r2, r3
 8000dea:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_EnableIRQ+0x30>)
 8000dec:	2101      	movs	r1, #1
 8000dee:	4091      	lsls	r1, r2
 8000df0:	000a      	movs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
  }
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	0002      	movs	r2, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e14:	d828      	bhi.n	8000e68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed4 <__NVIC_SetPriority+0xd4>)
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	33c0      	adds	r3, #192	@ 0xc0
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	589b      	ldr	r3, [r3, r2]
 8000e26:	1dfa      	adds	r2, r7, #7
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	400a      	ands	r2, r1
 8000e30:	00d2      	lsls	r2, r2, #3
 8000e32:	21ff      	movs	r1, #255	@ 0xff
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	43d2      	mvns	r2, r2
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	019b      	lsls	r3, r3, #6
 8000e42:	22ff      	movs	r2, #255	@ 0xff
 8000e44:	401a      	ands	r2, r3
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	4003      	ands	r3, r0
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e54:	481f      	ldr	r0, [pc, #124]	@ (8000ed4 <__NVIC_SetPriority+0xd4>)
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	33c0      	adds	r3, #192	@ 0xc0
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e66:	e031      	b.n	8000ecc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <__NVIC_SetPriority+0xd8>)
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	0019      	movs	r1, r3
 8000e70:	230f      	movs	r3, #15
 8000e72:	400b      	ands	r3, r1
 8000e74:	3b08      	subs	r3, #8
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3306      	adds	r3, #6
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	18d3      	adds	r3, r2, r3
 8000e7e:	3304      	adds	r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1dfa      	adds	r2, r7, #7
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	0011      	movs	r1, r2
 8000e88:	2203      	movs	r2, #3
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	00d2      	lsls	r2, r2, #3
 8000e8e:	21ff      	movs	r1, #255	@ 0xff
 8000e90:	4091      	lsls	r1, r2
 8000e92:	000a      	movs	r2, r1
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	401a      	ands	r2, r3
 8000e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	22ff      	movs	r2, #255	@ 0xff
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	4003      	ands	r3, r0
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb0:	4809      	ldr	r0, [pc, #36]	@ (8000ed8 <__NVIC_SetPriority+0xd8>)
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	001c      	movs	r4, r3
 8000eb8:	230f      	movs	r3, #15
 8000eba:	4023      	ands	r3, r4
 8000ebc:	3b08      	subs	r3, #8
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	3306      	adds	r3, #6
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	18c3      	adds	r3, r0, r3
 8000ec8:	3304      	adds	r3, #4
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	1e5a      	subs	r2, r3, #1
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	045b      	lsls	r3, r3, #17
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d301      	bcc.n	8000ef4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e010      	b.n	8000f16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <SysTick_Config+0x44>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	3a01      	subs	r2, #1
 8000efa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efc:	2301      	movs	r3, #1
 8000efe:	425b      	negs	r3, r3
 8000f00:	2103      	movs	r1, #3
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff ff7c 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <SysTick_Config+0x44>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <SysTick_Config+0x44>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	210f      	movs	r1, #15
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	1c02      	adds	r2, r0, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	0011      	movs	r1, r2
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	0002      	movs	r2, r0
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ff33 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff ffaf 	bl	8000edc <SysTick_Config>
 8000f7e:	0003      	movs	r3, r0
}
 8000f80:	0018      	movs	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f9e:	e149      	b.n	8001234 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4091      	lsls	r1, r2
 8000faa:	000a      	movs	r2, r1
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d100      	bne.n	8000fb8 <HAL_GPIO_Init+0x30>
 8000fb6:	e13a      	b.n	800122e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d005      	beq.n	8000fd0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	0013      	movs	r3, r2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	2201      	movs	r2, #1
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2203      	movs	r2, #3
 8001038:	4013      	ands	r3, r2
 800103a:	2b03      	cmp	r3, #3
 800103c:	d017      	beq.n	800106e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	43da      	mvns	r2, r3
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2203      	movs	r2, #3
 8001074:	4013      	ands	r3, r2
 8001076:	2b02      	cmp	r3, #2
 8001078:	d123      	bne.n	80010c2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	58d3      	ldr	r3, [r2, r3]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	2207      	movs	r2, #7
 800108c:	4013      	ands	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2107      	movs	r1, #7
 80010a6:	400b      	ands	r3, r1
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	0092      	lsls	r2, r2, #2
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2203      	movs	r2, #3
 80010e0:	401a      	ands	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	23c0      	movs	r3, #192	@ 0xc0
 80010fc:	029b      	lsls	r3, r3, #10
 80010fe:	4013      	ands	r3, r2
 8001100:	d100      	bne.n	8001104 <HAL_GPIO_Init+0x17c>
 8001102:	e094      	b.n	800122e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	4b51      	ldr	r3, [pc, #324]	@ (800124c <HAL_GPIO_Init+0x2c4>)
 8001106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001108:	4b50      	ldr	r3, [pc, #320]	@ (800124c <HAL_GPIO_Init+0x2c4>)
 800110a:	2101      	movs	r1, #1
 800110c:	430a      	orrs	r2, r1
 800110e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001110:	4a4f      	ldr	r2, [pc, #316]	@ (8001250 <HAL_GPIO_Init+0x2c8>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	589b      	ldr	r3, [r3, r2]
 800111c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	409a      	lsls	r2, r3
 800112a:	0013      	movs	r3, r2
 800112c:	43da      	mvns	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	23a0      	movs	r3, #160	@ 0xa0
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	429a      	cmp	r2, r3
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x1de>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a44      	ldr	r2, [pc, #272]	@ (8001254 <HAL_GPIO_Init+0x2cc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x1da>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a43      	ldr	r2, [pc, #268]	@ (8001258 <HAL_GPIO_Init+0x2d0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x1d6>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a42      	ldr	r2, [pc, #264]	@ (800125c <HAL_GPIO_Init+0x2d4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x1d2>
 8001156:	2305      	movs	r3, #5
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x1e0>
 800115a:	2306      	movs	r3, #6
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x1e0>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x1e0>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x1e0>
 8001166:	2300      	movs	r3, #0
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	2103      	movs	r1, #3
 800116c:	400a      	ands	r2, r1
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	@ (8001250 <HAL_GPIO_Init+0x2c8>)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <HAL_GPIO_Init+0x2d8>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	2380      	movs	r3, #128	@ 0x80
 800119c:	035b      	lsls	r3, r3, #13
 800119e:	4013      	ands	r3, r2
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_GPIO_Init+0x2d8>)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <HAL_GPIO_Init+0x2d8>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43da      	mvns	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	039b      	lsls	r3, r3, #14
 80011c8:	4013      	ands	r3, r2
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <HAL_GPIO_Init+0x2d8>)
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <HAL_GPIO_Init+0x2d8>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	2380      	movs	r3, #128	@ 0x80
 80011f0:	029b      	lsls	r3, r3, #10
 80011f2:	4013      	ands	r3, r2
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_GPIO_Init+0x2d8>)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001204:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_GPIO_Init+0x2d8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	025b      	lsls	r3, r3, #9
 800121c:	4013      	ands	r3, r2
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_GPIO_Init+0x2d8>)
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	40da      	lsrs	r2, r3
 800123c:	1e13      	subs	r3, r2, #0
 800123e:	d000      	beq.n	8001242 <HAL_GPIO_Init+0x2ba>
 8001240:	e6ae      	b.n	8000fa0 <HAL_GPIO_Init+0x18>
  }
}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b006      	add	sp, #24
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	50000400 	.word	0x50000400
 8001258:	50000800 	.word	0x50000800
 800125c:	50001c00 	.word	0x50001c00
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	0008      	movs	r0, r1
 800126e:	0011      	movs	r1, r2
 8001270:	1cbb      	adds	r3, r7, #2
 8001272:	1c02      	adds	r2, r0, #0
 8001274:	801a      	strh	r2, [r3, #0]
 8001276:	1c7b      	adds	r3, r7, #1
 8001278:	1c0a      	adds	r2, r1, #0
 800127a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127c:	1c7b      	adds	r3, r7, #1
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800128e:	1cbb      	adds	r3, r7, #2
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	000a      	movs	r2, r1
 80012a8:	1cbb      	adds	r3, r7, #2
 80012aa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b2:	1cbb      	adds	r3, r7, #2
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	4013      	ands	r3, r2
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	1cb9      	adds	r1, r7, #2
 80012c2:	8809      	ldrh	r1, [r1, #0]
 80012c4:	400b      	ands	r3, r1
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
}
 80012cc:	46c0      	nop			@ (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e082      	b.n	80013ec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2241      	movs	r2, #65	@ 0x41
 80012ea:	5c9b      	ldrb	r3, [r3, r2]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d107      	bne.n	8001302 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2240      	movs	r2, #64	@ 0x40
 80012f6:	2100      	movs	r1, #0
 80012f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff facf 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2241      	movs	r2, #65	@ 0x41
 8001306:	2124      	movs	r1, #36	@ 0x24
 8001308:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	438a      	bics	r2, r1
 8001318:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4934      	ldr	r1, [pc, #208]	@ (80013f4 <HAL_I2C_Init+0x120>)
 8001324:	400a      	ands	r2, r1
 8001326:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4931      	ldr	r1, [pc, #196]	@ (80013f8 <HAL_I2C_Init+0x124>)
 8001334:	400a      	ands	r2, r1
 8001336:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d108      	bne.n	8001352 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	0209      	lsls	r1, r1, #8
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	e007      	b.n	8001362 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2184      	movs	r1, #132	@ 0x84
 800135c:	0209      	lsls	r1, r1, #8
 800135e:	430a      	orrs	r2, r1
 8001360:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d104      	bne.n	8001374 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2280      	movs	r2, #128	@ 0x80
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	491f      	ldr	r1, [pc, #124]	@ (80013fc <HAL_I2C_Init+0x128>)
 8001380:	430a      	orrs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	491a      	ldr	r1, [pc, #104]	@ (80013f8 <HAL_I2C_Init+0x124>)
 8001390:	400a      	ands	r2, r1
 8001392:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	431a      	orrs	r2, r3
 800139e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69d9      	ldr	r1, [r3, #28]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1a      	ldr	r2, [r3, #32]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2241      	movs	r2, #65	@ 0x41
 80013d8:	2120      	movs	r1, #32
 80013da:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2242      	movs	r2, #66	@ 0x42
 80013e6:	2100      	movs	r1, #0
 80013e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	f0ffffff 	.word	0xf0ffffff
 80013f8:	ffff7fff 	.word	0xffff7fff
 80013fc:	02008000 	.word	0x02008000

08001400 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af02      	add	r7, sp, #8
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	0008      	movs	r0, r1
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	0019      	movs	r1, r3
 800140e:	230a      	movs	r3, #10
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	1c02      	adds	r2, r0, #0
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	2308      	movs	r3, #8
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	1c0a      	adds	r2, r1, #0
 800141c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2241      	movs	r2, #65	@ 0x41
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b20      	cmp	r3, #32
 8001428:	d000      	beq.n	800142c <HAL_I2C_Master_Transmit+0x2c>
 800142a:	e0e7      	b.n	80015fc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2240      	movs	r2, #64	@ 0x40
 8001430:	5c9b      	ldrb	r3, [r3, r2]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_I2C_Master_Transmit+0x3a>
 8001436:	2302      	movs	r3, #2
 8001438:	e0e1      	b.n	80015fe <HAL_I2C_Master_Transmit+0x1fe>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2240      	movs	r2, #64	@ 0x40
 800143e:	2101      	movs	r1, #1
 8001440:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001442:	f7ff fcb9 	bl	8000db8 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	0219      	lsls	r1, r3, #8
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2319      	movs	r3, #25
 8001456:	2201      	movs	r2, #1
 8001458:	f000 fa04 	bl	8001864 <I2C_WaitOnFlagUntilTimeout>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0cc      	b.n	80015fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2241      	movs	r2, #65	@ 0x41
 8001468:	2121      	movs	r1, #33	@ 0x21
 800146a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2242      	movs	r2, #66	@ 0x42
 8001470:	2110      	movs	r1, #16
 8001472:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2208      	movs	r2, #8
 8001484:	18ba      	adds	r2, r7, r2
 8001486:	8812      	ldrh	r2, [r2, #0]
 8001488:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	2bff      	cmp	r3, #255	@ 0xff
 8001498:	d911      	bls.n	80014be <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	22ff      	movs	r2, #255	@ 0xff
 800149e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	045c      	lsls	r4, r3, #17
 80014aa:	230a      	movs	r3, #10
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	8819      	ldrh	r1, [r3, #0]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	4b55      	ldr	r3, [pc, #340]	@ (8001608 <HAL_I2C_Master_Transmit+0x208>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	0023      	movs	r3, r4
 80014b8:	f000 fc26 	bl	8001d08 <I2C_TransferConfig>
 80014bc:	e075      	b.n	80015aa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	049c      	lsls	r4, r3, #18
 80014d2:	230a      	movs	r3, #10
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	8819      	ldrh	r1, [r3, #0]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	4b4b      	ldr	r3, [pc, #300]	@ (8001608 <HAL_I2C_Master_Transmit+0x208>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	0023      	movs	r3, r4
 80014e0:	f000 fc12 	bl	8001d08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80014e4:	e061      	b.n	80015aa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f000 fa07 	bl	8001900 <I2C_WaitOnTXISFlagUntilTimeout>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e081      	b.n	80015fe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	3b01      	subs	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001522:	3b01      	subs	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800152e:	b29b      	uxth	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03a      	beq.n	80015aa <HAL_I2C_Master_Transmit+0x1aa>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	d136      	bne.n	80015aa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800153c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	0013      	movs	r3, r2
 8001546:	2200      	movs	r2, #0
 8001548:	2180      	movs	r1, #128	@ 0x80
 800154a:	f000 f98b 	bl	8001864 <I2C_WaitOnFlagUntilTimeout>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e053      	b.n	80015fe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	2bff      	cmp	r3, #255	@ 0xff
 800155e:	d911      	bls.n	8001584 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	22ff      	movs	r2, #255	@ 0xff
 8001564:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800156a:	b2da      	uxtb	r2, r3
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	045c      	lsls	r4, r3, #17
 8001570:	230a      	movs	r3, #10
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	8819      	ldrh	r1, [r3, #0]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	2300      	movs	r3, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	0023      	movs	r3, r4
 800157e:	f000 fbc3 	bl	8001d08 <I2C_TransferConfig>
 8001582:	e012      	b.n	80015aa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001592:	b2da      	uxtb	r2, r3
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	049c      	lsls	r4, r3, #18
 8001598:	230a      	movs	r3, #10
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	8819      	ldrh	r1, [r3, #0]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	2300      	movs	r3, #0
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	0023      	movs	r3, r4
 80015a6:	f000 fbaf 	bl	8001d08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d198      	bne.n	80014e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 f9e6 	bl	800198c <I2C_WaitOnSTOPFlagUntilTimeout>
 80015c0:	1e03      	subs	r3, r0, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e01a      	b.n	80015fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2220      	movs	r2, #32
 80015ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	490c      	ldr	r1, [pc, #48]	@ (800160c <HAL_I2C_Master_Transmit+0x20c>)
 80015dc:	400a      	ands	r2, r1
 80015de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2241      	movs	r2, #65	@ 0x41
 80015e4:	2120      	movs	r1, #32
 80015e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2242      	movs	r2, #66	@ 0x42
 80015ec:	2100      	movs	r1, #0
 80015ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2240      	movs	r2, #64	@ 0x40
 80015f4:	2100      	movs	r1, #0
 80015f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e000      	b.n	80015fe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80015fc:	2302      	movs	r3, #2
  }
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b007      	add	sp, #28
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	80002000 	.word	0x80002000
 800160c:	fe00e800 	.word	0xfe00e800

08001610 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b089      	sub	sp, #36	@ 0x24
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	0008      	movs	r0, r1
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	0019      	movs	r1, r3
 800161e:	230a      	movs	r3, #10
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	1c02      	adds	r2, r0, #0
 8001624:	801a      	strh	r2, [r3, #0]
 8001626:	2308      	movs	r3, #8
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	1c0a      	adds	r2, r1, #0
 800162c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2241      	movs	r2, #65	@ 0x41
 8001632:	5c9b      	ldrb	r3, [r3, r2]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b20      	cmp	r3, #32
 8001638:	d000      	beq.n	800163c <HAL_I2C_Master_Receive+0x2c>
 800163a:	e0e8      	b.n	800180e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	5c9b      	ldrb	r3, [r3, r2]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_I2C_Master_Receive+0x3a>
 8001646:	2302      	movs	r3, #2
 8001648:	e0e2      	b.n	8001810 <HAL_I2C_Master_Receive+0x200>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2240      	movs	r2, #64	@ 0x40
 800164e:	2101      	movs	r1, #1
 8001650:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001652:	f7ff fbb1 	bl	8000db8 <HAL_GetTick>
 8001656:	0003      	movs	r3, r0
 8001658:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	0219      	lsls	r1, r3, #8
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2319      	movs	r3, #25
 8001666:	2201      	movs	r2, #1
 8001668:	f000 f8fc 	bl	8001864 <I2C_WaitOnFlagUntilTimeout>
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	d001      	beq.n	8001674 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0cd      	b.n	8001810 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2241      	movs	r2, #65	@ 0x41
 8001678:	2122      	movs	r1, #34	@ 0x22
 800167a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2242      	movs	r2, #66	@ 0x42
 8001680:	2110      	movs	r1, #16
 8001682:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2208      	movs	r2, #8
 8001694:	18ba      	adds	r2, r7, r2
 8001696:	8812      	ldrh	r2, [r2, #0]
 8001698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2bff      	cmp	r3, #255	@ 0xff
 80016a8:	d911      	bls.n	80016ce <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	22ff      	movs	r2, #255	@ 0xff
 80016ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	2380      	movs	r3, #128	@ 0x80
 80016b8:	045c      	lsls	r4, r3, #17
 80016ba:	230a      	movs	r3, #10
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	8819      	ldrh	r1, [r3, #0]
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	4b55      	ldr	r3, [pc, #340]	@ (8001818 <HAL_I2C_Master_Receive+0x208>)
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	0023      	movs	r3, r4
 80016c8:	f000 fb1e 	bl	8001d08 <I2C_TransferConfig>
 80016cc:	e076      	b.n	80017bc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	049c      	lsls	r4, r3, #18
 80016e2:	230a      	movs	r3, #10
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	8819      	ldrh	r1, [r3, #0]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001818 <HAL_I2C_Master_Receive+0x208>)
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	0023      	movs	r3, r4
 80016f0:	f000 fb0a 	bl	8001d08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80016f4:	e062      	b.n	80017bc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 f989 	bl	8001a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d001      	beq.n	800170a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e082      	b.n	8001810 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001726:	3b01      	subs	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001732:	b29b      	uxth	r3, r3
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d03a      	beq.n	80017bc <HAL_I2C_Master_Receive+0x1ac>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800174a:	2b00      	cmp	r3, #0
 800174c:	d136      	bne.n	80017bc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800174e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	0013      	movs	r3, r2
 8001758:	2200      	movs	r2, #0
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	f000 f882 	bl	8001864 <I2C_WaitOnFlagUntilTimeout>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e053      	b.n	8001810 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	2bff      	cmp	r3, #255	@ 0xff
 8001770:	d911      	bls.n	8001796 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	22ff      	movs	r2, #255	@ 0xff
 8001776:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177c:	b2da      	uxtb	r2, r3
 800177e:	2380      	movs	r3, #128	@ 0x80
 8001780:	045c      	lsls	r4, r3, #17
 8001782:	230a      	movs	r3, #10
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	8819      	ldrh	r1, [r3, #0]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	2300      	movs	r3, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	0023      	movs	r3, r4
 8001790:	f000 faba 	bl	8001d08 <I2C_TransferConfig>
 8001794:	e012      	b.n	80017bc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	2380      	movs	r3, #128	@ 0x80
 80017a8:	049c      	lsls	r4, r3, #18
 80017aa:	230a      	movs	r3, #10
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	8819      	ldrh	r1, [r3, #0]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	0023      	movs	r3, r4
 80017b8:	f000 faa6 	bl	8001d08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d197      	bne.n	80016f6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 f8dd 	bl	800198c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e01a      	b.n	8001810 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2220      	movs	r2, #32
 80017e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	490b      	ldr	r1, [pc, #44]	@ (800181c <HAL_I2C_Master_Receive+0x20c>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2241      	movs	r2, #65	@ 0x41
 80017f6:	2120      	movs	r1, #32
 80017f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2242      	movs	r2, #66	@ 0x42
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2240      	movs	r2, #64	@ 0x40
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800180e:	2302      	movs	r3, #2
  }
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b007      	add	sp, #28
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	80002400 	.word	0x80002400
 800181c:	fe00e800 	.word	0xfe00e800

08001820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2202      	movs	r2, #2
 8001830:	4013      	ands	r3, r2
 8001832:	2b02      	cmp	r3, #2
 8001834:	d103      	bne.n	800183e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2201      	movs	r2, #1
 8001846:	4013      	ands	r3, r2
 8001848:	2b01      	cmp	r3, #1
 800184a:	d007      	beq.n	800185c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2101      	movs	r1, #1
 8001858:	430a      	orrs	r2, r1
 800185a:	619a      	str	r2, [r3, #24]
  }
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}

08001864 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001874:	e030      	b.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	d02d      	beq.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187c:	f7ff fa9c 	bl	8000db8 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d302      	bcc.n	8001892 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d122      	bne.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	4013      	ands	r3, r2
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	425a      	negs	r2, r3
 80018a2:	4153      	adcs	r3, r2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	001a      	movs	r2, r3
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d113      	bne.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b4:	2220      	movs	r2, #32
 80018b6:	431a      	orrs	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2241      	movs	r2, #65	@ 0x41
 80018c0:	2120      	movs	r1, #32
 80018c2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2242      	movs	r2, #66	@ 0x42
 80018c8:	2100      	movs	r1, #0
 80018ca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2240      	movs	r2, #64	@ 0x40
 80018d0:	2100      	movs	r1, #0
 80018d2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e00f      	b.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4013      	ands	r3, r2
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	425a      	negs	r2, r3
 80018e8:	4153      	adcs	r3, r2
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	001a      	movs	r2, r3
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d0bf      	beq.n	8001876 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b004      	add	sp, #16
 80018fe:	bd80      	pop	{r7, pc}

08001900 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800190c:	e032      	b.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	0018      	movs	r0, r3
 8001916:	f000 f8ff 	bl	8001b18 <I2C_IsErrorOccurred>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d001      	beq.n	8001922 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e030      	b.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3301      	adds	r3, #1
 8001926:	d025      	beq.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001928:	f7ff fa46 	bl	8000db8 <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	429a      	cmp	r2, r3
 8001936:	d302      	bcc.n	800193e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d11a      	bne.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	2b02      	cmp	r3, #2
 800194a:	d013      	beq.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	2220      	movs	r2, #32
 8001952:	431a      	orrs	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2241      	movs	r2, #65	@ 0x41
 800195c:	2120      	movs	r1, #32
 800195e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2242      	movs	r2, #66	@ 0x42
 8001964:	2100      	movs	r1, #0
 8001966:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2240      	movs	r2, #64	@ 0x40
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e007      	b.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	2b02      	cmp	r3, #2
 8001980:	d1c5      	bne.n	800190e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b004      	add	sp, #16
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001998:	e02f      	b.n	80019fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	0018      	movs	r0, r3
 80019a2:	f000 f8b9 	bl	8001b18 <I2C_IsErrorOccurred>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e02d      	b.n	8001a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ae:	f7ff fa03 	bl	8000db8 <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d302      	bcc.n	80019c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11a      	bne.n	80019fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2220      	movs	r2, #32
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	d013      	beq.n	80019fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	2220      	movs	r2, #32
 80019d8:	431a      	orrs	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2241      	movs	r2, #65	@ 0x41
 80019e2:	2120      	movs	r1, #32
 80019e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2242      	movs	r2, #66	@ 0x42
 80019ea:	2100      	movs	r1, #0
 80019ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2240      	movs	r2, #64	@ 0x40
 80019f2:	2100      	movs	r1, #0
 80019f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e007      	b.n	8001a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2220      	movs	r2, #32
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d1c8      	bne.n	800199a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b004      	add	sp, #16
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a20:	e06b      	b.n	8001afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f000 f875 	bl	8001b18 <I2C_IsErrorOccurred>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d001      	beq.n	8001a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e069      	b.n	8001b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d138      	bne.n	8001ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d105      	bne.n	8001a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e055      	b.n	8001b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2210      	movs	r2, #16
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d107      	bne.n	8001a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2210      	movs	r2, #16
 8001a72:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2204      	movs	r2, #4
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a7a:	e002      	b.n	8001a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2220      	movs	r2, #32
 8001a88:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	491f      	ldr	r1, [pc, #124]	@ (8001b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001a96:	400a      	ands	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2241      	movs	r2, #65	@ 0x41
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2242      	movs	r2, #66	@ 0x42
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2240      	movs	r2, #64	@ 0x40
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e029      	b.n	8001b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab6:	f7ff f97f 	bl	8000db8 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d302      	bcc.n	8001acc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d116      	bne.n	8001afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d00f      	beq.n	8001afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	2220      	movs	r2, #32
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2241      	movs	r2, #65	@ 0x41
 8001aea:	2120      	movs	r1, #32
 8001aec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2240      	movs	r2, #64	@ 0x40
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e007      	b.n	8001b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2204      	movs	r2, #4
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d18c      	bne.n	8001a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b004      	add	sp, #16
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	fe00e800 	.word	0xfe00e800

08001b18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	@ 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2327      	movs	r3, #39	@ 0x27
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2210      	movs	r2, #16
 8001b40:	4013      	ands	r3, r2
 8001b42:	d100      	bne.n	8001b46 <I2C_IsErrorOccurred+0x2e>
 8001b44:	e079      	b.n	8001c3a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b4e:	e057      	b.n	8001c00 <I2C_IsErrorOccurred+0xe8>
 8001b50:	2227      	movs	r2, #39	@ 0x27
 8001b52:	18bb      	adds	r3, r7, r2
 8001b54:	18ba      	adds	r2, r7, r2
 8001b56:	7812      	ldrb	r2, [r2, #0]
 8001b58:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	d04f      	beq.n	8001c00 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b60:	f7ff f92a 	bl	8000db8 <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d302      	bcc.n	8001b76 <I2C_IsErrorOccurred+0x5e>
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d144      	bne.n	8001c00 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	01db      	lsls	r3, r3, #7
 8001b80:	4013      	ands	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b84:	2013      	movs	r0, #19
 8001b86:	183b      	adds	r3, r7, r0
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	2142      	movs	r1, #66	@ 0x42
 8001b8c:	5c52      	ldrb	r2, [r2, r1]
 8001b8e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d126      	bne.n	8001bf2 <I2C_IsErrorOccurred+0xda>
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	01db      	lsls	r3, r3, #7
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d021      	beq.n	8001bf2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001bae:	183b      	adds	r3, r7, r0
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d01d      	beq.n	8001bf2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2180      	movs	r1, #128	@ 0x80
 8001bc2:	01c9      	lsls	r1, r1, #7
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bc8:	f7ff f8f6 	bl	8000db8 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bd0:	e00f      	b.n	8001bf2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bd2:	f7ff f8f1 	bl	8000db8 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b19      	cmp	r3, #25
 8001bde:	d908      	bls.n	8001bf2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	2220      	movs	r2, #32
 8001be4:	4313      	orrs	r3, r2
 8001be6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001be8:	2327      	movs	r3, #39	@ 0x27
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]

              break;
 8001bf0:	e006      	b.n	8001c00 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d1e8      	bne.n	8001bd2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2220      	movs	r2, #32
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d004      	beq.n	8001c18 <I2C_IsErrorOccurred+0x100>
 8001c0e:	2327      	movs	r3, #39	@ 0x27
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d09b      	beq.n	8001b50 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c18:	2327      	movs	r3, #39	@ 0x27
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d103      	bne.n	8001c2a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2220      	movs	r2, #32
 8001c28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c32:	2327      	movs	r3, #39	@ 0x27
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d00c      	beq.n	8001c66 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4313      	orrs	r3, r2
 8001c52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2280      	movs	r2, #128	@ 0x80
 8001c5a:	0052      	lsls	r2, r2, #1
 8001c5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c5e:	2327      	movs	r3, #39	@ 0x27
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d00c      	beq.n	8001c8a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	2208      	movs	r2, #8
 8001c74:	4313      	orrs	r3, r2
 8001c76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2280      	movs	r2, #128	@ 0x80
 8001c7e:	00d2      	lsls	r2, r2, #3
 8001c80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c82:	2327      	movs	r3, #39	@ 0x27
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	2380      	movs	r3, #128	@ 0x80
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d00c      	beq.n	8001cae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	2202      	movs	r2, #2
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	0092      	lsls	r2, r2, #2
 8001ca4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ca6:	2327      	movs	r3, #39	@ 0x27
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001cae:	2327      	movs	r3, #39	@ 0x27
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01d      	beq.n	8001cf4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7ff fdb0 	bl	8001820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	490e      	ldr	r1, [pc, #56]	@ (8001d04 <I2C_IsErrorOccurred+0x1ec>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2241      	movs	r2, #65	@ 0x41
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2242      	movs	r2, #66	@ 0x42
 8001ce8:	2100      	movs	r1, #0
 8001cea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2240      	movs	r2, #64	@ 0x40
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001cf4:	2327      	movs	r3, #39	@ 0x27
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	781b      	ldrb	r3, [r3, #0]
}
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b00a      	add	sp, #40	@ 0x28
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	fe00e800 	.word	0xfe00e800

08001d08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	0008      	movs	r0, r1
 8001d12:	0011      	movs	r1, r2
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	240a      	movs	r4, #10
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	1c02      	adds	r2, r0, #0
 8001d1c:	801a      	strh	r2, [r3, #0]
 8001d1e:	2009      	movs	r0, #9
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	1c0a      	adds	r2, r1, #0
 8001d24:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	059b      	lsls	r3, r3, #22
 8001d2c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d2e:	183b      	adds	r3, r7, r0
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0419      	lsls	r1, r3, #16
 8001d34:	23ff      	movs	r3, #255	@ 0xff
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d3a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d42:	4313      	orrs	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d52:	0d51      	lsrs	r1, r2, #21
 8001d54:	2280      	movs	r2, #128	@ 0x80
 8001d56:	00d2      	lsls	r2, r2, #3
 8001d58:	400a      	ands	r2, r1
 8001d5a:	4907      	ldr	r1, [pc, #28]	@ (8001d78 <I2C_TransferConfig+0x70>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	43d2      	mvns	r2, r2
 8001d60:	401a      	ands	r2, r3
 8001d62:	0011      	movs	r1, r2
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b007      	add	sp, #28
 8001d74:	bd90      	pop	{r4, r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	03ff63ff 	.word	0x03ff63ff

08001d7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2241      	movs	r2, #65	@ 0x41
 8001d8a:	5c9b      	ldrb	r3, [r3, r2]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d138      	bne.n	8001e04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2240      	movs	r2, #64	@ 0x40
 8001d96:	5c9b      	ldrb	r3, [r3, r2]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e032      	b.n	8001e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2240      	movs	r2, #64	@ 0x40
 8001da4:	2101      	movs	r1, #1
 8001da6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2241      	movs	r2, #65	@ 0x41
 8001dac:	2124      	movs	r1, #36	@ 0x24
 8001dae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4911      	ldr	r1, [pc, #68]	@ (8001e10 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2101      	movs	r1, #1
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2241      	movs	r2, #65	@ 0x41
 8001df4:	2120      	movs	r1, #32
 8001df6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2240      	movs	r2, #64	@ 0x40
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e000      	b.n	8001e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e04:	2302      	movs	r3, #2
  }
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	ffffefff 	.word	0xffffefff

08001e14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2241      	movs	r2, #65	@ 0x41
 8001e22:	5c9b      	ldrb	r3, [r3, r2]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d139      	bne.n	8001e9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2240      	movs	r2, #64	@ 0x40
 8001e2e:	5c9b      	ldrb	r3, [r3, r2]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e033      	b.n	8001ea0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2240      	movs	r2, #64	@ 0x40
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2241      	movs	r2, #65	@ 0x41
 8001e44:	2124      	movs	r1, #36	@ 0x24
 8001e46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	438a      	bics	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a11      	ldr	r2, [pc, #68]	@ (8001ea8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2241      	movs	r2, #65	@ 0x41
 8001e8e:	2120      	movs	r1, #32
 8001e90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2240      	movs	r2, #64	@ 0x40
 8001e96:	2100      	movs	r1, #0
 8001e98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e9e:	2302      	movs	r3, #2
  }
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b004      	add	sp, #16
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	fffff0ff 	.word	0xfffff0ff

08001eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eac:	b5b0      	push	{r4, r5, r7, lr}
 8001eae:	b08a      	sub	sp, #40	@ 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f000 fb6c 	bl	8002598 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec0:	4bc8      	ldr	r3, [pc, #800]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	220c      	movs	r2, #12
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eca:	4bc6      	ldr	r3, [pc, #792]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	2380      	movs	r3, #128	@ 0x80
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x36>
 8001ee0:	e07d      	b.n	8001fde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d007      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d112      	bne.n	8001f14 <HAL_RCC_OscConfig+0x68>
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	025b      	lsls	r3, r3, #9
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10d      	bne.n	8001f14 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	4bba      	ldr	r3, [pc, #744]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	029b      	lsls	r3, r3, #10
 8001f00:	4013      	ands	r3, r2
 8001f02:	d100      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5a>
 8001f04:	e06a      	b.n	8001fdc <HAL_RCC_OscConfig+0x130>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d166      	bne.n	8001fdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f000 fb42 	bl	8002598 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	025b      	lsls	r3, r3, #9
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x84>
 8001f20:	4bb0      	ldr	r3, [pc, #704]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4baf      	ldr	r3, [pc, #700]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f26:	2180      	movs	r1, #128	@ 0x80
 8001f28:	0249      	lsls	r1, r1, #9
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e027      	b.n	8001f80 <HAL_RCC_OscConfig+0xd4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	23a0      	movs	r3, #160	@ 0xa0
 8001f36:	02db      	lsls	r3, r3, #11
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10e      	bne.n	8001f5a <HAL_RCC_OscConfig+0xae>
 8001f3c:	4ba9      	ldr	r3, [pc, #676]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4ba8      	ldr	r3, [pc, #672]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f42:	2180      	movs	r1, #128	@ 0x80
 8001f44:	02c9      	lsls	r1, r1, #11
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	4ba6      	ldr	r3, [pc, #664]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4ba5      	ldr	r3, [pc, #660]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f50:	2180      	movs	r1, #128	@ 0x80
 8001f52:	0249      	lsls	r1, r1, #9
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e012      	b.n	8001f80 <HAL_RCC_OscConfig+0xd4>
 8001f5a:	4ba2      	ldr	r3, [pc, #648]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4ba1      	ldr	r3, [pc, #644]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f60:	49a1      	ldr	r1, [pc, #644]	@ (80021e8 <HAL_RCC_OscConfig+0x33c>)
 8001f62:	400a      	ands	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	4b9f      	ldr	r3, [pc, #636]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	025b      	lsls	r3, r3, #9
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4b9b      	ldr	r3, [pc, #620]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b9a      	ldr	r3, [pc, #616]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001f7a:	499c      	ldr	r1, [pc, #624]	@ (80021ec <HAL_RCC_OscConfig+0x340>)
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d014      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7fe ff16 	bl	8000db8 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f92:	f7fe ff11 	bl	8000db8 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b64      	cmp	r3, #100	@ 0x64
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e2f9      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	029b      	lsls	r3, r3, #10
 8001fac:	4013      	ands	r3, r2
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0xe6>
 8001fb0:	e015      	b.n	8001fde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7fe ff01 	bl	8000db8 <HAL_GetTick>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fefc 	bl	8000db8 <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	@ 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e2e4      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fce:	4b85      	ldr	r3, [pc, #532]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	029b      	lsls	r3, r3, #10
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x110>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d100      	bne.n	8001fea <HAL_RCC_OscConfig+0x13e>
 8001fe8:	e099      	b.n	800211e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d009      	beq.n	800200c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001ff8:	4b7a      	ldr	r3, [pc, #488]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b79      	ldr	r3, [pc, #484]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8001ffe:	2120      	movs	r1, #32
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	2220      	movs	r2, #32
 8002008:	4393      	bics	r3, r2
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b04      	cmp	r3, #4
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d13e      	bne.n	8002096 <HAL_RCC_OscConfig+0x1ea>
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d13b      	bne.n	8002096 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800201e:	4b71      	ldr	r3, [pc, #452]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2204      	movs	r2, #4
 8002024:	4013      	ands	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_RCC_OscConfig+0x186>
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e2b2      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b6c      	ldr	r3, [pc, #432]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a6e      	ldr	r2, [pc, #440]	@ (80021f0 <HAL_RCC_OscConfig+0x344>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	021a      	lsls	r2, r3, #8
 8002042:	4b68      	ldr	r3, [pc, #416]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002048:	4b66      	ldr	r3, [pc, #408]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2209      	movs	r2, #9
 800204e:	4393      	bics	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	4b64      	ldr	r3, [pc, #400]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8002054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800205a:	f000 fbeb 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 800205e:	0001      	movs	r1, r0
 8002060:	4b60      	ldr	r3, [pc, #384]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	220f      	movs	r2, #15
 8002068:	4013      	ands	r3, r2
 800206a:	4a62      	ldr	r2, [pc, #392]	@ (80021f4 <HAL_RCC_OscConfig+0x348>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	000a      	movs	r2, r1
 8002070:	40da      	lsrs	r2, r3
 8002072:	4b61      	ldr	r3, [pc, #388]	@ (80021f8 <HAL_RCC_OscConfig+0x34c>)
 8002074:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002076:	4b61      	ldr	r3, [pc, #388]	@ (80021fc <HAL_RCC_OscConfig+0x350>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2513      	movs	r5, #19
 800207c:	197c      	adds	r4, r7, r5
 800207e:	0018      	movs	r0, r3
 8002080:	f7fe fe54 	bl	8000d2c <HAL_InitTick>
 8002084:	0003      	movs	r3, r0
 8002086:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002088:	197b      	adds	r3, r7, r5
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d046      	beq.n	800211e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002090:	197b      	adds	r3, r7, r5
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	e280      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	2b00      	cmp	r3, #0
 800209a:	d027      	beq.n	80020ec <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800209c:	4b51      	ldr	r3, [pc, #324]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2209      	movs	r2, #9
 80020a2:	4393      	bics	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	4b4f      	ldr	r3, [pc, #316]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 80020a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7fe fe83 	bl	8000db8 <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b8:	f7fe fe7e 	bl	8000db8 <HAL_GetTick>
 80020bc:	0002      	movs	r2, r0
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e266      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ca:	4b46      	ldr	r3, [pc, #280]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2204      	movs	r2, #4
 80020d0:	4013      	ands	r3, r2
 80020d2:	d0f1      	beq.n	80020b8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d4:	4b43      	ldr	r3, [pc, #268]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a45      	ldr	r2, [pc, #276]	@ (80021f0 <HAL_RCC_OscConfig+0x344>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	021a      	lsls	r2, r3, #8
 80020e4:	4b3f      	ldr	r3, [pc, #252]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	e018      	b.n	800211e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ec:	4b3d      	ldr	r3, [pc, #244]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b3c      	ldr	r3, [pc, #240]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	438a      	bics	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7fe fe5e 	bl	8000db8 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002102:	f7fe fe59 	bl	8000db8 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e241      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002114:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2204      	movs	r2, #4
 800211a:	4013      	ands	r3, r2
 800211c:	d1f1      	bne.n	8002102 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2210      	movs	r2, #16
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCC_OscConfig+0x27e>
 8002128:	e0a1      	b.n	800226e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d140      	bne.n	80021b2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002130:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x29c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e227      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002148:	4b26      	ldr	r3, [pc, #152]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a2c      	ldr	r2, [pc, #176]	@ (8002200 <HAL_RCC_OscConfig+0x354>)
 800214e:	4013      	ands	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1a      	ldr	r2, [r3, #32]
 8002156:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8002158:	430a      	orrs	r2, r1
 800215a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800215c:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	0a19      	lsrs	r1, r3, #8
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	061a      	lsls	r2, r3, #24
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	0b5b      	lsrs	r3, r3, #13
 8002176:	3301      	adds	r3, #1
 8002178:	2280      	movs	r2, #128	@ 0x80
 800217a:	0212      	lsls	r2, r2, #8
 800217c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	210f      	movs	r1, #15
 8002186:	400b      	ands	r3, r1
 8002188:	491a      	ldr	r1, [pc, #104]	@ (80021f4 <HAL_RCC_OscConfig+0x348>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_RCC_OscConfig+0x34c>)
 8002190:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002192:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <HAL_RCC_OscConfig+0x350>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2513      	movs	r5, #19
 8002198:	197c      	adds	r4, r7, r5
 800219a:	0018      	movs	r0, r3
 800219c:	f7fe fdc6 	bl	8000d2c <HAL_InitTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021a4:	197b      	adds	r3, r7, r5
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d060      	beq.n	800226e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80021ac:	197b      	adds	r3, r7, r5
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	e1f2      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d03f      	beq.n	800223a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021ba:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_OscConfig+0x338>)
 80021c0:	2180      	movs	r1, #128	@ 0x80
 80021c2:	0049      	lsls	r1, r1, #1
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe fdf6 	bl	8000db8 <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021d0:	e018      	b.n	8002204 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d2:	f7fe fdf1 	bl	8000db8 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d911      	bls.n	8002204 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e1d9      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
 80021e4:	40021000 	.word	0x40021000
 80021e8:	fffeffff 	.word	0xfffeffff
 80021ec:	fffbffff 	.word	0xfffbffff
 80021f0:	ffffe0ff 	.word	0xffffe0ff
 80021f4:	08004e54 	.word	0x08004e54
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000004 	.word	0x20000004
 8002200:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002204:	4bc9      	ldr	r3, [pc, #804]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	@ 0x80
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4013      	ands	r3, r2
 800220e:	d0e0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002210:	4bc6      	ldr	r3, [pc, #792]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4ac6      	ldr	r2, [pc, #792]	@ (8002530 <HAL_RCC_OscConfig+0x684>)
 8002216:	4013      	ands	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	4bc3      	ldr	r3, [pc, #780]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002220:	430a      	orrs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002224:	4bc1      	ldr	r3, [pc, #772]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	0a19      	lsrs	r1, r3, #8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	061a      	lsls	r2, r3, #24
 8002232:	4bbe      	ldr	r3, [pc, #760]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	e019      	b.n	800226e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800223a:	4bbc      	ldr	r3, [pc, #752]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4bbb      	ldr	r3, [pc, #748]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002240:	49bc      	ldr	r1, [pc, #752]	@ (8002534 <HAL_RCC_OscConfig+0x688>)
 8002242:	400a      	ands	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe fdb7 	bl	8000db8 <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002250:	f7fe fdb2 	bl	8000db8 <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e19a      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002262:	4bb2      	ldr	r3, [pc, #712]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4013      	ands	r3, r2
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2208      	movs	r2, #8
 8002274:	4013      	ands	r3, r2
 8002276:	d036      	beq.n	80022e6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d019      	beq.n	80022b4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002280:	4baa      	ldr	r3, [pc, #680]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002282:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002284:	4ba9      	ldr	r3, [pc, #676]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002286:	2101      	movs	r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7fe fd94 	bl	8000db8 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7fe fd8f 	bl	8000db8 <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e177      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022a8:	4ba0      	ldr	r3, [pc, #640]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80022aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d0f1      	beq.n	8002296 <HAL_RCC_OscConfig+0x3ea>
 80022b2:	e018      	b.n	80022e6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b4:	4b9d      	ldr	r3, [pc, #628]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80022b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022b8:	4b9c      	ldr	r3, [pc, #624]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	438a      	bics	r2, r1
 80022be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7fe fd7a 	bl	8000db8 <HAL_GetTick>
 80022c4:	0003      	movs	r3, r0
 80022c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ca:	f7fe fd75 	bl	8000db8 <HAL_GetTick>
 80022ce:	0002      	movs	r2, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e15d      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022dc:	4b93      	ldr	r3, [pc, #588]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80022de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e0:	2202      	movs	r2, #2
 80022e2:	4013      	ands	r3, r2
 80022e4:	d1f1      	bne.n	80022ca <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2204      	movs	r2, #4
 80022ec:	4013      	ands	r3, r2
 80022ee:	d100      	bne.n	80022f2 <HAL_RCC_OscConfig+0x446>
 80022f0:	e0ae      	b.n	8002450 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f2:	2023      	movs	r0, #35	@ 0x23
 80022f4:	183b      	adds	r3, r7, r0
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b8c      	ldr	r3, [pc, #560]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80022fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	055b      	lsls	r3, r3, #21
 8002302:	4013      	ands	r3, r2
 8002304:	d109      	bne.n	800231a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b89      	ldr	r3, [pc, #548]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800230a:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 800230c:	2180      	movs	r1, #128	@ 0x80
 800230e:	0549      	lsls	r1, r1, #21
 8002310:	430a      	orrs	r2, r1
 8002312:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002314:	183b      	adds	r3, r7, r0
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b87      	ldr	r3, [pc, #540]	@ (8002538 <HAL_RCC_OscConfig+0x68c>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4013      	ands	r3, r2
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b84      	ldr	r3, [pc, #528]	@ (8002538 <HAL_RCC_OscConfig+0x68c>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b83      	ldr	r3, [pc, #524]	@ (8002538 <HAL_RCC_OscConfig+0x68c>)
 800232c:	2180      	movs	r1, #128	@ 0x80
 800232e:	0049      	lsls	r1, r1, #1
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002334:	f7fe fd40 	bl	8000db8 <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7fe fd3b 	bl	8000db8 <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	@ 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e123      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	4b79      	ldr	r3, [pc, #484]	@ (8002538 <HAL_RCC_OscConfig+0x68c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	@ 0x80
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4013      	ands	r3, r2
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	2380      	movs	r3, #128	@ 0x80
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x4cc>
 8002368:	4b70      	ldr	r3, [pc, #448]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 800236a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800236c:	4b6f      	ldr	r3, [pc, #444]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 800236e:	2180      	movs	r1, #128	@ 0x80
 8002370:	0049      	lsls	r1, r1, #1
 8002372:	430a      	orrs	r2, r1
 8002374:	651a      	str	r2, [r3, #80]	@ 0x50
 8002376:	e031      	b.n	80023dc <HAL_RCC_OscConfig+0x530>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10c      	bne.n	800239a <HAL_RCC_OscConfig+0x4ee>
 8002380:	4b6a      	ldr	r3, [pc, #424]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002382:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002384:	4b69      	ldr	r3, [pc, #420]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002386:	496b      	ldr	r1, [pc, #428]	@ (8002534 <HAL_RCC_OscConfig+0x688>)
 8002388:	400a      	ands	r2, r1
 800238a:	651a      	str	r2, [r3, #80]	@ 0x50
 800238c:	4b67      	ldr	r3, [pc, #412]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 800238e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002390:	4b66      	ldr	r3, [pc, #408]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002392:	496a      	ldr	r1, [pc, #424]	@ (800253c <HAL_RCC_OscConfig+0x690>)
 8002394:	400a      	ands	r2, r1
 8002396:	651a      	str	r2, [r3, #80]	@ 0x50
 8002398:	e020      	b.n	80023dc <HAL_RCC_OscConfig+0x530>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	23a0      	movs	r3, #160	@ 0xa0
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d10e      	bne.n	80023c4 <HAL_RCC_OscConfig+0x518>
 80023a6:	4b61      	ldr	r3, [pc, #388]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80023a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023aa:	4b60      	ldr	r3, [pc, #384]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80023ac:	2180      	movs	r1, #128	@ 0x80
 80023ae:	00c9      	lsls	r1, r1, #3
 80023b0:	430a      	orrs	r2, r1
 80023b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80023b4:	4b5d      	ldr	r3, [pc, #372]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80023b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023b8:	4b5c      	ldr	r3, [pc, #368]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	0049      	lsls	r1, r1, #1
 80023be:	430a      	orrs	r2, r1
 80023c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0x530>
 80023c4:	4b59      	ldr	r3, [pc, #356]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80023c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023c8:	4b58      	ldr	r3, [pc, #352]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80023ca:	495a      	ldr	r1, [pc, #360]	@ (8002534 <HAL_RCC_OscConfig+0x688>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80023d0:	4b56      	ldr	r3, [pc, #344]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80023d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023d4:	4b55      	ldr	r3, [pc, #340]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80023d6:	4959      	ldr	r1, [pc, #356]	@ (800253c <HAL_RCC_OscConfig+0x690>)
 80023d8:	400a      	ands	r2, r1
 80023da:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7fe fce8 	bl	8000db8 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ec:	e009      	b.n	8002402 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe fce3 	bl	8000db8 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	4a51      	ldr	r2, [pc, #324]	@ (8002540 <HAL_RCC_OscConfig+0x694>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0ca      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002402:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d0ef      	beq.n	80023ee <HAL_RCC_OscConfig+0x542>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7fe fcd2 	bl	8000db8 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002418:	e009      	b.n	800242e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe fccd 	bl	8000db8 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	4a46      	ldr	r2, [pc, #280]	@ (8002540 <HAL_RCC_OscConfig+0x694>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0b4      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800242e:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4013      	ands	r3, r2
 8002438:	d1ef      	bne.n	800241a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800243a:	2323      	movs	r3, #35	@ 0x23
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4b39      	ldr	r3, [pc, #228]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002448:	4b38      	ldr	r3, [pc, #224]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 800244a:	493e      	ldr	r1, [pc, #248]	@ (8002544 <HAL_RCC_OscConfig+0x698>)
 800244c:	400a      	ands	r2, r1
 800244e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	2b00      	cmp	r3, #0
 8002456:	d100      	bne.n	800245a <HAL_RCC_OscConfig+0x5ae>
 8002458:	e09d      	b.n	8002596 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d100      	bne.n	8002462 <HAL_RCC_OscConfig+0x5b6>
 8002460:	e076      	b.n	8002550 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	2b02      	cmp	r3, #2
 8002468:	d145      	bne.n	80024f6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b30      	ldr	r3, [pc, #192]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b2f      	ldr	r3, [pc, #188]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002470:	4935      	ldr	r1, [pc, #212]	@ (8002548 <HAL_RCC_OscConfig+0x69c>)
 8002472:	400a      	ands	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fc9f 	bl	8000db8 <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fc9a 	bl	8000db8 <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e082      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002492:	4b26      	ldr	r3, [pc, #152]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	049b      	lsls	r3, r3, #18
 800249a:	4013      	ands	r3, r2
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800249e:	4b23      	ldr	r3, [pc, #140]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	4a2a      	ldr	r2, [pc, #168]	@ (800254c <HAL_RCC_OscConfig+0x6a0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	431a      	orrs	r2, r3
 80024b8:	4b1c      	ldr	r3, [pc, #112]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024be:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b1a      	ldr	r3, [pc, #104]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	0449      	lsls	r1, r1, #17
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe fc74 	bl	8000db8 <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe fc6f 	bl	8000db8 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e057      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024e8:	4b10      	ldr	r3, [pc, #64]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	049b      	lsls	r3, r3, #18
 80024f0:	4013      	ands	r3, r2
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x62a>
 80024f4:	e04f      	b.n	8002596 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 80024fc:	4912      	ldr	r1, [pc, #72]	@ (8002548 <HAL_RCC_OscConfig+0x69c>)
 80024fe:	400a      	ands	r2, r1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fc59 	bl	8000db8 <HAL_GetTick>
 8002506:	0003      	movs	r3, r0
 8002508:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fc54 	bl	8000db8 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e03c      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800251e:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_RCC_OscConfig+0x680>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	049b      	lsls	r3, r3, #18
 8002526:	4013      	ands	r3, r2
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x660>
 800252a:	e034      	b.n	8002596 <HAL_RCC_OscConfig+0x6ea>
 800252c:	40021000 	.word	0x40021000
 8002530:	ffff1fff 	.word	0xffff1fff
 8002534:	fffffeff 	.word	0xfffffeff
 8002538:	40007000 	.word	0x40007000
 800253c:	fffffbff 	.word	0xfffffbff
 8002540:	00001388 	.word	0x00001388
 8002544:	efffffff 	.word	0xefffffff
 8002548:	feffffff 	.word	0xfeffffff
 800254c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e01d      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <HAL_RCC_OscConfig+0x6f4>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	025b      	lsls	r3, r3, #9
 8002568:	401a      	ands	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256e:	429a      	cmp	r2, r3
 8002570:	d10f      	bne.n	8002592 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	23f0      	movs	r3, #240	@ 0xf0
 8002576:	039b      	lsls	r3, r3, #14
 8002578:	401a      	ands	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	23c0      	movs	r3, #192	@ 0xc0
 8002586:	041b      	lsls	r3, r3, #16
 8002588:	401a      	ands	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b00a      	add	sp, #40	@ 0x28
 800259e:	bdb0      	pop	{r4, r5, r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b5b0      	push	{r4, r5, r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e128      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b96      	ldr	r3, [pc, #600]	@ (8002814 <HAL_RCC_ClockConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d91e      	bls.n	8002604 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b93      	ldr	r3, [pc, #588]	@ (8002814 <HAL_RCC_ClockConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4393      	bics	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	4b90      	ldr	r3, [pc, #576]	@ (8002814 <HAL_RCC_ClockConfig+0x270>)
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025d8:	f7fe fbee 	bl	8000db8 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e0:	e009      	b.n	80025f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e2:	f7fe fbe9 	bl	8000db8 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	4a8a      	ldr	r2, [pc, #552]	@ (8002818 <HAL_RCC_ClockConfig+0x274>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e109      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b87      	ldr	r3, [pc, #540]	@ (8002814 <HAL_RCC_ClockConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4013      	ands	r3, r2
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d1ee      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2202      	movs	r2, #2
 800260a:	4013      	ands	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260e:	4b83      	ldr	r3, [pc, #524]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	22f0      	movs	r2, #240	@ 0xf0
 8002614:	4393      	bics	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	4b7f      	ldr	r3, [pc, #508]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 800261e:	430a      	orrs	r2, r1
 8002620:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2201      	movs	r2, #1
 8002628:	4013      	ands	r3, r2
 800262a:	d100      	bne.n	800262e <HAL_RCC_ClockConfig+0x8a>
 800262c:	e089      	b.n	8002742 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002636:	4b79      	ldr	r3, [pc, #484]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	029b      	lsls	r3, r3, #10
 800263e:	4013      	ands	r3, r2
 8002640:	d120      	bne.n	8002684 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0e1      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800264e:	4b73      	ldr	r3, [pc, #460]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	2380      	movs	r3, #128	@ 0x80
 8002654:	049b      	lsls	r3, r3, #18
 8002656:	4013      	ands	r3, r2
 8002658:	d114      	bne.n	8002684 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0d5      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d106      	bne.n	8002674 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002666:	4b6d      	ldr	r3, [pc, #436]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2204      	movs	r2, #4
 800266c:	4013      	ands	r3, r2
 800266e:	d109      	bne.n	8002684 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0ca      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002674:	4b69      	ldr	r3, [pc, #420]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4013      	ands	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0c2      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002684:	4b65      	ldr	r3, [pc, #404]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2203      	movs	r2, #3
 800268a:	4393      	bics	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4b62      	ldr	r3, [pc, #392]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 8002694:	430a      	orrs	r2, r1
 8002696:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7fe fb8e 	bl	8000db8 <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d111      	bne.n	80026cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a8:	e009      	b.n	80026be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026aa:	f7fe fb85 	bl	8000db8 <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	4a58      	ldr	r2, [pc, #352]	@ (8002818 <HAL_RCC_ClockConfig+0x274>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0a5      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026be:	4b57      	ldr	r3, [pc, #348]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	220c      	movs	r2, #12
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d1ef      	bne.n	80026aa <HAL_RCC_ClockConfig+0x106>
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d111      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d4:	e009      	b.n	80026ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d6:	f7fe fb6f 	bl	8000db8 <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002818 <HAL_RCC_ClockConfig+0x274>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e08f      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ea:	4b4c      	ldr	r3, [pc, #304]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	220c      	movs	r2, #12
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d1ef      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x132>
 80026f6:	e024      	b.n	8002742 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d11b      	bne.n	8002738 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002700:	e009      	b.n	8002716 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002702:	f7fe fb59 	bl	8000db8 <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	4a42      	ldr	r2, [pc, #264]	@ (8002818 <HAL_RCC_ClockConfig+0x274>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e079      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002716:	4b41      	ldr	r3, [pc, #260]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	220c      	movs	r2, #12
 800271c:	4013      	ands	r3, r2
 800271e:	2b04      	cmp	r3, #4
 8002720:	d1ef      	bne.n	8002702 <HAL_RCC_ClockConfig+0x15e>
 8002722:	e00e      	b.n	8002742 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe fb48 	bl	8000db8 <HAL_GetTick>
 8002728:	0002      	movs	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	4a3a      	ldr	r2, [pc, #232]	@ (8002818 <HAL_RCC_ClockConfig+0x274>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e068      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002738:	4b38      	ldr	r3, [pc, #224]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	220c      	movs	r2, #12
 800273e:	4013      	ands	r3, r2
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002742:	4b34      	ldr	r3, [pc, #208]	@ (8002814 <HAL_RCC_ClockConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d21e      	bcs.n	800278e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002750:	4b30      	ldr	r3, [pc, #192]	@ (8002814 <HAL_RCC_ClockConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	4393      	bics	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <HAL_RCC_ClockConfig+0x270>)
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002762:	f7fe fb29 	bl	8000db8 <HAL_GetTick>
 8002766:	0003      	movs	r3, r0
 8002768:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	e009      	b.n	8002780 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fe fb24 	bl	8000db8 <HAL_GetTick>
 8002770:	0002      	movs	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	4a28      	ldr	r2, [pc, #160]	@ (8002818 <HAL_RCC_ClockConfig+0x274>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e044      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002780:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <HAL_RCC_ClockConfig+0x270>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d1ee      	bne.n	800276c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2204      	movs	r2, #4
 8002794:	4013      	ands	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002798:	4b20      	ldr	r3, [pc, #128]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a20      	ldr	r2, [pc, #128]	@ (8002820 <HAL_RCC_ClockConfig+0x27c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2208      	movs	r2, #8
 80027b2:	4013      	ands	r3, r2
 80027b4:	d00a      	beq.n	80027cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027b6:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002824 <HAL_RCC_ClockConfig+0x280>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	00da      	lsls	r2, r3, #3
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027cc:	f000 f832 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80027d0:	0001      	movs	r1, r0
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_RCC_ClockConfig+0x278>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	220f      	movs	r2, #15
 80027da:	4013      	ands	r3, r2
 80027dc:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <HAL_RCC_ClockConfig+0x284>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	000a      	movs	r2, r1
 80027e2:	40da      	lsrs	r2, r3
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_RCC_ClockConfig+0x288>)
 80027e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <HAL_RCC_ClockConfig+0x28c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	250b      	movs	r5, #11
 80027ee:	197c      	adds	r4, r7, r5
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fe fa9b 	bl	8000d2c <HAL_InitTick>
 80027f6:	0003      	movs	r3, r0
 80027f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027fa:	197b      	adds	r3, r7, r5
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002802:	197b      	adds	r3, r7, r5
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	e000      	b.n	800280a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bdb0      	pop	{r4, r5, r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	40022000 	.word	0x40022000
 8002818:	00001388 	.word	0x00001388
 800281c:	40021000 	.word	0x40021000
 8002820:	fffff8ff 	.word	0xfffff8ff
 8002824:	ffffc7ff 	.word	0xffffc7ff
 8002828:	08004e54 	.word	0x08004e54
 800282c:	20000000 	.word	0x20000000
 8002830:	20000004 	.word	0x20000004

08002834 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002834:	b5b0      	push	{r4, r5, r7, lr}
 8002836:	b08e      	sub	sp, #56	@ 0x38
 8002838:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800283a:	4b4c      	ldr	r3, [pc, #304]	@ (800296c <HAL_RCC_GetSysClockFreq+0x138>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002842:	230c      	movs	r3, #12
 8002844:	4013      	ands	r3, r2
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d014      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x40>
 800284a:	d900      	bls.n	800284e <HAL_RCC_GetSysClockFreq+0x1a>
 800284c:	e07b      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x112>
 800284e:	2b04      	cmp	r3, #4
 8002850:	d002      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x24>
 8002852:	2b08      	cmp	r3, #8
 8002854:	d00b      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x3a>
 8002856:	e076      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002858:	4b44      	ldr	r3, [pc, #272]	@ (800296c <HAL_RCC_GetSysClockFreq+0x138>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2210      	movs	r2, #16
 800285e:	4013      	ands	r3, r2
 8002860:	d002      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002862:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002864:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002866:	e07c      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002868:	4b42      	ldr	r3, [pc, #264]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x140>)
 800286a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800286c:	e079      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800286e:	4b42      	ldr	r3, [pc, #264]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x144>)
 8002870:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002872:	e076      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002876:	0c9a      	lsrs	r2, r3, #18
 8002878:	230f      	movs	r3, #15
 800287a:	401a      	ands	r2, r3
 800287c:	4b3f      	ldr	r3, [pc, #252]	@ (800297c <HAL_RCC_GetSysClockFreq+0x148>)
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002884:	0d9a      	lsrs	r2, r3, #22
 8002886:	2303      	movs	r3, #3
 8002888:	4013      	ands	r3, r2
 800288a:	3301      	adds	r3, #1
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288e:	4b37      	ldr	r3, [pc, #220]	@ (800296c <HAL_RCC_GetSysClockFreq+0x138>)
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	025b      	lsls	r3, r3, #9
 8002896:	4013      	ands	r3, r2
 8002898:	d01a      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800289a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	4a35      	ldr	r2, [pc, #212]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x144>)
 80028a4:	2300      	movs	r3, #0
 80028a6:	69b8      	ldr	r0, [r7, #24]
 80028a8:	69f9      	ldr	r1, [r7, #28]
 80028aa:	f7fd fce3 	bl	8000274 <__aeabi_lmul>
 80028ae:	0002      	movs	r2, r0
 80028b0:	000b      	movs	r3, r1
 80028b2:	0010      	movs	r0, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f7fd fcb7 	bl	8000234 <__aeabi_uldivmod>
 80028c6:	0002      	movs	r2, r0
 80028c8:	000b      	movs	r3, r1
 80028ca:	0013      	movs	r3, r2
 80028cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80028ce:	e037      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028d0:	4b26      	ldr	r3, [pc, #152]	@ (800296c <HAL_RCC_GetSysClockFreq+0x138>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	4013      	ands	r3, r2
 80028d8:	d01a      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80028da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4a23      	ldr	r2, [pc, #140]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028e4:	2300      	movs	r3, #0
 80028e6:	68b8      	ldr	r0, [r7, #8]
 80028e8:	68f9      	ldr	r1, [r7, #12]
 80028ea:	f7fd fcc3 	bl	8000274 <__aeabi_lmul>
 80028ee:	0002      	movs	r2, r0
 80028f0:	000b      	movs	r3, r1
 80028f2:	0010      	movs	r0, r2
 80028f4:	0019      	movs	r1, r3
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f7fd fc97 	bl	8000234 <__aeabi_uldivmod>
 8002906:	0002      	movs	r2, r0
 8002908:	000b      	movs	r3, r1
 800290a:	0013      	movs	r3, r2
 800290c:	637b      	str	r3, [r7, #52]	@ 0x34
 800290e:	e017      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002912:	0018      	movs	r0, r3
 8002914:	2300      	movs	r3, #0
 8002916:	0019      	movs	r1, r3
 8002918:	4a16      	ldr	r2, [pc, #88]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x140>)
 800291a:	2300      	movs	r3, #0
 800291c:	f7fd fcaa 	bl	8000274 <__aeabi_lmul>
 8002920:	0002      	movs	r2, r0
 8002922:	000b      	movs	r3, r1
 8002924:	0010      	movs	r0, r2
 8002926:	0019      	movs	r1, r3
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	001c      	movs	r4, r3
 800292c:	2300      	movs	r3, #0
 800292e:	001d      	movs	r5, r3
 8002930:	0022      	movs	r2, r4
 8002932:	002b      	movs	r3, r5
 8002934:	f7fd fc7e 	bl	8000234 <__aeabi_uldivmod>
 8002938:	0002      	movs	r2, r0
 800293a:	000b      	movs	r3, r1
 800293c:	0013      	movs	r3, r2
 800293e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002942:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002944:	e00d      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_GetSysClockFreq+0x138>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	0b5b      	lsrs	r3, r3, #13
 800294c:	2207      	movs	r2, #7
 800294e:	4013      	ands	r3, r2
 8002950:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	3301      	adds	r3, #1
 8002956:	2280      	movs	r2, #128	@ 0x80
 8002958:	0212      	lsls	r2, r2, #8
 800295a:	409a      	lsls	r2, r3
 800295c:	0013      	movs	r3, r2
 800295e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002960:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b00e      	add	sp, #56	@ 0x38
 800296a:	bdb0      	pop	{r4, r5, r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	003d0900 	.word	0x003d0900
 8002974:	00f42400 	.word	0x00f42400
 8002978:	007a1200 	.word	0x007a1200
 800297c:	08004e6c 	.word	0x08004e6c

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b02      	ldr	r3, [pc, #8]	@ (8002990 <HAL_RCC_GetHCLKFreq+0x10>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	20000000 	.word	0x20000000

08002994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002998:	f7ff fff2 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 800299c:	0001      	movs	r1, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	2207      	movs	r2, #7
 80029a6:	4013      	ands	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	@ (80029bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	40d9      	lsrs	r1, r3
 80029ae:	000b      	movs	r3, r1
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08004e64 	.word	0x08004e64

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffdc 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029c8:	0001      	movs	r1, r0
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	0adb      	lsrs	r3, r3, #11
 80029d0:	2207      	movs	r2, #7
 80029d2:	4013      	ands	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029d6:	5cd3      	ldrb	r3, [r2, r3]
 80029d8:	40d9      	lsrs	r1, r3
 80029da:	000b      	movs	r3, r1
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08004e64 	.word	0x08004e64

080029ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80029f4:	2017      	movs	r0, #23
 80029f6:	183b      	adds	r3, r7, r0
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2220      	movs	r2, #32
 8002a02:	4013      	ands	r3, r2
 8002a04:	d100      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002a06:	e0c7      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a08:	4b84      	ldr	r3, [pc, #528]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a0c:	2380      	movs	r3, #128	@ 0x80
 8002a0e:	055b      	lsls	r3, r3, #21
 8002a10:	4013      	ands	r3, r2
 8002a12:	d109      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	4b81      	ldr	r3, [pc, #516]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a18:	4b80      	ldr	r3, [pc, #512]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a1a:	2180      	movs	r1, #128	@ 0x80
 8002a1c:	0549      	lsls	r1, r1, #21
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002a22:	183b      	adds	r3, r7, r0
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b7d      	ldr	r3, [pc, #500]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	d11a      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a34:	4b7a      	ldr	r3, [pc, #488]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b79      	ldr	r3, [pc, #484]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a3a:	2180      	movs	r1, #128	@ 0x80
 8002a3c:	0049      	lsls	r1, r1, #1
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7fe f9b9 	bl	8000db8 <HAL_GetTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	e008      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fe f9b4 	bl	8000db8 <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0d9      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b70      	ldr	r3, [pc, #448]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	@ 0x80
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4013      	ands	r3, r2
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	23c0      	movs	r3, #192	@ 0xc0
 8002a70:	039b      	lsls	r3, r3, #14
 8002a72:	4013      	ands	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	23c0      	movs	r3, #192	@ 0xc0
 8002a7c:	039b      	lsls	r3, r3, #14
 8002a7e:	4013      	ands	r3, r2
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d013      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	23c0      	movs	r3, #192	@ 0xc0
 8002a8c:	029b      	lsls	r3, r3, #10
 8002a8e:	401a      	ands	r2, r3
 8002a90:	23c0      	movs	r3, #192	@ 0xc0
 8002a92:	029b      	lsls	r3, r3, #10
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d10a      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a98:	4b60      	ldr	r3, [pc, #384]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	029b      	lsls	r3, r3, #10
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	029b      	lsls	r3, r3, #10
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d101      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0b1      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002aae:	4b5b      	ldr	r3, [pc, #364]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ab0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ab2:	23c0      	movs	r3, #192	@ 0xc0
 8002ab4:	029b      	lsls	r3, r3, #10
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d03b      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	23c0      	movs	r3, #192	@ 0xc0
 8002ac6:	029b      	lsls	r3, r3, #10
 8002ac8:	4013      	ands	r3, r2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d033      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d02e      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ada:	4b50      	ldr	r3, [pc, #320]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ade:	4a51      	ldr	r2, [pc, #324]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002aea:	2180      	movs	r1, #128	@ 0x80
 8002aec:	0309      	lsls	r1, r1, #12
 8002aee:	430a      	orrs	r2, r1
 8002af0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002af2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002af4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002af6:	4b49      	ldr	r3, [pc, #292]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002af8:	494b      	ldr	r1, [pc, #300]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002afe:	4b47      	ldr	r3, [pc, #284]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d014      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe f953 	bl	8000db8 <HAL_GetTick>
 8002b12:	0003      	movs	r3, r0
 8002b14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b16:	e009      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe f94e 	bl	8000db8 <HAL_GetTick>
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	4a42      	ldr	r2, [pc, #264]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e072      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4013      	ands	r3, r2
 8002b36:	d0ef      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d01f      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	23c0      	movs	r3, #192	@ 0xc0
 8002b48:	029b      	lsls	r3, r3, #10
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	23c0      	movs	r3, #192	@ 0xc0
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002b54:	4b31      	ldr	r3, [pc, #196]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a35      	ldr	r2, [pc, #212]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	23c0      	movs	r3, #192	@ 0xc0
 8002b64:	039b      	lsls	r3, r3, #14
 8002b66:	401a      	ands	r2, r3
 8002b68:	4b2c      	ldr	r3, [pc, #176]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	23c0      	movs	r3, #192	@ 0xc0
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	4b27      	ldr	r3, [pc, #156]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b82:	2317      	movs	r3, #23
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b90:	4b22      	ldr	r3, [pc, #136]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b92:	4928      	ldr	r1, [pc, #160]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	4393      	bics	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc0:	4b16      	ldr	r3, [pc, #88]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bde:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2280      	movs	r2, #128	@ 0x80
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002bfc:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c00:	4a0f      	ldr	r2, [pc, #60]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b006      	add	sp, #24
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40007000 	.word	0x40007000
 8002c24:	fffcffff 	.word	0xfffcffff
 8002c28:	fff7ffff 	.word	0xfff7ffff
 8002c2c:	00001388 	.word	0x00001388
 8002c30:	ffcfffff 	.word	0xffcfffff
 8002c34:	efffffff 	.word	0xefffffff
 8002c38:	fffff3ff 	.word	0xfffff3ff
 8002c3c:	ffffcfff 	.word	0xffffcfff
 8002c40:	fff3ffff 	.word	0xfff3ffff

08002c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e032      	b.n	8002cbc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2239      	movs	r2, #57	@ 0x39
 8002c5a:	5c9b      	ldrb	r3, [r3, r2]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2238      	movs	r2, #56	@ 0x38
 8002c66:	2100      	movs	r1, #0
 8002c68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7fd fe5b 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2239      	movs	r2, #57	@ 0x39
 8002c76:	2102      	movs	r1, #2
 8002c78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f000 fa45 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223e      	movs	r2, #62	@ 0x3e
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	223a      	movs	r2, #58	@ 0x3a
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	223b      	movs	r2, #59	@ 0x3b
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	223c      	movs	r2, #60	@ 0x3c
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	223d      	movs	r2, #61	@ 0x3d
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2239      	movs	r2, #57	@ 0x39
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2239      	movs	r2, #57	@ 0x39
 8002cd0:	5c9b      	ldrb	r3, [r3, r2]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d001      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e036      	b.n	8002d4a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2239      	movs	r2, #57	@ 0x39
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	@ 0x80
 8002cfa:	05db      	lsls	r3, r3, #23
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d009      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0x50>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <HAL_TIM_Base_Start_IT+0x90>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0x50>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <HAL_TIM_Base_Start_IT+0x94>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d111      	bne.n	8002d38 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d010      	beq.n	8002d48 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d36:	e007      	b.n	8002d48 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b004      	add	sp, #16
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	40010800 	.word	0x40010800
 8002d58:	40011400 	.word	0x40011400

08002d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d124      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d11d      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2203      	movs	r2, #3
 8002d86:	4252      	negs	r2, r2
 8002d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2203      	movs	r2, #3
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 f9a0 	bl	80030e4 <HAL_TIM_IC_CaptureCallback>
 8002da4:	e007      	b.n	8002db6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 f993 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 f99f 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d125      	bne.n	8002e16 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d11e      	bne.n	8002e16 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2205      	movs	r2, #5
 8002dde:	4252      	negs	r2, r2
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	23c0      	movs	r3, #192	@ 0xc0
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4013      	ands	r3, r2
 8002df4:	d004      	beq.n	8002e00 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 f973 	bl	80030e4 <HAL_TIM_IC_CaptureCallback>
 8002dfe:	e007      	b.n	8002e10 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 f966 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 f972 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d124      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d11d      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2209      	movs	r2, #9
 8002e38:	4252      	negs	r2, r2
 8002e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2204      	movs	r2, #4
 8002e40:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	2203      	movs	r2, #3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 f947 	bl	80030e4 <HAL_TIM_IC_CaptureCallback>
 8002e56:	e007      	b.n	8002e68 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 f93a 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 f946 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2210      	movs	r2, #16
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d125      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2210      	movs	r2, #16
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d11e      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2211      	movs	r2, #17
 8002e90:	4252      	negs	r2, r2
 8002e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2208      	movs	r2, #8
 8002e98:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	23c0      	movs	r3, #192	@ 0xc0
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 f91a 	bl	80030e4 <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e007      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 f90d 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 f919 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4252      	negs	r2, r2
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fd faf7 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2240      	movs	r2, #64	@ 0x40
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b40      	cmp	r3, #64	@ 0x40
 8002f02:	d10f      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2240      	movs	r2, #64	@ 0x40
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b40      	cmp	r3, #64	@ 0x40
 8002f10:	d108      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2241      	movs	r2, #65	@ 0x41
 8002f18:	4252      	negs	r2, r2
 8002f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 f8f0 	bl	8003104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f24:	46c0      	nop			@ (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f36:	230f      	movs	r3, #15
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2238      	movs	r2, #56	@ 0x38
 8002f42:	5c9b      	ldrb	r3, [r3, r2]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_TIM_ConfigClockSource+0x20>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e0bc      	b.n	80030c6 <HAL_TIM_ConfigClockSource+0x19a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2238      	movs	r2, #56	@ 0x38
 8002f50:	2101      	movs	r1, #1
 8002f52:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2239      	movs	r2, #57	@ 0x39
 8002f58:	2102      	movs	r1, #2
 8002f5a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2277      	movs	r2, #119	@ 0x77
 8002f68:	4393      	bics	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4a58      	ldr	r2, [pc, #352]	@ (80030d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2280      	movs	r2, #128	@ 0x80
 8002f82:	0192      	lsls	r2, r2, #6
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d040      	beq.n	800300a <HAL_TIM_ConfigClockSource+0xde>
 8002f88:	2280      	movs	r2, #128	@ 0x80
 8002f8a:	0192      	lsls	r2, r2, #6
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d900      	bls.n	8002f92 <HAL_TIM_ConfigClockSource+0x66>
 8002f90:	e088      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x178>
 8002f92:	2280      	movs	r2, #128	@ 0x80
 8002f94:	0152      	lsls	r2, r2, #5
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d100      	bne.n	8002f9c <HAL_TIM_ConfigClockSource+0x70>
 8002f9a:	e088      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x182>
 8002f9c:	2280      	movs	r2, #128	@ 0x80
 8002f9e:	0152      	lsls	r2, r2, #5
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d900      	bls.n	8002fa6 <HAL_TIM_ConfigClockSource+0x7a>
 8002fa4:	e07e      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x178>
 8002fa6:	2b70      	cmp	r3, #112	@ 0x70
 8002fa8:	d018      	beq.n	8002fdc <HAL_TIM_ConfigClockSource+0xb0>
 8002faa:	d900      	bls.n	8002fae <HAL_TIM_ConfigClockSource+0x82>
 8002fac:	e07a      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x178>
 8002fae:	2b60      	cmp	r3, #96	@ 0x60
 8002fb0:	d04f      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x126>
 8002fb2:	d900      	bls.n	8002fb6 <HAL_TIM_ConfigClockSource+0x8a>
 8002fb4:	e076      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x178>
 8002fb6:	2b50      	cmp	r3, #80	@ 0x50
 8002fb8:	d03b      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0x106>
 8002fba:	d900      	bls.n	8002fbe <HAL_TIM_ConfigClockSource+0x92>
 8002fbc:	e072      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x178>
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	d057      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x146>
 8002fc2:	d900      	bls.n	8002fc6 <HAL_TIM_ConfigClockSource+0x9a>
 8002fc4:	e06e      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x178>
 8002fc6:	2b30      	cmp	r3, #48	@ 0x30
 8002fc8:	d063      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x166>
 8002fca:	d86b      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0x178>
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d060      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x166>
 8002fd0:	d868      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0x178>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d05d      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x166>
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d05b      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x166>
 8002fda:	e063      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fec:	f000 f960 	bl	80032b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2277      	movs	r2, #119	@ 0x77
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	609a      	str	r2, [r3, #8]
      break;
 8003008:	e052      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800301a:	f000 f949 	bl	80032b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2180      	movs	r1, #128	@ 0x80
 800302a:	01c9      	lsls	r1, r1, #7
 800302c:	430a      	orrs	r2, r1
 800302e:	609a      	str	r2, [r3, #8]
      break;
 8003030:	e03e      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303e:	001a      	movs	r2, r3
 8003040:	f000 f8bc 	bl	80031bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2150      	movs	r1, #80	@ 0x50
 800304a:	0018      	movs	r0, r3
 800304c:	f000 f916 	bl	800327c <TIM_ITRx_SetConfig>
      break;
 8003050:	e02e      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800305e:	001a      	movs	r2, r3
 8003060:	f000 f8da 	bl	8003218 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2160      	movs	r1, #96	@ 0x60
 800306a:	0018      	movs	r0, r3
 800306c:	f000 f906 	bl	800327c <TIM_ITRx_SetConfig>
      break;
 8003070:	e01e      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	001a      	movs	r2, r3
 8003080:	f000 f89c 	bl	80031bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2140      	movs	r1, #64	@ 0x40
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f8f6 	bl	800327c <TIM_ITRx_SetConfig>
      break;
 8003090:	e00e      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f000 f8ed 	bl	800327c <TIM_ITRx_SetConfig>
      break;
 80030a2:	e005      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030a4:	230f      	movs	r3, #15
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
      break;
 80030ac:	e000      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80030ae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2239      	movs	r2, #57	@ 0x39
 80030b4:	2101      	movs	r1, #1
 80030b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2238      	movs	r2, #56	@ 0x38
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]

  return status;
 80030c0:	230f      	movs	r3, #15
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	781b      	ldrb	r3, [r3, #0]
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b004      	add	sp, #16
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	ffff00ff 	.word	0xffff00ff

080030d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ec:	46c0      	nop			@ (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800310c:	46c0      	nop			@ (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	05db      	lsls	r3, r3, #23
 800312a:	429a      	cmp	r2, r3
 800312c:	d007      	beq.n	800313e <TIM_Base_SetConfig+0x2a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1f      	ldr	r2, [pc, #124]	@ (80031b0 <TIM_Base_SetConfig+0x9c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <TIM_Base_SetConfig+0x2a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1e      	ldr	r2, [pc, #120]	@ (80031b4 <TIM_Base_SetConfig+0xa0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d108      	bne.n	8003150 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2270      	movs	r2, #112	@ 0x70
 8003142:	4393      	bics	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	05db      	lsls	r3, r3, #23
 8003156:	429a      	cmp	r2, r3
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0x56>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a14      	ldr	r2, [pc, #80]	@ (80031b0 <TIM_Base_SetConfig+0x9c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0x56>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a13      	ldr	r2, [pc, #76]	@ (80031b4 <TIM_Base_SetConfig+0xa0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <TIM_Base_SetConfig+0xa4>)
 800316e:	4013      	ands	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2280      	movs	r2, #128	@ 0x80
 8003180:	4393      	bics	r3, r2
 8003182:	001a      	movs	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	615a      	str	r2, [r3, #20]
}
 80031a8:	46c0      	nop			@ (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b004      	add	sp, #16
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40010800 	.word	0x40010800
 80031b4:	40011400 	.word	0x40011400
 80031b8:	fffffcff 	.word	0xfffffcff

080031bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	2201      	movs	r2, #1
 80031d4:	4393      	bics	r3, r2
 80031d6:	001a      	movs	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	22f0      	movs	r2, #240	@ 0xf0
 80031e6:	4393      	bics	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	220a      	movs	r2, #10
 80031f8:	4393      	bics	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	46c0      	nop			@ (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b006      	add	sp, #24
 8003216:	bd80      	pop	{r7, pc}

08003218 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	2210      	movs	r2, #16
 800322a:	4393      	bics	r3, r2
 800322c:	001a      	movs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	4a0d      	ldr	r2, [pc, #52]	@ (8003278 <TIM_TI2_ConfigInputStage+0x60>)
 8003242:	4013      	ands	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	031b      	lsls	r3, r3, #12
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	22a0      	movs	r2, #160	@ 0xa0
 8003254:	4393      	bics	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b006      	add	sp, #24
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	ffff0fff 	.word	0xffff0fff

0800327c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2270      	movs	r2, #112	@ 0x70
 8003290:	4393      	bics	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	2207      	movs	r2, #7
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	609a      	str	r2, [r3, #8]
}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b004      	add	sp, #16
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4a09      	ldr	r2, [pc, #36]	@ (80032ec <TIM_ETR_SetConfig+0x3c>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	021a      	lsls	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b006      	add	sp, #24
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	ffff00ff 	.word	0xffff00ff

080032f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2238      	movs	r2, #56	@ 0x38
 80032fe:	5c9b      	ldrb	r3, [r3, r2]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003304:	2302      	movs	r3, #2
 8003306:	e042      	b.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2238      	movs	r2, #56	@ 0x38
 800330c:	2101      	movs	r1, #1
 800330e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2239      	movs	r2, #57	@ 0x39
 8003314:	2102      	movs	r1, #2
 8003316:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2270      	movs	r2, #112	@ 0x70
 800332c:	4393      	bics	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	2380      	movs	r3, #128	@ 0x80
 8003348:	05db      	lsls	r3, r3, #23
 800334a:	429a      	cmp	r2, r3
 800334c:	d009      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a11      	ldr	r2, [pc, #68]	@ (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0f      	ldr	r2, [pc, #60]	@ (800339c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10c      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2280      	movs	r2, #128	@ 0x80
 8003366:	4393      	bics	r3, r2
 8003368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4313      	orrs	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2239      	movs	r2, #57	@ 0x39
 8003380:	2101      	movs	r1, #1
 8003382:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2238      	movs	r2, #56	@ 0x38
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	40010800 	.word	0x40010800
 800339c:	40011400 	.word	0x40011400

080033a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e044      	b.n	800343c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d107      	bne.n	80033ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2278      	movs	r2, #120	@ 0x78
 80033be:	2100      	movs	r1, #0
 80033c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fd facd 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2224      	movs	r2, #36	@ 0x24
 80033ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2101      	movs	r1, #1
 80033dc:	438a      	bics	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f000 f8d0 	bl	8003588 <UART_SetConfig>
 80033e8:	0003      	movs	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e024      	b.n	800343c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 fb0d 	bl	8003a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	490d      	ldr	r1, [pc, #52]	@ (8003444 <HAL_UART_Init+0xa4>)
 800340e:	400a      	ands	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	212a      	movs	r1, #42	@ 0x2a
 800341e:	438a      	bics	r2, r1
 8003420:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0018      	movs	r0, r3
 8003436:	f000 fba5 	bl	8003b84 <UART_CheckIdleState>
 800343a:	0003      	movs	r3, r0
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}
 8003444:	ffffb7ff 	.word	0xffffb7ff

08003448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	@ 0x28
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	1dbb      	adds	r3, r7, #6
 8003456:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800345c:	2b20      	cmp	r3, #32
 800345e:	d000      	beq.n	8003462 <HAL_UART_Transmit+0x1a>
 8003460:	e08c      	b.n	800357c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_UART_Transmit+0x28>
 8003468:	1dbb      	adds	r3, r7, #6
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e084      	b.n	800357e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	2380      	movs	r3, #128	@ 0x80
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	429a      	cmp	r2, r3
 800347e:	d109      	bne.n	8003494 <HAL_UART_Transmit+0x4c>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2201      	movs	r2, #1
 800348c:	4013      	ands	r3, r2
 800348e:	d001      	beq.n	8003494 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e074      	b.n	800357e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2284      	movs	r2, #132	@ 0x84
 8003498:	2100      	movs	r1, #0
 800349a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2221      	movs	r2, #33	@ 0x21
 80034a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034a2:	f7fd fc89 	bl	8000db8 <HAL_GetTick>
 80034a6:	0003      	movs	r3, r0
 80034a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1dba      	adds	r2, r7, #6
 80034ae:	2150      	movs	r1, #80	@ 0x50
 80034b0:	8812      	ldrh	r2, [r2, #0]
 80034b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1dba      	adds	r2, r7, #6
 80034b8:	2152      	movs	r1, #82	@ 0x52
 80034ba:	8812      	ldrh	r2, [r2, #0]
 80034bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	015b      	lsls	r3, r3, #5
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d108      	bne.n	80034dc <HAL_UART_Transmit+0x94>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e003      	b.n	80034e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034e4:	e02f      	b.n	8003546 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	0013      	movs	r3, r2
 80034f0:	2200      	movs	r2, #0
 80034f2:	2180      	movs	r1, #128	@ 0x80
 80034f4:	f000 fbee 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 80034f8:	1e03      	subs	r3, r0, #0
 80034fa:	d004      	beq.n	8003506 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e03b      	b.n	800357e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	001a      	movs	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	05d2      	lsls	r2, r2, #23
 8003518:	0dd2      	lsrs	r2, r2, #23
 800351a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	3302      	adds	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e007      	b.n	8003534 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2252      	movs	r2, #82	@ 0x52
 8003538:	5a9b      	ldrh	r3, [r3, r2]
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b299      	uxth	r1, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2252      	movs	r2, #82	@ 0x52
 8003544:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2252      	movs	r2, #82	@ 0x52
 800354a:	5a9b      	ldrh	r3, [r3, r2]
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1c9      	bne.n	80034e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	0013      	movs	r3, r2
 800355c:	2200      	movs	r2, #0
 800355e:	2140      	movs	r1, #64	@ 0x40
 8003560:	f000 fbb8 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 8003564:	1e03      	subs	r3, r0, #0
 8003566:	d004      	beq.n	8003572 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e005      	b.n	800357e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
  }
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b008      	add	sp, #32
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003588:	b5b0      	push	{r4, r5, r7, lr}
 800358a:	b08e      	sub	sp, #56	@ 0x38
 800358c:	af00      	add	r7, sp, #0
 800358e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003590:	231a      	movs	r3, #26
 8003592:	2218      	movs	r2, #24
 8003594:	189b      	adds	r3, r3, r2
 8003596:	19db      	adds	r3, r3, r7
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4ab4      	ldr	r2, [pc, #720]	@ (800388c <UART_SetConfig+0x304>)
 80035bc:	4013      	ands	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4aaf      	ldr	r2, [pc, #700]	@ (8003890 <UART_SetConfig+0x308>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	0019      	movs	r1, r3
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4aa9      	ldr	r2, [pc, #676]	@ (8003894 <UART_SetConfig+0x30c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035f8:	4313      	orrs	r3, r2
 80035fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4aa5      	ldr	r2, [pc, #660]	@ (8003898 <UART_SetConfig+0x310>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4aa1      	ldr	r2, [pc, #644]	@ (800389c <UART_SetConfig+0x314>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d131      	bne.n	8003680 <UART_SetConfig+0xf8>
 800361c:	4ba0      	ldr	r3, [pc, #640]	@ (80038a0 <UART_SetConfig+0x318>)
 800361e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003620:	220c      	movs	r2, #12
 8003622:	4013      	ands	r3, r2
 8003624:	2b0c      	cmp	r3, #12
 8003626:	d01d      	beq.n	8003664 <UART_SetConfig+0xdc>
 8003628:	d823      	bhi.n	8003672 <UART_SetConfig+0xea>
 800362a:	2b08      	cmp	r3, #8
 800362c:	d00c      	beq.n	8003648 <UART_SetConfig+0xc0>
 800362e:	d820      	bhi.n	8003672 <UART_SetConfig+0xea>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <UART_SetConfig+0xb2>
 8003634:	2b04      	cmp	r3, #4
 8003636:	d00e      	beq.n	8003656 <UART_SetConfig+0xce>
 8003638:	e01b      	b.n	8003672 <UART_SetConfig+0xea>
 800363a:	231b      	movs	r3, #27
 800363c:	2218      	movs	r2, #24
 800363e:	189b      	adds	r3, r3, r2
 8003640:	19db      	adds	r3, r3, r7
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e065      	b.n	8003714 <UART_SetConfig+0x18c>
 8003648:	231b      	movs	r3, #27
 800364a:	2218      	movs	r2, #24
 800364c:	189b      	adds	r3, r3, r2
 800364e:	19db      	adds	r3, r3, r7
 8003650:	2202      	movs	r2, #2
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e05e      	b.n	8003714 <UART_SetConfig+0x18c>
 8003656:	231b      	movs	r3, #27
 8003658:	2218      	movs	r2, #24
 800365a:	189b      	adds	r3, r3, r2
 800365c:	19db      	adds	r3, r3, r7
 800365e:	2204      	movs	r2, #4
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	e057      	b.n	8003714 <UART_SetConfig+0x18c>
 8003664:	231b      	movs	r3, #27
 8003666:	2218      	movs	r2, #24
 8003668:	189b      	adds	r3, r3, r2
 800366a:	19db      	adds	r3, r3, r7
 800366c:	2208      	movs	r2, #8
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e050      	b.n	8003714 <UART_SetConfig+0x18c>
 8003672:	231b      	movs	r3, #27
 8003674:	2218      	movs	r2, #24
 8003676:	189b      	adds	r3, r3, r2
 8003678:	19db      	adds	r3, r3, r7
 800367a:	2210      	movs	r2, #16
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	e049      	b.n	8003714 <UART_SetConfig+0x18c>
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a83      	ldr	r2, [pc, #524]	@ (8003894 <UART_SetConfig+0x30c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d13e      	bne.n	8003708 <UART_SetConfig+0x180>
 800368a:	4b85      	ldr	r3, [pc, #532]	@ (80038a0 <UART_SetConfig+0x318>)
 800368c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800368e:	23c0      	movs	r3, #192	@ 0xc0
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	4013      	ands	r3, r2
 8003694:	22c0      	movs	r2, #192	@ 0xc0
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	4293      	cmp	r3, r2
 800369a:	d027      	beq.n	80036ec <UART_SetConfig+0x164>
 800369c:	22c0      	movs	r2, #192	@ 0xc0
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d82a      	bhi.n	80036fa <UART_SetConfig+0x172>
 80036a4:	2280      	movs	r2, #128	@ 0x80
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d011      	beq.n	80036d0 <UART_SetConfig+0x148>
 80036ac:	2280      	movs	r2, #128	@ 0x80
 80036ae:	0112      	lsls	r2, r2, #4
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d822      	bhi.n	80036fa <UART_SetConfig+0x172>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d004      	beq.n	80036c2 <UART_SetConfig+0x13a>
 80036b8:	2280      	movs	r2, #128	@ 0x80
 80036ba:	00d2      	lsls	r2, r2, #3
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <UART_SetConfig+0x156>
 80036c0:	e01b      	b.n	80036fa <UART_SetConfig+0x172>
 80036c2:	231b      	movs	r3, #27
 80036c4:	2218      	movs	r2, #24
 80036c6:	189b      	adds	r3, r3, r2
 80036c8:	19db      	adds	r3, r3, r7
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	e021      	b.n	8003714 <UART_SetConfig+0x18c>
 80036d0:	231b      	movs	r3, #27
 80036d2:	2218      	movs	r2, #24
 80036d4:	189b      	adds	r3, r3, r2
 80036d6:	19db      	adds	r3, r3, r7
 80036d8:	2202      	movs	r2, #2
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e01a      	b.n	8003714 <UART_SetConfig+0x18c>
 80036de:	231b      	movs	r3, #27
 80036e0:	2218      	movs	r2, #24
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	19db      	adds	r3, r3, r7
 80036e6:	2204      	movs	r2, #4
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e013      	b.n	8003714 <UART_SetConfig+0x18c>
 80036ec:	231b      	movs	r3, #27
 80036ee:	2218      	movs	r2, #24
 80036f0:	189b      	adds	r3, r3, r2
 80036f2:	19db      	adds	r3, r3, r7
 80036f4:	2208      	movs	r2, #8
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e00c      	b.n	8003714 <UART_SetConfig+0x18c>
 80036fa:	231b      	movs	r3, #27
 80036fc:	2218      	movs	r2, #24
 80036fe:	189b      	adds	r3, r3, r2
 8003700:	19db      	adds	r3, r3, r7
 8003702:	2210      	movs	r2, #16
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e005      	b.n	8003714 <UART_SetConfig+0x18c>
 8003708:	231b      	movs	r3, #27
 800370a:	2218      	movs	r2, #24
 800370c:	189b      	adds	r3, r3, r2
 800370e:	19db      	adds	r3, r3, r7
 8003710:	2210      	movs	r2, #16
 8003712:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a5e      	ldr	r2, [pc, #376]	@ (8003894 <UART_SetConfig+0x30c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d000      	beq.n	8003720 <UART_SetConfig+0x198>
 800371e:	e084      	b.n	800382a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003720:	231b      	movs	r3, #27
 8003722:	2218      	movs	r2, #24
 8003724:	189b      	adds	r3, r3, r2
 8003726:	19db      	adds	r3, r3, r7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b08      	cmp	r3, #8
 800372c:	d01d      	beq.n	800376a <UART_SetConfig+0x1e2>
 800372e:	dc20      	bgt.n	8003772 <UART_SetConfig+0x1ea>
 8003730:	2b04      	cmp	r3, #4
 8003732:	d015      	beq.n	8003760 <UART_SetConfig+0x1d8>
 8003734:	dc1d      	bgt.n	8003772 <UART_SetConfig+0x1ea>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <UART_SetConfig+0x1b8>
 800373a:	2b02      	cmp	r3, #2
 800373c:	d005      	beq.n	800374a <UART_SetConfig+0x1c2>
 800373e:	e018      	b.n	8003772 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003740:	f7ff f928 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8003744:	0003      	movs	r3, r0
 8003746:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003748:	e01c      	b.n	8003784 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800374a:	4b55      	ldr	r3, [pc, #340]	@ (80038a0 <UART_SetConfig+0x318>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2210      	movs	r2, #16
 8003750:	4013      	ands	r3, r2
 8003752:	d002      	beq.n	800375a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003754:	4b53      	ldr	r3, [pc, #332]	@ (80038a4 <UART_SetConfig+0x31c>)
 8003756:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003758:	e014      	b.n	8003784 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800375a:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <UART_SetConfig+0x320>)
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800375e:	e011      	b.n	8003784 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003760:	f7ff f868 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8003764:	0003      	movs	r3, r0
 8003766:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003768:	e00c      	b.n	8003784 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003770:	e008      	b.n	8003784 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003776:	231a      	movs	r3, #26
 8003778:	2218      	movs	r2, #24
 800377a:	189b      	adds	r3, r3, r2
 800377c:	19db      	adds	r3, r3, r7
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
        break;
 8003782:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d100      	bne.n	800378c <UART_SetConfig+0x204>
 800378a:	e12f      	b.n	80039ec <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	0013      	movs	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	189b      	adds	r3, r3, r2
 8003796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003798:	429a      	cmp	r2, r3
 800379a:	d305      	bcc.n	80037a8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d906      	bls.n	80037b6 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80037a8:	231a      	movs	r3, #26
 80037aa:	2218      	movs	r2, #24
 80037ac:	189b      	adds	r3, r3, r2
 80037ae:	19db      	adds	r3, r3, r7
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e11a      	b.n	80039ec <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	6939      	ldr	r1, [r7, #16]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	000b      	movs	r3, r1
 80037c4:	0e1b      	lsrs	r3, r3, #24
 80037c6:	0010      	movs	r0, r2
 80037c8:	0205      	lsls	r5, r0, #8
 80037ca:	431d      	orrs	r5, r3
 80037cc:	000b      	movs	r3, r1
 80037ce:	021c      	lsls	r4, r3, #8
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68b8      	ldr	r0, [r7, #8]
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	1900      	adds	r0, r0, r4
 80037e2:	4169      	adcs	r1, r5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f7fc fd1f 	bl	8000234 <__aeabi_uldivmod>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0013      	movs	r3, r2
 80037fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003800:	23c0      	movs	r3, #192	@ 0xc0
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d309      	bcc.n	800381c <UART_SetConfig+0x294>
 8003808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800380a:	2380      	movs	r3, #128	@ 0x80
 800380c:	035b      	lsls	r3, r3, #13
 800380e:	429a      	cmp	r2, r3
 8003810:	d204      	bcs.n	800381c <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	e0e7      	b.n	80039ec <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 800381c:	231a      	movs	r3, #26
 800381e:	2218      	movs	r2, #24
 8003820:	189b      	adds	r3, r3, r2
 8003822:	19db      	adds	r3, r3, r7
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e0e0      	b.n	80039ec <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	2380      	movs	r3, #128	@ 0x80
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	429a      	cmp	r2, r3
 8003834:	d000      	beq.n	8003838 <UART_SetConfig+0x2b0>
 8003836:	e082      	b.n	800393e <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003838:	231b      	movs	r3, #27
 800383a:	2218      	movs	r2, #24
 800383c:	189b      	adds	r3, r3, r2
 800383e:	19db      	adds	r3, r3, r7
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b08      	cmp	r3, #8
 8003844:	d834      	bhi.n	80038b0 <UART_SetConfig+0x328>
 8003846:	009a      	lsls	r2, r3, #2
 8003848:	4b18      	ldr	r3, [pc, #96]	@ (80038ac <UART_SetConfig+0x324>)
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003850:	f7ff f8a0 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8003854:	0003      	movs	r3, r0
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003858:	e033      	b.n	80038c2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800385a:	f7ff f8b1 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 800385e:	0003      	movs	r3, r0
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003862:	e02e      	b.n	80038c2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003864:	4b0e      	ldr	r3, [pc, #56]	@ (80038a0 <UART_SetConfig+0x318>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2210      	movs	r2, #16
 800386a:	4013      	ands	r3, r2
 800386c:	d002      	beq.n	8003874 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800386e:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <UART_SetConfig+0x31c>)
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003872:	e026      	b.n	80038c2 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <UART_SetConfig+0x320>)
 8003876:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003878:	e023      	b.n	80038c2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387a:	f7fe ffdb 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 800387e:	0003      	movs	r3, r0
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003882:	e01e      	b.n	80038c2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800388a:	e01a      	b.n	80038c2 <UART_SetConfig+0x33a>
 800388c:	efff69f3 	.word	0xefff69f3
 8003890:	ffffcfff 	.word	0xffffcfff
 8003894:	40004800 	.word	0x40004800
 8003898:	fffff4ff 	.word	0xfffff4ff
 800389c:	40004400 	.word	0x40004400
 80038a0:	40021000 	.word	0x40021000
 80038a4:	003d0900 	.word	0x003d0900
 80038a8:	00f42400 	.word	0x00f42400
 80038ac:	08004e78 	.word	0x08004e78
      default:
        pclk = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80038b4:	231a      	movs	r3, #26
 80038b6:	2218      	movs	r2, #24
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	19db      	adds	r3, r3, r7
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
        break;
 80038c0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d100      	bne.n	80038ca <UART_SetConfig+0x342>
 80038c8:	e090      	b.n	80039ec <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038cc:	005a      	lsls	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	18d2      	adds	r2, r2, r3
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	0019      	movs	r1, r3
 80038dc:	0010      	movs	r0, r2
 80038de:	f7fc fc1d 	bl	800011c <__udivsi3>
 80038e2:	0003      	movs	r3, r0
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e8:	2b0f      	cmp	r3, #15
 80038ea:	d921      	bls.n	8003930 <UART_SetConfig+0x3a8>
 80038ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038ee:	2380      	movs	r3, #128	@ 0x80
 80038f0:	025b      	lsls	r3, r3, #9
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d21c      	bcs.n	8003930 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	200e      	movs	r0, #14
 80038fc:	2418      	movs	r4, #24
 80038fe:	1903      	adds	r3, r0, r4
 8003900:	19db      	adds	r3, r3, r7
 8003902:	210f      	movs	r1, #15
 8003904:	438a      	bics	r2, r1
 8003906:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	b29b      	uxth	r3, r3
 800390e:	2207      	movs	r2, #7
 8003910:	4013      	ands	r3, r2
 8003912:	b299      	uxth	r1, r3
 8003914:	1903      	adds	r3, r0, r4
 8003916:	19db      	adds	r3, r3, r7
 8003918:	1902      	adds	r2, r0, r4
 800391a:	19d2      	adds	r2, r2, r7
 800391c:	8812      	ldrh	r2, [r2, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	1902      	adds	r2, r0, r4
 8003928:	19d2      	adds	r2, r2, r7
 800392a:	8812      	ldrh	r2, [r2, #0]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	e05d      	b.n	80039ec <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003930:	231a      	movs	r3, #26
 8003932:	2218      	movs	r2, #24
 8003934:	189b      	adds	r3, r3, r2
 8003936:	19db      	adds	r3, r3, r7
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e056      	b.n	80039ec <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800393e:	231b      	movs	r3, #27
 8003940:	2218      	movs	r2, #24
 8003942:	189b      	adds	r3, r3, r2
 8003944:	19db      	adds	r3, r3, r7
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d822      	bhi.n	8003992 <UART_SetConfig+0x40a>
 800394c:	009a      	lsls	r2, r3, #2
 800394e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a0c <UART_SetConfig+0x484>)
 8003950:	18d3      	adds	r3, r2, r3
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003956:	f7ff f81d 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 800395a:	0003      	movs	r3, r0
 800395c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800395e:	e021      	b.n	80039a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003960:	f7ff f82e 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8003964:	0003      	movs	r3, r0
 8003966:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003968:	e01c      	b.n	80039a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800396a:	4b29      	ldr	r3, [pc, #164]	@ (8003a10 <UART_SetConfig+0x488>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	4013      	ands	r3, r2
 8003972:	d002      	beq.n	800397a <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003974:	4b27      	ldr	r3, [pc, #156]	@ (8003a14 <UART_SetConfig+0x48c>)
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003978:	e014      	b.n	80039a4 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800397a:	4b27      	ldr	r3, [pc, #156]	@ (8003a18 <UART_SetConfig+0x490>)
 800397c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800397e:	e011      	b.n	80039a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003980:	f7fe ff58 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8003984:	0003      	movs	r3, r0
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003988:	e00c      	b.n	80039a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003990:	e008      	b.n	80039a4 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003996:	231a      	movs	r3, #26
 8003998:	2218      	movs	r2, #24
 800399a:	189b      	adds	r3, r3, r2
 800399c:	19db      	adds	r3, r3, r7
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
        break;
 80039a2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80039a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d020      	beq.n	80039ec <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	085a      	lsrs	r2, r3, #1
 80039b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b2:	18d2      	adds	r2, r2, r3
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0019      	movs	r1, r3
 80039ba:	0010      	movs	r0, r2
 80039bc:	f7fc fbae 	bl	800011c <__udivsi3>
 80039c0:	0003      	movs	r3, r0
 80039c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c6:	2b0f      	cmp	r3, #15
 80039c8:	d90a      	bls.n	80039e0 <UART_SetConfig+0x458>
 80039ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039cc:	2380      	movs	r3, #128	@ 0x80
 80039ce:	025b      	lsls	r3, r3, #9
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d205      	bcs.n	80039e0 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	e005      	b.n	80039ec <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80039e0:	231a      	movs	r3, #26
 80039e2:	2218      	movs	r2, #24
 80039e4:	189b      	adds	r3, r3, r2
 80039e6:	19db      	adds	r3, r3, r7
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2200      	movs	r2, #0
 80039f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2200      	movs	r2, #0
 80039f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039f8:	231a      	movs	r3, #26
 80039fa:	2218      	movs	r2, #24
 80039fc:	189b      	adds	r3, r3, r2
 80039fe:	19db      	adds	r3, r3, r7
 8003a00:	781b      	ldrb	r3, [r3, #0]
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b00e      	add	sp, #56	@ 0x38
 8003a08:	bdb0      	pop	{r4, r5, r7, pc}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	08004e9c 	.word	0x08004e9c
 8003a10:	40021000 	.word	0x40021000
 8003a14:	003d0900 	.word	0x003d0900
 8003a18:	00f42400 	.word	0x00f42400

08003a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a4a      	ldr	r2, [pc, #296]	@ (8003b60 <UART_AdvFeatureConfig+0x144>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4a43      	ldr	r2, [pc, #268]	@ (8003b64 <UART_AdvFeatureConfig+0x148>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d00b      	beq.n	8003a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a3b      	ldr	r2, [pc, #236]	@ (8003b68 <UART_AdvFeatureConfig+0x14c>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	2208      	movs	r2, #8
 8003a90:	4013      	ands	r3, r2
 8003a92:	d00b      	beq.n	8003aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4a34      	ldr	r2, [pc, #208]	@ (8003b6c <UART_AdvFeatureConfig+0x150>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	2210      	movs	r2, #16
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d00b      	beq.n	8003ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a2c      	ldr	r2, [pc, #176]	@ (8003b70 <UART_AdvFeatureConfig+0x154>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4a25      	ldr	r2, [pc, #148]	@ (8003b74 <UART_AdvFeatureConfig+0x158>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	2240      	movs	r2, #64	@ 0x40
 8003af6:	4013      	ands	r3, r2
 8003af8:	d01d      	beq.n	8003b36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4a1d      	ldr	r2, [pc, #116]	@ (8003b78 <UART_AdvFeatureConfig+0x15c>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	0019      	movs	r1, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b16:	2380      	movs	r3, #128	@ 0x80
 8003b18:	035b      	lsls	r3, r3, #13
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d10b      	bne.n	8003b36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a15      	ldr	r2, [pc, #84]	@ (8003b7c <UART_AdvFeatureConfig+0x160>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	0019      	movs	r1, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	2280      	movs	r2, #128	@ 0x80
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a0e      	ldr	r2, [pc, #56]	@ (8003b80 <UART_AdvFeatureConfig+0x164>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
  }
}
 8003b58:	46c0      	nop			@ (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	fffdffff 	.word	0xfffdffff
 8003b64:	fffeffff 	.word	0xfffeffff
 8003b68:	fffbffff 	.word	0xfffbffff
 8003b6c:	ffff7fff 	.word	0xffff7fff
 8003b70:	ffffefff 	.word	0xffffefff
 8003b74:	ffffdfff 	.word	0xffffdfff
 8003b78:	ffefffff 	.word	0xffefffff
 8003b7c:	ff9fffff 	.word	0xff9fffff
 8003b80:	fff7ffff 	.word	0xfff7ffff

08003b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b092      	sub	sp, #72	@ 0x48
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2284      	movs	r2, #132	@ 0x84
 8003b90:	2100      	movs	r1, #0
 8003b92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b94:	f7fd f910 	bl	8000db8 <HAL_GetTick>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d12c      	bne.n	8003c04 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bac:	2280      	movs	r2, #128	@ 0x80
 8003bae:	0391      	lsls	r1, r2, #14
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4a46      	ldr	r2, [pc, #280]	@ (8003ccc <UART_CheckIdleState+0x148>)
 8003bb4:	9200      	str	r2, [sp, #0]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f000 f88c 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d021      	beq.n	8003c04 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bca:	2301      	movs	r3, #1
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd0:	f383 8810 	msr	PRIMASK, r3
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2180      	movs	r1, #128	@ 0x80
 8003be2:	438a      	bics	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bec:	f383 8810 	msr	PRIMASK, r3
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2278      	movs	r2, #120	@ 0x78
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e05f      	b.n	8003cc4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d146      	bne.n	8003ca0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c14:	2280      	movs	r2, #128	@ 0x80
 8003c16:	03d1      	lsls	r1, r2, #15
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ccc <UART_CheckIdleState+0x148>)
 8003c1c:	9200      	str	r2, [sp, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f000 f858 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d03b      	beq.n	8003ca0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c28:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c32:	2301      	movs	r3, #1
 8003c34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	46c0      	nop			@ (mov r8, r8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4921      	ldr	r1, [pc, #132]	@ (8003cd0 <UART_CheckIdleState+0x14c>)
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f383 8810 	msr	PRIMASK, r3
}
 8003c58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c60:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c64:	2301      	movs	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2280      	movs	r2, #128	@ 0x80
 8003c90:	2120      	movs	r1, #32
 8003c92:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2278      	movs	r2, #120	@ 0x78
 8003c98:	2100      	movs	r1, #0
 8003c9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e011      	b.n	8003cc4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2280      	movs	r2, #128	@ 0x80
 8003caa:	2120      	movs	r1, #32
 8003cac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2278      	movs	r2, #120	@ 0x78
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b010      	add	sp, #64	@ 0x40
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	01ffffff 	.word	0x01ffffff
 8003cd0:	fffffedf 	.word	0xfffffedf

08003cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	1dfb      	adds	r3, r7, #7
 8003ce2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce4:	e04b      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	d048      	beq.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cec:	f7fd f864 	bl	8000db8 <HAL_GetTick>
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d302      	bcc.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e04b      	b.n	8003d9e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d035      	beq.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d111      	bne.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 f83c 	bl	8003da8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2284      	movs	r2, #132	@ 0x84
 8003d34:	2108      	movs	r1, #8
 8003d36:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2278      	movs	r2, #120	@ 0x78
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e02c      	b.n	8003d9e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	2380      	movs	r3, #128	@ 0x80
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	401a      	ands	r2, r3
 8003d50:	2380      	movs	r3, #128	@ 0x80
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d112      	bne.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2280      	movs	r2, #128	@ 0x80
 8003d5e:	0112      	lsls	r2, r2, #4
 8003d60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f000 f81f 	bl	8003da8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2284      	movs	r2, #132	@ 0x84
 8003d6e:	2120      	movs	r1, #32
 8003d70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2278      	movs	r2, #120	@ 0x78
 8003d76:	2100      	movs	r1, #0
 8003d78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e00f      	b.n	8003d9e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	425a      	negs	r2, r3
 8003d8e:	4153      	adcs	r3, r2
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	001a      	movs	r2, r3
 8003d94:	1dfb      	adds	r3, r7, #7
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d0a4      	beq.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	0018      	movs	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b004      	add	sp, #16
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08e      	sub	sp, #56	@ 0x38
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db0:	f3ef 8310 	mrs	r3, PRIMASK
 8003db4:	617b      	str	r3, [r7, #20]
  return(result);
 8003db6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f383 8810 	msr	PRIMASK, r3
}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4926      	ldr	r1, [pc, #152]	@ (8003e6c <UART_EndRxTransfer+0xc4>)
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de2:	f3ef 8310 	mrs	r3, PRIMASK
 8003de6:	623b      	str	r3, [r7, #32]
  return(result);
 8003de8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dec:	2301      	movs	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	f383 8810 	msr	PRIMASK, r3
}
 8003df6:	46c0      	nop			@ (mov r8, r8)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	438a      	bics	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0e:	f383 8810 	msr	PRIMASK, r3
}
 8003e12:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d118      	bne.n	8003e4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e26:	2301      	movs	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f383 8810 	msr	PRIMASK, r3
}
 8003e30:	46c0      	nop			@ (mov r8, r8)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2110      	movs	r1, #16
 8003e3e:	438a      	bics	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f383 8810 	msr	PRIMASK, r3
}
 8003e4c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2280      	movs	r2, #128	@ 0x80
 8003e52:	2120      	movs	r1, #32
 8003e54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b00e      	add	sp, #56	@ 0x38
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	fffffedf 	.word	0xfffffedf

08003e70 <std>:
 8003e70:	2300      	movs	r3, #0
 8003e72:	b510      	push	{r4, lr}
 8003e74:	0004      	movs	r4, r0
 8003e76:	6003      	str	r3, [r0, #0]
 8003e78:	6043      	str	r3, [r0, #4]
 8003e7a:	6083      	str	r3, [r0, #8]
 8003e7c:	8181      	strh	r1, [r0, #12]
 8003e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e80:	81c2      	strh	r2, [r0, #14]
 8003e82:	6103      	str	r3, [r0, #16]
 8003e84:	6143      	str	r3, [r0, #20]
 8003e86:	6183      	str	r3, [r0, #24]
 8003e88:	0019      	movs	r1, r3
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	305c      	adds	r0, #92	@ 0x5c
 8003e8e:	f000 fa0f 	bl	80042b0 <memset>
 8003e92:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <std+0x50>)
 8003e94:	6224      	str	r4, [r4, #32]
 8003e96:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e98:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec4 <std+0x54>)
 8003e9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <std+0x58>)
 8003e9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <std+0x5c>)
 8003ea2:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <std+0x60>)
 8003ea6:	429c      	cmp	r4, r3
 8003ea8:	d005      	beq.n	8003eb6 <std+0x46>
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed4 <std+0x64>)
 8003eac:	429c      	cmp	r4, r3
 8003eae:	d002      	beq.n	8003eb6 <std+0x46>
 8003eb0:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <std+0x68>)
 8003eb2:	429c      	cmp	r4, r3
 8003eb4:	d103      	bne.n	8003ebe <std+0x4e>
 8003eb6:	0020      	movs	r0, r4
 8003eb8:	3058      	adds	r0, #88	@ 0x58
 8003eba:	f000 fa79 	bl	80043b0 <__retarget_lock_init_recursive>
 8003ebe:	bd10      	pop	{r4, pc}
 8003ec0:	080040d9 	.word	0x080040d9
 8003ec4:	08004101 	.word	0x08004101
 8003ec8:	08004139 	.word	0x08004139
 8003ecc:	08004165 	.word	0x08004165
 8003ed0:	200001ac 	.word	0x200001ac
 8003ed4:	20000214 	.word	0x20000214
 8003ed8:	2000027c 	.word	0x2000027c

08003edc <stdio_exit_handler>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	4a03      	ldr	r2, [pc, #12]	@ (8003eec <stdio_exit_handler+0x10>)
 8003ee0:	4903      	ldr	r1, [pc, #12]	@ (8003ef0 <stdio_exit_handler+0x14>)
 8003ee2:	4804      	ldr	r0, [pc, #16]	@ (8003ef4 <stdio_exit_handler+0x18>)
 8003ee4:	f000 f86c 	bl	8003fc0 <_fwalk_sglue>
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	2000000c 	.word	0x2000000c
 8003ef0:	08004c41 	.word	0x08004c41
 8003ef4:	2000001c 	.word	0x2000001c

08003ef8 <cleanup_stdio>:
 8003ef8:	6841      	ldr	r1, [r0, #4]
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <cleanup_stdio+0x30>)
 8003efc:	b510      	push	{r4, lr}
 8003efe:	0004      	movs	r4, r0
 8003f00:	4299      	cmp	r1, r3
 8003f02:	d001      	beq.n	8003f08 <cleanup_stdio+0x10>
 8003f04:	f000 fe9c 	bl	8004c40 <_fflush_r>
 8003f08:	68a1      	ldr	r1, [r4, #8]
 8003f0a:	4b08      	ldr	r3, [pc, #32]	@ (8003f2c <cleanup_stdio+0x34>)
 8003f0c:	4299      	cmp	r1, r3
 8003f0e:	d002      	beq.n	8003f16 <cleanup_stdio+0x1e>
 8003f10:	0020      	movs	r0, r4
 8003f12:	f000 fe95 	bl	8004c40 <_fflush_r>
 8003f16:	68e1      	ldr	r1, [r4, #12]
 8003f18:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <cleanup_stdio+0x38>)
 8003f1a:	4299      	cmp	r1, r3
 8003f1c:	d002      	beq.n	8003f24 <cleanup_stdio+0x2c>
 8003f1e:	0020      	movs	r0, r4
 8003f20:	f000 fe8e 	bl	8004c40 <_fflush_r>
 8003f24:	bd10      	pop	{r4, pc}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	200001ac 	.word	0x200001ac
 8003f2c:	20000214 	.word	0x20000214
 8003f30:	2000027c 	.word	0x2000027c

08003f34 <global_stdio_init.part.0>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <global_stdio_init.part.0+0x28>)
 8003f38:	4a09      	ldr	r2, [pc, #36]	@ (8003f60 <global_stdio_init.part.0+0x2c>)
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	4809      	ldr	r0, [pc, #36]	@ (8003f64 <global_stdio_init.part.0+0x30>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	f7ff ff95 	bl	8003e70 <std>
 8003f46:	2201      	movs	r2, #1
 8003f48:	2109      	movs	r1, #9
 8003f4a:	4807      	ldr	r0, [pc, #28]	@ (8003f68 <global_stdio_init.part.0+0x34>)
 8003f4c:	f7ff ff90 	bl	8003e70 <std>
 8003f50:	2202      	movs	r2, #2
 8003f52:	2112      	movs	r1, #18
 8003f54:	4805      	ldr	r0, [pc, #20]	@ (8003f6c <global_stdio_init.part.0+0x38>)
 8003f56:	f7ff ff8b 	bl	8003e70 <std>
 8003f5a:	bd10      	pop	{r4, pc}
 8003f5c:	200002e4 	.word	0x200002e4
 8003f60:	08003edd 	.word	0x08003edd
 8003f64:	200001ac 	.word	0x200001ac
 8003f68:	20000214 	.word	0x20000214
 8003f6c:	2000027c 	.word	0x2000027c

08003f70 <__sfp_lock_acquire>:
 8003f70:	b510      	push	{r4, lr}
 8003f72:	4802      	ldr	r0, [pc, #8]	@ (8003f7c <__sfp_lock_acquire+0xc>)
 8003f74:	f000 fa1d 	bl	80043b2 <__retarget_lock_acquire_recursive>
 8003f78:	bd10      	pop	{r4, pc}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	200002ed 	.word	0x200002ed

08003f80 <__sfp_lock_release>:
 8003f80:	b510      	push	{r4, lr}
 8003f82:	4802      	ldr	r0, [pc, #8]	@ (8003f8c <__sfp_lock_release+0xc>)
 8003f84:	f000 fa16 	bl	80043b4 <__retarget_lock_release_recursive>
 8003f88:	bd10      	pop	{r4, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	200002ed 	.word	0x200002ed

08003f90 <__sinit>:
 8003f90:	b510      	push	{r4, lr}
 8003f92:	0004      	movs	r4, r0
 8003f94:	f7ff ffec 	bl	8003f70 <__sfp_lock_acquire>
 8003f98:	6a23      	ldr	r3, [r4, #32]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <__sinit+0x14>
 8003f9e:	f7ff ffef 	bl	8003f80 <__sfp_lock_release>
 8003fa2:	bd10      	pop	{r4, pc}
 8003fa4:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <__sinit+0x28>)
 8003fa6:	6223      	str	r3, [r4, #32]
 8003fa8:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <__sinit+0x2c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f6      	bne.n	8003f9e <__sinit+0xe>
 8003fb0:	f7ff ffc0 	bl	8003f34 <global_stdio_init.part.0>
 8003fb4:	e7f3      	b.n	8003f9e <__sinit+0xe>
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	08003ef9 	.word	0x08003ef9
 8003fbc:	200002e4 	.word	0x200002e4

08003fc0 <_fwalk_sglue>:
 8003fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fc2:	0014      	movs	r4, r2
 8003fc4:	2600      	movs	r6, #0
 8003fc6:	9000      	str	r0, [sp, #0]
 8003fc8:	9101      	str	r1, [sp, #4]
 8003fca:	68a5      	ldr	r5, [r4, #8]
 8003fcc:	6867      	ldr	r7, [r4, #4]
 8003fce:	3f01      	subs	r7, #1
 8003fd0:	d504      	bpl.n	8003fdc <_fwalk_sglue+0x1c>
 8003fd2:	6824      	ldr	r4, [r4, #0]
 8003fd4:	2c00      	cmp	r4, #0
 8003fd6:	d1f8      	bne.n	8003fca <_fwalk_sglue+0xa>
 8003fd8:	0030      	movs	r0, r6
 8003fda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fdc:	89ab      	ldrh	r3, [r5, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d908      	bls.n	8003ff4 <_fwalk_sglue+0x34>
 8003fe2:	220e      	movs	r2, #14
 8003fe4:	5eab      	ldrsh	r3, [r5, r2]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	d004      	beq.n	8003ff4 <_fwalk_sglue+0x34>
 8003fea:	0029      	movs	r1, r5
 8003fec:	9800      	ldr	r0, [sp, #0]
 8003fee:	9b01      	ldr	r3, [sp, #4]
 8003ff0:	4798      	blx	r3
 8003ff2:	4306      	orrs	r6, r0
 8003ff4:	3568      	adds	r5, #104	@ 0x68
 8003ff6:	e7ea      	b.n	8003fce <_fwalk_sglue+0xe>

08003ff8 <iprintf>:
 8003ff8:	b40f      	push	{r0, r1, r2, r3}
 8003ffa:	b507      	push	{r0, r1, r2, lr}
 8003ffc:	4905      	ldr	r1, [pc, #20]	@ (8004014 <iprintf+0x1c>)
 8003ffe:	ab04      	add	r3, sp, #16
 8004000:	6808      	ldr	r0, [r1, #0]
 8004002:	cb04      	ldmia	r3!, {r2}
 8004004:	6881      	ldr	r1, [r0, #8]
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	f000 fafa 	bl	8004600 <_vfiprintf_r>
 800400c:	b003      	add	sp, #12
 800400e:	bc08      	pop	{r3}
 8004010:	b004      	add	sp, #16
 8004012:	4718      	bx	r3
 8004014:	20000018 	.word	0x20000018

08004018 <_puts_r>:
 8004018:	6a03      	ldr	r3, [r0, #32]
 800401a:	b570      	push	{r4, r5, r6, lr}
 800401c:	0005      	movs	r5, r0
 800401e:	000e      	movs	r6, r1
 8004020:	6884      	ldr	r4, [r0, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <_puts_r+0x12>
 8004026:	f7ff ffb3 	bl	8003f90 <__sinit>
 800402a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800402c:	07db      	lsls	r3, r3, #31
 800402e:	d405      	bmi.n	800403c <_puts_r+0x24>
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	059b      	lsls	r3, r3, #22
 8004034:	d402      	bmi.n	800403c <_puts_r+0x24>
 8004036:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004038:	f000 f9bb 	bl	80043b2 <__retarget_lock_acquire_recursive>
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	071b      	lsls	r3, r3, #28
 8004040:	d502      	bpl.n	8004048 <_puts_r+0x30>
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d11f      	bne.n	8004088 <_puts_r+0x70>
 8004048:	0021      	movs	r1, r4
 800404a:	0028      	movs	r0, r5
 800404c:	f000 f8d2 	bl	80041f4 <__swsetup_r>
 8004050:	2800      	cmp	r0, #0
 8004052:	d019      	beq.n	8004088 <_puts_r+0x70>
 8004054:	2501      	movs	r5, #1
 8004056:	426d      	negs	r5, r5
 8004058:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800405a:	07db      	lsls	r3, r3, #31
 800405c:	d405      	bmi.n	800406a <_puts_r+0x52>
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	059b      	lsls	r3, r3, #22
 8004062:	d402      	bmi.n	800406a <_puts_r+0x52>
 8004064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004066:	f000 f9a5 	bl	80043b4 <__retarget_lock_release_recursive>
 800406a:	0028      	movs	r0, r5
 800406c:	bd70      	pop	{r4, r5, r6, pc}
 800406e:	3601      	adds	r6, #1
 8004070:	60a3      	str	r3, [r4, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	da04      	bge.n	8004080 <_puts_r+0x68>
 8004076:	69a2      	ldr	r2, [r4, #24]
 8004078:	429a      	cmp	r2, r3
 800407a:	dc16      	bgt.n	80040aa <_puts_r+0x92>
 800407c:	290a      	cmp	r1, #10
 800407e:	d014      	beq.n	80040aa <_puts_r+0x92>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	6022      	str	r2, [r4, #0]
 8004086:	7019      	strb	r1, [r3, #0]
 8004088:	68a3      	ldr	r3, [r4, #8]
 800408a:	7831      	ldrb	r1, [r6, #0]
 800408c:	3b01      	subs	r3, #1
 800408e:	2900      	cmp	r1, #0
 8004090:	d1ed      	bne.n	800406e <_puts_r+0x56>
 8004092:	60a3      	str	r3, [r4, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	da0f      	bge.n	80040b8 <_puts_r+0xa0>
 8004098:	0022      	movs	r2, r4
 800409a:	0028      	movs	r0, r5
 800409c:	310a      	adds	r1, #10
 800409e:	f000 f867 	bl	8004170 <__swbuf_r>
 80040a2:	3001      	adds	r0, #1
 80040a4:	d0d6      	beq.n	8004054 <_puts_r+0x3c>
 80040a6:	250a      	movs	r5, #10
 80040a8:	e7d6      	b.n	8004058 <_puts_r+0x40>
 80040aa:	0022      	movs	r2, r4
 80040ac:	0028      	movs	r0, r5
 80040ae:	f000 f85f 	bl	8004170 <__swbuf_r>
 80040b2:	3001      	adds	r0, #1
 80040b4:	d1e8      	bne.n	8004088 <_puts_r+0x70>
 80040b6:	e7cd      	b.n	8004054 <_puts_r+0x3c>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	6022      	str	r2, [r4, #0]
 80040be:	220a      	movs	r2, #10
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e7f0      	b.n	80040a6 <_puts_r+0x8e>

080040c4 <puts>:
 80040c4:	b510      	push	{r4, lr}
 80040c6:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <puts+0x10>)
 80040c8:	0001      	movs	r1, r0
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	f7ff ffa4 	bl	8004018 <_puts_r>
 80040d0:	bd10      	pop	{r4, pc}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	20000018 	.word	0x20000018

080040d8 <__sread>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	000c      	movs	r4, r1
 80040dc:	250e      	movs	r5, #14
 80040de:	5f49      	ldrsh	r1, [r1, r5]
 80040e0:	f000 f914 	bl	800430c <_read_r>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	db03      	blt.n	80040f0 <__sread+0x18>
 80040e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040ea:	181b      	adds	r3, r3, r0
 80040ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	4a02      	ldr	r2, [pc, #8]	@ (80040fc <__sread+0x24>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	e7f9      	b.n	80040ee <__sread+0x16>
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	ffffefff 	.word	0xffffefff

08004100 <__swrite>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	001f      	movs	r7, r3
 8004104:	898b      	ldrh	r3, [r1, #12]
 8004106:	0005      	movs	r5, r0
 8004108:	000c      	movs	r4, r1
 800410a:	0016      	movs	r6, r2
 800410c:	05db      	lsls	r3, r3, #23
 800410e:	d505      	bpl.n	800411c <__swrite+0x1c>
 8004110:	230e      	movs	r3, #14
 8004112:	5ec9      	ldrsh	r1, [r1, r3]
 8004114:	2200      	movs	r2, #0
 8004116:	2302      	movs	r3, #2
 8004118:	f000 f8e4 	bl	80042e4 <_lseek_r>
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	4a05      	ldr	r2, [pc, #20]	@ (8004134 <__swrite+0x34>)
 8004120:	0028      	movs	r0, r5
 8004122:	4013      	ands	r3, r2
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	0032      	movs	r2, r6
 8004128:	230e      	movs	r3, #14
 800412a:	5ee1      	ldrsh	r1, [r4, r3]
 800412c:	003b      	movs	r3, r7
 800412e:	f000 f901 	bl	8004334 <_write_r>
 8004132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004134:	ffffefff 	.word	0xffffefff

08004138 <__sseek>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	000c      	movs	r4, r1
 800413c:	250e      	movs	r5, #14
 800413e:	5f49      	ldrsh	r1, [r1, r5]
 8004140:	f000 f8d0 	bl	80042e4 <_lseek_r>
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	1c42      	adds	r2, r0, #1
 8004148:	d103      	bne.n	8004152 <__sseek+0x1a>
 800414a:	4a05      	ldr	r2, [pc, #20]	@ (8004160 <__sseek+0x28>)
 800414c:	4013      	ands	r3, r2
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	bd70      	pop	{r4, r5, r6, pc}
 8004152:	2280      	movs	r2, #128	@ 0x80
 8004154:	0152      	lsls	r2, r2, #5
 8004156:	4313      	orrs	r3, r2
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	6560      	str	r0, [r4, #84]	@ 0x54
 800415c:	e7f8      	b.n	8004150 <__sseek+0x18>
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	ffffefff 	.word	0xffffefff

08004164 <__sclose>:
 8004164:	b510      	push	{r4, lr}
 8004166:	230e      	movs	r3, #14
 8004168:	5ec9      	ldrsh	r1, [r1, r3]
 800416a:	f000 f8a9 	bl	80042c0 <_close_r>
 800416e:	bd10      	pop	{r4, pc}

08004170 <__swbuf_r>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	0006      	movs	r6, r0
 8004174:	000d      	movs	r5, r1
 8004176:	0014      	movs	r4, r2
 8004178:	2800      	cmp	r0, #0
 800417a:	d004      	beq.n	8004186 <__swbuf_r+0x16>
 800417c:	6a03      	ldr	r3, [r0, #32]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <__swbuf_r+0x16>
 8004182:	f7ff ff05 	bl	8003f90 <__sinit>
 8004186:	69a3      	ldr	r3, [r4, #24]
 8004188:	60a3      	str	r3, [r4, #8]
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	071b      	lsls	r3, r3, #28
 800418e:	d502      	bpl.n	8004196 <__swbuf_r+0x26>
 8004190:	6923      	ldr	r3, [r4, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <__swbuf_r+0x3a>
 8004196:	0021      	movs	r1, r4
 8004198:	0030      	movs	r0, r6
 800419a:	f000 f82b 	bl	80041f4 <__swsetup_r>
 800419e:	2800      	cmp	r0, #0
 80041a0:	d003      	beq.n	80041aa <__swbuf_r+0x3a>
 80041a2:	2501      	movs	r5, #1
 80041a4:	426d      	negs	r5, r5
 80041a6:	0028      	movs	r0, r5
 80041a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	b2ef      	uxtb	r7, r5
 80041b0:	1ac0      	subs	r0, r0, r3
 80041b2:	6963      	ldr	r3, [r4, #20]
 80041b4:	b2ed      	uxtb	r5, r5
 80041b6:	4283      	cmp	r3, r0
 80041b8:	dc05      	bgt.n	80041c6 <__swbuf_r+0x56>
 80041ba:	0021      	movs	r1, r4
 80041bc:	0030      	movs	r0, r6
 80041be:	f000 fd3f 	bl	8004c40 <_fflush_r>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d1ed      	bne.n	80041a2 <__swbuf_r+0x32>
 80041c6:	68a3      	ldr	r3, [r4, #8]
 80041c8:	3001      	adds	r0, #1
 80041ca:	3b01      	subs	r3, #1
 80041cc:	60a3      	str	r3, [r4, #8]
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	6022      	str	r2, [r4, #0]
 80041d4:	701f      	strb	r7, [r3, #0]
 80041d6:	6963      	ldr	r3, [r4, #20]
 80041d8:	4283      	cmp	r3, r0
 80041da:	d004      	beq.n	80041e6 <__swbuf_r+0x76>
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	07db      	lsls	r3, r3, #31
 80041e0:	d5e1      	bpl.n	80041a6 <__swbuf_r+0x36>
 80041e2:	2d0a      	cmp	r5, #10
 80041e4:	d1df      	bne.n	80041a6 <__swbuf_r+0x36>
 80041e6:	0021      	movs	r1, r4
 80041e8:	0030      	movs	r0, r6
 80041ea:	f000 fd29 	bl	8004c40 <_fflush_r>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d0d9      	beq.n	80041a6 <__swbuf_r+0x36>
 80041f2:	e7d6      	b.n	80041a2 <__swbuf_r+0x32>

080041f4 <__swsetup_r>:
 80041f4:	4b2d      	ldr	r3, [pc, #180]	@ (80042ac <__swsetup_r+0xb8>)
 80041f6:	b570      	push	{r4, r5, r6, lr}
 80041f8:	0005      	movs	r5, r0
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	000c      	movs	r4, r1
 80041fe:	2800      	cmp	r0, #0
 8004200:	d004      	beq.n	800420c <__swsetup_r+0x18>
 8004202:	6a03      	ldr	r3, [r0, #32]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <__swsetup_r+0x18>
 8004208:	f7ff fec2 	bl	8003f90 <__sinit>
 800420c:	230c      	movs	r3, #12
 800420e:	5ee2      	ldrsh	r2, [r4, r3]
 8004210:	0713      	lsls	r3, r2, #28
 8004212:	d423      	bmi.n	800425c <__swsetup_r+0x68>
 8004214:	06d3      	lsls	r3, r2, #27
 8004216:	d407      	bmi.n	8004228 <__swsetup_r+0x34>
 8004218:	2309      	movs	r3, #9
 800421a:	602b      	str	r3, [r5, #0]
 800421c:	2340      	movs	r3, #64	@ 0x40
 800421e:	2001      	movs	r0, #1
 8004220:	4313      	orrs	r3, r2
 8004222:	81a3      	strh	r3, [r4, #12]
 8004224:	4240      	negs	r0, r0
 8004226:	e03a      	b.n	800429e <__swsetup_r+0xaa>
 8004228:	0752      	lsls	r2, r2, #29
 800422a:	d513      	bpl.n	8004254 <__swsetup_r+0x60>
 800422c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800422e:	2900      	cmp	r1, #0
 8004230:	d008      	beq.n	8004244 <__swsetup_r+0x50>
 8004232:	0023      	movs	r3, r4
 8004234:	3344      	adds	r3, #68	@ 0x44
 8004236:	4299      	cmp	r1, r3
 8004238:	d002      	beq.n	8004240 <__swsetup_r+0x4c>
 800423a:	0028      	movs	r0, r5
 800423c:	f000 f8bc 	bl	80043b8 <_free_r>
 8004240:	2300      	movs	r3, #0
 8004242:	6363      	str	r3, [r4, #52]	@ 0x34
 8004244:	2224      	movs	r2, #36	@ 0x24
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	4393      	bics	r3, r2
 800424a:	81a3      	strh	r3, [r4, #12]
 800424c:	2300      	movs	r3, #0
 800424e:	6063      	str	r3, [r4, #4]
 8004250:	6923      	ldr	r3, [r4, #16]
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	2308      	movs	r3, #8
 8004256:	89a2      	ldrh	r2, [r4, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	81a3      	strh	r3, [r4, #12]
 800425c:	6923      	ldr	r3, [r4, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <__swsetup_r+0x86>
 8004262:	21a0      	movs	r1, #160	@ 0xa0
 8004264:	2280      	movs	r2, #128	@ 0x80
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	0089      	lsls	r1, r1, #2
 800426a:	0092      	lsls	r2, r2, #2
 800426c:	400b      	ands	r3, r1
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <__swsetup_r+0x86>
 8004272:	0021      	movs	r1, r4
 8004274:	0028      	movs	r0, r5
 8004276:	f000 fd39 	bl	8004cec <__smakebuf_r>
 800427a:	230c      	movs	r3, #12
 800427c:	5ee2      	ldrsh	r2, [r4, r3]
 800427e:	2101      	movs	r1, #1
 8004280:	0013      	movs	r3, r2
 8004282:	400b      	ands	r3, r1
 8004284:	420a      	tst	r2, r1
 8004286:	d00b      	beq.n	80042a0 <__swsetup_r+0xac>
 8004288:	2300      	movs	r3, #0
 800428a:	60a3      	str	r3, [r4, #8]
 800428c:	6963      	ldr	r3, [r4, #20]
 800428e:	425b      	negs	r3, r3
 8004290:	61a3      	str	r3, [r4, #24]
 8004292:	2000      	movs	r0, #0
 8004294:	6923      	ldr	r3, [r4, #16]
 8004296:	4283      	cmp	r3, r0
 8004298:	d101      	bne.n	800429e <__swsetup_r+0xaa>
 800429a:	0613      	lsls	r3, r2, #24
 800429c:	d4be      	bmi.n	800421c <__swsetup_r+0x28>
 800429e:	bd70      	pop	{r4, r5, r6, pc}
 80042a0:	0791      	lsls	r1, r2, #30
 80042a2:	d400      	bmi.n	80042a6 <__swsetup_r+0xb2>
 80042a4:	6963      	ldr	r3, [r4, #20]
 80042a6:	60a3      	str	r3, [r4, #8]
 80042a8:	e7f3      	b.n	8004292 <__swsetup_r+0x9e>
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	20000018 	.word	0x20000018

080042b0 <memset>:
 80042b0:	0003      	movs	r3, r0
 80042b2:	1882      	adds	r2, r0, r2
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d100      	bne.n	80042ba <memset+0xa>
 80042b8:	4770      	bx	lr
 80042ba:	7019      	strb	r1, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	e7f9      	b.n	80042b4 <memset+0x4>

080042c0 <_close_r>:
 80042c0:	2300      	movs	r3, #0
 80042c2:	b570      	push	{r4, r5, r6, lr}
 80042c4:	4d06      	ldr	r5, [pc, #24]	@ (80042e0 <_close_r+0x20>)
 80042c6:	0004      	movs	r4, r0
 80042c8:	0008      	movs	r0, r1
 80042ca:	602b      	str	r3, [r5, #0]
 80042cc:	f7fc fbef 	bl	8000aae <_close>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d103      	bne.n	80042dc <_close_r+0x1c>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d000      	beq.n	80042dc <_close_r+0x1c>
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	bd70      	pop	{r4, r5, r6, pc}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	200002e8 	.word	0x200002e8

080042e4 <_lseek_r>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	0004      	movs	r4, r0
 80042e8:	0008      	movs	r0, r1
 80042ea:	0011      	movs	r1, r2
 80042ec:	001a      	movs	r2, r3
 80042ee:	2300      	movs	r3, #0
 80042f0:	4d05      	ldr	r5, [pc, #20]	@ (8004308 <_lseek_r+0x24>)
 80042f2:	602b      	str	r3, [r5, #0]
 80042f4:	f7fc fbfc 	bl	8000af0 <_lseek>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d103      	bne.n	8004304 <_lseek_r+0x20>
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d000      	beq.n	8004304 <_lseek_r+0x20>
 8004302:	6023      	str	r3, [r4, #0]
 8004304:	bd70      	pop	{r4, r5, r6, pc}
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	200002e8 	.word	0x200002e8

0800430c <_read_r>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	0004      	movs	r4, r0
 8004310:	0008      	movs	r0, r1
 8004312:	0011      	movs	r1, r2
 8004314:	001a      	movs	r2, r3
 8004316:	2300      	movs	r3, #0
 8004318:	4d05      	ldr	r5, [pc, #20]	@ (8004330 <_read_r+0x24>)
 800431a:	602b      	str	r3, [r5, #0]
 800431c:	f7fc fb8e 	bl	8000a3c <_read>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	d103      	bne.n	800432c <_read_r+0x20>
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d000      	beq.n	800432c <_read_r+0x20>
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	bd70      	pop	{r4, r5, r6, pc}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	200002e8 	.word	0x200002e8

08004334 <_write_r>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	0004      	movs	r4, r0
 8004338:	0008      	movs	r0, r1
 800433a:	0011      	movs	r1, r2
 800433c:	001a      	movs	r2, r3
 800433e:	2300      	movs	r3, #0
 8004340:	4d05      	ldr	r5, [pc, #20]	@ (8004358 <_write_r+0x24>)
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	f7fc fb97 	bl	8000a76 <_write>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d103      	bne.n	8004354 <_write_r+0x20>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d000      	beq.n	8004354 <_write_r+0x20>
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	bd70      	pop	{r4, r5, r6, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	200002e8 	.word	0x200002e8

0800435c <__errno>:
 800435c:	4b01      	ldr	r3, [pc, #4]	@ (8004364 <__errno+0x8>)
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	4770      	bx	lr
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	20000018 	.word	0x20000018

08004368 <__libc_init_array>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	2600      	movs	r6, #0
 800436c:	4c0c      	ldr	r4, [pc, #48]	@ (80043a0 <__libc_init_array+0x38>)
 800436e:	4d0d      	ldr	r5, [pc, #52]	@ (80043a4 <__libc_init_array+0x3c>)
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	42a6      	cmp	r6, r4
 8004376:	d109      	bne.n	800438c <__libc_init_array+0x24>
 8004378:	2600      	movs	r6, #0
 800437a:	f000 fd3b 	bl	8004df4 <_init>
 800437e:	4c0a      	ldr	r4, [pc, #40]	@ (80043a8 <__libc_init_array+0x40>)
 8004380:	4d0a      	ldr	r5, [pc, #40]	@ (80043ac <__libc_init_array+0x44>)
 8004382:	1b64      	subs	r4, r4, r5
 8004384:	10a4      	asrs	r4, r4, #2
 8004386:	42a6      	cmp	r6, r4
 8004388:	d105      	bne.n	8004396 <__libc_init_array+0x2e>
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	00b3      	lsls	r3, r6, #2
 800438e:	58eb      	ldr	r3, [r5, r3]
 8004390:	4798      	blx	r3
 8004392:	3601      	adds	r6, #1
 8004394:	e7ee      	b.n	8004374 <__libc_init_array+0xc>
 8004396:	00b3      	lsls	r3, r6, #2
 8004398:	58eb      	ldr	r3, [r5, r3]
 800439a:	4798      	blx	r3
 800439c:	3601      	adds	r6, #1
 800439e:	e7f2      	b.n	8004386 <__libc_init_array+0x1e>
 80043a0:	08004efc 	.word	0x08004efc
 80043a4:	08004efc 	.word	0x08004efc
 80043a8:	08004f00 	.word	0x08004f00
 80043ac:	08004efc 	.word	0x08004efc

080043b0 <__retarget_lock_init_recursive>:
 80043b0:	4770      	bx	lr

080043b2 <__retarget_lock_acquire_recursive>:
 80043b2:	4770      	bx	lr

080043b4 <__retarget_lock_release_recursive>:
 80043b4:	4770      	bx	lr
	...

080043b8 <_free_r>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	0005      	movs	r5, r0
 80043bc:	1e0c      	subs	r4, r1, #0
 80043be:	d010      	beq.n	80043e2 <_free_r+0x2a>
 80043c0:	3c04      	subs	r4, #4
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da00      	bge.n	80043ca <_free_r+0x12>
 80043c8:	18e4      	adds	r4, r4, r3
 80043ca:	0028      	movs	r0, r5
 80043cc:	f000 f8e0 	bl	8004590 <__malloc_lock>
 80043d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004448 <_free_r+0x90>)
 80043d2:	6813      	ldr	r3, [r2, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <_free_r+0x2c>
 80043d8:	6063      	str	r3, [r4, #4]
 80043da:	6014      	str	r4, [r2, #0]
 80043dc:	0028      	movs	r0, r5
 80043de:	f000 f8df 	bl	80045a0 <__malloc_unlock>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	42a3      	cmp	r3, r4
 80043e6:	d908      	bls.n	80043fa <_free_r+0x42>
 80043e8:	6820      	ldr	r0, [r4, #0]
 80043ea:	1821      	adds	r1, r4, r0
 80043ec:	428b      	cmp	r3, r1
 80043ee:	d1f3      	bne.n	80043d8 <_free_r+0x20>
 80043f0:	6819      	ldr	r1, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	1809      	adds	r1, r1, r0
 80043f6:	6021      	str	r1, [r4, #0]
 80043f8:	e7ee      	b.n	80043d8 <_free_r+0x20>
 80043fa:	001a      	movs	r2, r3
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <_free_r+0x4e>
 8004402:	42a3      	cmp	r3, r4
 8004404:	d9f9      	bls.n	80043fa <_free_r+0x42>
 8004406:	6811      	ldr	r1, [r2, #0]
 8004408:	1850      	adds	r0, r2, r1
 800440a:	42a0      	cmp	r0, r4
 800440c:	d10b      	bne.n	8004426 <_free_r+0x6e>
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	1809      	adds	r1, r1, r0
 8004412:	1850      	adds	r0, r2, r1
 8004414:	6011      	str	r1, [r2, #0]
 8004416:	4283      	cmp	r3, r0
 8004418:	d1e0      	bne.n	80043dc <_free_r+0x24>
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	1841      	adds	r1, r0, r1
 8004420:	6011      	str	r1, [r2, #0]
 8004422:	6053      	str	r3, [r2, #4]
 8004424:	e7da      	b.n	80043dc <_free_r+0x24>
 8004426:	42a0      	cmp	r0, r4
 8004428:	d902      	bls.n	8004430 <_free_r+0x78>
 800442a:	230c      	movs	r3, #12
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	e7d5      	b.n	80043dc <_free_r+0x24>
 8004430:	6820      	ldr	r0, [r4, #0]
 8004432:	1821      	adds	r1, r4, r0
 8004434:	428b      	cmp	r3, r1
 8004436:	d103      	bne.n	8004440 <_free_r+0x88>
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	1809      	adds	r1, r1, r0
 800443e:	6021      	str	r1, [r4, #0]
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	6054      	str	r4, [r2, #4]
 8004444:	e7ca      	b.n	80043dc <_free_r+0x24>
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	200002f4 	.word	0x200002f4

0800444c <sbrk_aligned>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	4e0f      	ldr	r6, [pc, #60]	@ (800448c <sbrk_aligned+0x40>)
 8004450:	000d      	movs	r5, r1
 8004452:	6831      	ldr	r1, [r6, #0]
 8004454:	0004      	movs	r4, r0
 8004456:	2900      	cmp	r1, #0
 8004458:	d102      	bne.n	8004460 <sbrk_aligned+0x14>
 800445a:	f000 fcad 	bl	8004db8 <_sbrk_r>
 800445e:	6030      	str	r0, [r6, #0]
 8004460:	0029      	movs	r1, r5
 8004462:	0020      	movs	r0, r4
 8004464:	f000 fca8 	bl	8004db8 <_sbrk_r>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d103      	bne.n	8004474 <sbrk_aligned+0x28>
 800446c:	2501      	movs	r5, #1
 800446e:	426d      	negs	r5, r5
 8004470:	0028      	movs	r0, r5
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	2303      	movs	r3, #3
 8004476:	1cc5      	adds	r5, r0, #3
 8004478:	439d      	bics	r5, r3
 800447a:	42a8      	cmp	r0, r5
 800447c:	d0f8      	beq.n	8004470 <sbrk_aligned+0x24>
 800447e:	1a29      	subs	r1, r5, r0
 8004480:	0020      	movs	r0, r4
 8004482:	f000 fc99 	bl	8004db8 <_sbrk_r>
 8004486:	3001      	adds	r0, #1
 8004488:	d1f2      	bne.n	8004470 <sbrk_aligned+0x24>
 800448a:	e7ef      	b.n	800446c <sbrk_aligned+0x20>
 800448c:	200002f0 	.word	0x200002f0

08004490 <_malloc_r>:
 8004490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004492:	2203      	movs	r2, #3
 8004494:	1ccb      	adds	r3, r1, #3
 8004496:	4393      	bics	r3, r2
 8004498:	3308      	adds	r3, #8
 800449a:	0005      	movs	r5, r0
 800449c:	001f      	movs	r7, r3
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d234      	bcs.n	800450c <_malloc_r+0x7c>
 80044a2:	270c      	movs	r7, #12
 80044a4:	42b9      	cmp	r1, r7
 80044a6:	d833      	bhi.n	8004510 <_malloc_r+0x80>
 80044a8:	0028      	movs	r0, r5
 80044aa:	f000 f871 	bl	8004590 <__malloc_lock>
 80044ae:	4e37      	ldr	r6, [pc, #220]	@ (800458c <_malloc_r+0xfc>)
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	001c      	movs	r4, r3
 80044b4:	2c00      	cmp	r4, #0
 80044b6:	d12f      	bne.n	8004518 <_malloc_r+0x88>
 80044b8:	0039      	movs	r1, r7
 80044ba:	0028      	movs	r0, r5
 80044bc:	f7ff ffc6 	bl	800444c <sbrk_aligned>
 80044c0:	0004      	movs	r4, r0
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	d15f      	bne.n	8004586 <_malloc_r+0xf6>
 80044c6:	6834      	ldr	r4, [r6, #0]
 80044c8:	9400      	str	r4, [sp, #0]
 80044ca:	9b00      	ldr	r3, [sp, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d14a      	bne.n	8004566 <_malloc_r+0xd6>
 80044d0:	2c00      	cmp	r4, #0
 80044d2:	d052      	beq.n	800457a <_malloc_r+0xea>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	0028      	movs	r0, r5
 80044d8:	18e3      	adds	r3, r4, r3
 80044da:	9900      	ldr	r1, [sp, #0]
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	f000 fc6b 	bl	8004db8 <_sbrk_r>
 80044e2:	9b01      	ldr	r3, [sp, #4]
 80044e4:	4283      	cmp	r3, r0
 80044e6:	d148      	bne.n	800457a <_malloc_r+0xea>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	0028      	movs	r0, r5
 80044ec:	1aff      	subs	r7, r7, r3
 80044ee:	0039      	movs	r1, r7
 80044f0:	f7ff ffac 	bl	800444c <sbrk_aligned>
 80044f4:	3001      	adds	r0, #1
 80044f6:	d040      	beq.n	800457a <_malloc_r+0xea>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	19db      	adds	r3, r3, r7
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	6833      	ldr	r3, [r6, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	2a00      	cmp	r2, #0
 8004504:	d133      	bne.n	800456e <_malloc_r+0xde>
 8004506:	9b00      	ldr	r3, [sp, #0]
 8004508:	6033      	str	r3, [r6, #0]
 800450a:	e019      	b.n	8004540 <_malloc_r+0xb0>
 800450c:	2b00      	cmp	r3, #0
 800450e:	dac9      	bge.n	80044a4 <_malloc_r+0x14>
 8004510:	230c      	movs	r3, #12
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	2000      	movs	r0, #0
 8004516:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004518:	6821      	ldr	r1, [r4, #0]
 800451a:	1bc9      	subs	r1, r1, r7
 800451c:	d420      	bmi.n	8004560 <_malloc_r+0xd0>
 800451e:	290b      	cmp	r1, #11
 8004520:	d90a      	bls.n	8004538 <_malloc_r+0xa8>
 8004522:	19e2      	adds	r2, r4, r7
 8004524:	6027      	str	r7, [r4, #0]
 8004526:	42a3      	cmp	r3, r4
 8004528:	d104      	bne.n	8004534 <_malloc_r+0xa4>
 800452a:	6032      	str	r2, [r6, #0]
 800452c:	6863      	ldr	r3, [r4, #4]
 800452e:	6011      	str	r1, [r2, #0]
 8004530:	6053      	str	r3, [r2, #4]
 8004532:	e005      	b.n	8004540 <_malloc_r+0xb0>
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	e7f9      	b.n	800452c <_malloc_r+0x9c>
 8004538:	6862      	ldr	r2, [r4, #4]
 800453a:	42a3      	cmp	r3, r4
 800453c:	d10e      	bne.n	800455c <_malloc_r+0xcc>
 800453e:	6032      	str	r2, [r6, #0]
 8004540:	0028      	movs	r0, r5
 8004542:	f000 f82d 	bl	80045a0 <__malloc_unlock>
 8004546:	0020      	movs	r0, r4
 8004548:	2207      	movs	r2, #7
 800454a:	300b      	adds	r0, #11
 800454c:	1d23      	adds	r3, r4, #4
 800454e:	4390      	bics	r0, r2
 8004550:	1ac2      	subs	r2, r0, r3
 8004552:	4298      	cmp	r0, r3
 8004554:	d0df      	beq.n	8004516 <_malloc_r+0x86>
 8004556:	1a1b      	subs	r3, r3, r0
 8004558:	50a3      	str	r3, [r4, r2]
 800455a:	e7dc      	b.n	8004516 <_malloc_r+0x86>
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	e7ef      	b.n	8004540 <_malloc_r+0xb0>
 8004560:	0023      	movs	r3, r4
 8004562:	6864      	ldr	r4, [r4, #4]
 8004564:	e7a6      	b.n	80044b4 <_malloc_r+0x24>
 8004566:	9c00      	ldr	r4, [sp, #0]
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	e7ad      	b.n	80044ca <_malloc_r+0x3a>
 800456e:	001a      	movs	r2, r3
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	42a3      	cmp	r3, r4
 8004574:	d1fb      	bne.n	800456e <_malloc_r+0xde>
 8004576:	2300      	movs	r3, #0
 8004578:	e7da      	b.n	8004530 <_malloc_r+0xa0>
 800457a:	230c      	movs	r3, #12
 800457c:	0028      	movs	r0, r5
 800457e:	602b      	str	r3, [r5, #0]
 8004580:	f000 f80e 	bl	80045a0 <__malloc_unlock>
 8004584:	e7c6      	b.n	8004514 <_malloc_r+0x84>
 8004586:	6007      	str	r7, [r0, #0]
 8004588:	e7da      	b.n	8004540 <_malloc_r+0xb0>
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	200002f4 	.word	0x200002f4

08004590 <__malloc_lock>:
 8004590:	b510      	push	{r4, lr}
 8004592:	4802      	ldr	r0, [pc, #8]	@ (800459c <__malloc_lock+0xc>)
 8004594:	f7ff ff0d 	bl	80043b2 <__retarget_lock_acquire_recursive>
 8004598:	bd10      	pop	{r4, pc}
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	200002ec 	.word	0x200002ec

080045a0 <__malloc_unlock>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	4802      	ldr	r0, [pc, #8]	@ (80045ac <__malloc_unlock+0xc>)
 80045a4:	f7ff ff06 	bl	80043b4 <__retarget_lock_release_recursive>
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	200002ec 	.word	0x200002ec

080045b0 <__sfputc_r>:
 80045b0:	6893      	ldr	r3, [r2, #8]
 80045b2:	b510      	push	{r4, lr}
 80045b4:	3b01      	subs	r3, #1
 80045b6:	6093      	str	r3, [r2, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da04      	bge.n	80045c6 <__sfputc_r+0x16>
 80045bc:	6994      	ldr	r4, [r2, #24]
 80045be:	42a3      	cmp	r3, r4
 80045c0:	db07      	blt.n	80045d2 <__sfputc_r+0x22>
 80045c2:	290a      	cmp	r1, #10
 80045c4:	d005      	beq.n	80045d2 <__sfputc_r+0x22>
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	1c58      	adds	r0, r3, #1
 80045ca:	6010      	str	r0, [r2, #0]
 80045cc:	7019      	strb	r1, [r3, #0]
 80045ce:	0008      	movs	r0, r1
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	f7ff fdcd 	bl	8004170 <__swbuf_r>
 80045d6:	0001      	movs	r1, r0
 80045d8:	e7f9      	b.n	80045ce <__sfputc_r+0x1e>

080045da <__sfputs_r>:
 80045da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045dc:	0006      	movs	r6, r0
 80045de:	000f      	movs	r7, r1
 80045e0:	0014      	movs	r4, r2
 80045e2:	18d5      	adds	r5, r2, r3
 80045e4:	42ac      	cmp	r4, r5
 80045e6:	d101      	bne.n	80045ec <__sfputs_r+0x12>
 80045e8:	2000      	movs	r0, #0
 80045ea:	e007      	b.n	80045fc <__sfputs_r+0x22>
 80045ec:	7821      	ldrb	r1, [r4, #0]
 80045ee:	003a      	movs	r2, r7
 80045f0:	0030      	movs	r0, r6
 80045f2:	f7ff ffdd 	bl	80045b0 <__sfputc_r>
 80045f6:	3401      	adds	r4, #1
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d1f3      	bne.n	80045e4 <__sfputs_r+0xa>
 80045fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004600 <_vfiprintf_r>:
 8004600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004602:	b0a1      	sub	sp, #132	@ 0x84
 8004604:	000f      	movs	r7, r1
 8004606:	0015      	movs	r5, r2
 8004608:	001e      	movs	r6, r3
 800460a:	9003      	str	r0, [sp, #12]
 800460c:	2800      	cmp	r0, #0
 800460e:	d004      	beq.n	800461a <_vfiprintf_r+0x1a>
 8004610:	6a03      	ldr	r3, [r0, #32]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <_vfiprintf_r+0x1a>
 8004616:	f7ff fcbb 	bl	8003f90 <__sinit>
 800461a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800461c:	07db      	lsls	r3, r3, #31
 800461e:	d405      	bmi.n	800462c <_vfiprintf_r+0x2c>
 8004620:	89bb      	ldrh	r3, [r7, #12]
 8004622:	059b      	lsls	r3, r3, #22
 8004624:	d402      	bmi.n	800462c <_vfiprintf_r+0x2c>
 8004626:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004628:	f7ff fec3 	bl	80043b2 <__retarget_lock_acquire_recursive>
 800462c:	89bb      	ldrh	r3, [r7, #12]
 800462e:	071b      	lsls	r3, r3, #28
 8004630:	d502      	bpl.n	8004638 <_vfiprintf_r+0x38>
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d113      	bne.n	8004660 <_vfiprintf_r+0x60>
 8004638:	0039      	movs	r1, r7
 800463a:	9803      	ldr	r0, [sp, #12]
 800463c:	f7ff fdda 	bl	80041f4 <__swsetup_r>
 8004640:	2800      	cmp	r0, #0
 8004642:	d00d      	beq.n	8004660 <_vfiprintf_r+0x60>
 8004644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004646:	07db      	lsls	r3, r3, #31
 8004648:	d503      	bpl.n	8004652 <_vfiprintf_r+0x52>
 800464a:	2001      	movs	r0, #1
 800464c:	4240      	negs	r0, r0
 800464e:	b021      	add	sp, #132	@ 0x84
 8004650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004652:	89bb      	ldrh	r3, [r7, #12]
 8004654:	059b      	lsls	r3, r3, #22
 8004656:	d4f8      	bmi.n	800464a <_vfiprintf_r+0x4a>
 8004658:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800465a:	f7ff feab 	bl	80043b4 <__retarget_lock_release_recursive>
 800465e:	e7f4      	b.n	800464a <_vfiprintf_r+0x4a>
 8004660:	2300      	movs	r3, #0
 8004662:	ac08      	add	r4, sp, #32
 8004664:	6163      	str	r3, [r4, #20]
 8004666:	3320      	adds	r3, #32
 8004668:	7663      	strb	r3, [r4, #25]
 800466a:	3310      	adds	r3, #16
 800466c:	76a3      	strb	r3, [r4, #26]
 800466e:	9607      	str	r6, [sp, #28]
 8004670:	002e      	movs	r6, r5
 8004672:	7833      	ldrb	r3, [r6, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <_vfiprintf_r+0x7c>
 8004678:	2b25      	cmp	r3, #37	@ 0x25
 800467a:	d148      	bne.n	800470e <_vfiprintf_r+0x10e>
 800467c:	1b73      	subs	r3, r6, r5
 800467e:	9305      	str	r3, [sp, #20]
 8004680:	42ae      	cmp	r6, r5
 8004682:	d00b      	beq.n	800469c <_vfiprintf_r+0x9c>
 8004684:	002a      	movs	r2, r5
 8004686:	0039      	movs	r1, r7
 8004688:	9803      	ldr	r0, [sp, #12]
 800468a:	f7ff ffa6 	bl	80045da <__sfputs_r>
 800468e:	3001      	adds	r0, #1
 8004690:	d100      	bne.n	8004694 <_vfiprintf_r+0x94>
 8004692:	e0ae      	b.n	80047f2 <_vfiprintf_r+0x1f2>
 8004694:	6963      	ldr	r3, [r4, #20]
 8004696:	9a05      	ldr	r2, [sp, #20]
 8004698:	189b      	adds	r3, r3, r2
 800469a:	6163      	str	r3, [r4, #20]
 800469c:	7833      	ldrb	r3, [r6, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d100      	bne.n	80046a4 <_vfiprintf_r+0xa4>
 80046a2:	e0a6      	b.n	80047f2 <_vfiprintf_r+0x1f2>
 80046a4:	2201      	movs	r2, #1
 80046a6:	2300      	movs	r3, #0
 80046a8:	4252      	negs	r2, r2
 80046aa:	6062      	str	r2, [r4, #4]
 80046ac:	a904      	add	r1, sp, #16
 80046ae:	3254      	adds	r2, #84	@ 0x54
 80046b0:	1852      	adds	r2, r2, r1
 80046b2:	1c75      	adds	r5, r6, #1
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	60e3      	str	r3, [r4, #12]
 80046b8:	60a3      	str	r3, [r4, #8]
 80046ba:	7013      	strb	r3, [r2, #0]
 80046bc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80046be:	4b59      	ldr	r3, [pc, #356]	@ (8004824 <_vfiprintf_r+0x224>)
 80046c0:	2205      	movs	r2, #5
 80046c2:	0018      	movs	r0, r3
 80046c4:	7829      	ldrb	r1, [r5, #0]
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	f000 fb88 	bl	8004ddc <memchr>
 80046cc:	1c6e      	adds	r6, r5, #1
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d11f      	bne.n	8004712 <_vfiprintf_r+0x112>
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	06d3      	lsls	r3, r2, #27
 80046d6:	d504      	bpl.n	80046e2 <_vfiprintf_r+0xe2>
 80046d8:	2353      	movs	r3, #83	@ 0x53
 80046da:	a904      	add	r1, sp, #16
 80046dc:	185b      	adds	r3, r3, r1
 80046de:	2120      	movs	r1, #32
 80046e0:	7019      	strb	r1, [r3, #0]
 80046e2:	0713      	lsls	r3, r2, #28
 80046e4:	d504      	bpl.n	80046f0 <_vfiprintf_r+0xf0>
 80046e6:	2353      	movs	r3, #83	@ 0x53
 80046e8:	a904      	add	r1, sp, #16
 80046ea:	185b      	adds	r3, r3, r1
 80046ec:	212b      	movs	r1, #43	@ 0x2b
 80046ee:	7019      	strb	r1, [r3, #0]
 80046f0:	782b      	ldrb	r3, [r5, #0]
 80046f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80046f4:	d016      	beq.n	8004724 <_vfiprintf_r+0x124>
 80046f6:	002e      	movs	r6, r5
 80046f8:	2100      	movs	r1, #0
 80046fa:	200a      	movs	r0, #10
 80046fc:	68e3      	ldr	r3, [r4, #12]
 80046fe:	7832      	ldrb	r2, [r6, #0]
 8004700:	1c75      	adds	r5, r6, #1
 8004702:	3a30      	subs	r2, #48	@ 0x30
 8004704:	2a09      	cmp	r2, #9
 8004706:	d950      	bls.n	80047aa <_vfiprintf_r+0x1aa>
 8004708:	2900      	cmp	r1, #0
 800470a:	d111      	bne.n	8004730 <_vfiprintf_r+0x130>
 800470c:	e017      	b.n	800473e <_vfiprintf_r+0x13e>
 800470e:	3601      	adds	r6, #1
 8004710:	e7af      	b.n	8004672 <_vfiprintf_r+0x72>
 8004712:	9b05      	ldr	r3, [sp, #20]
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	1ac0      	subs	r0, r0, r3
 8004718:	2301      	movs	r3, #1
 800471a:	4083      	lsls	r3, r0
 800471c:	4313      	orrs	r3, r2
 800471e:	0035      	movs	r5, r6
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	e7cc      	b.n	80046be <_vfiprintf_r+0xbe>
 8004724:	9b07      	ldr	r3, [sp, #28]
 8004726:	1d19      	adds	r1, r3, #4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	9107      	str	r1, [sp, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	db01      	blt.n	8004734 <_vfiprintf_r+0x134>
 8004730:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004732:	e004      	b.n	800473e <_vfiprintf_r+0x13e>
 8004734:	425b      	negs	r3, r3
 8004736:	60e3      	str	r3, [r4, #12]
 8004738:	2302      	movs	r3, #2
 800473a:	4313      	orrs	r3, r2
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	7833      	ldrb	r3, [r6, #0]
 8004740:	2b2e      	cmp	r3, #46	@ 0x2e
 8004742:	d10c      	bne.n	800475e <_vfiprintf_r+0x15e>
 8004744:	7873      	ldrb	r3, [r6, #1]
 8004746:	2b2a      	cmp	r3, #42	@ 0x2a
 8004748:	d134      	bne.n	80047b4 <_vfiprintf_r+0x1b4>
 800474a:	9b07      	ldr	r3, [sp, #28]
 800474c:	3602      	adds	r6, #2
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	9207      	str	r2, [sp, #28]
 8004754:	2b00      	cmp	r3, #0
 8004756:	da01      	bge.n	800475c <_vfiprintf_r+0x15c>
 8004758:	2301      	movs	r3, #1
 800475a:	425b      	negs	r3, r3
 800475c:	9309      	str	r3, [sp, #36]	@ 0x24
 800475e:	4d32      	ldr	r5, [pc, #200]	@ (8004828 <_vfiprintf_r+0x228>)
 8004760:	2203      	movs	r2, #3
 8004762:	0028      	movs	r0, r5
 8004764:	7831      	ldrb	r1, [r6, #0]
 8004766:	f000 fb39 	bl	8004ddc <memchr>
 800476a:	2800      	cmp	r0, #0
 800476c:	d006      	beq.n	800477c <_vfiprintf_r+0x17c>
 800476e:	2340      	movs	r3, #64	@ 0x40
 8004770:	1b40      	subs	r0, r0, r5
 8004772:	4083      	lsls	r3, r0
 8004774:	6822      	ldr	r2, [r4, #0]
 8004776:	3601      	adds	r6, #1
 8004778:	4313      	orrs	r3, r2
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	7831      	ldrb	r1, [r6, #0]
 800477e:	2206      	movs	r2, #6
 8004780:	482a      	ldr	r0, [pc, #168]	@ (800482c <_vfiprintf_r+0x22c>)
 8004782:	1c75      	adds	r5, r6, #1
 8004784:	7621      	strb	r1, [r4, #24]
 8004786:	f000 fb29 	bl	8004ddc <memchr>
 800478a:	2800      	cmp	r0, #0
 800478c:	d040      	beq.n	8004810 <_vfiprintf_r+0x210>
 800478e:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <_vfiprintf_r+0x230>)
 8004790:	2b00      	cmp	r3, #0
 8004792:	d122      	bne.n	80047da <_vfiprintf_r+0x1da>
 8004794:	2207      	movs	r2, #7
 8004796:	9b07      	ldr	r3, [sp, #28]
 8004798:	3307      	adds	r3, #7
 800479a:	4393      	bics	r3, r2
 800479c:	3308      	adds	r3, #8
 800479e:	9307      	str	r3, [sp, #28]
 80047a0:	6963      	ldr	r3, [r4, #20]
 80047a2:	9a04      	ldr	r2, [sp, #16]
 80047a4:	189b      	adds	r3, r3, r2
 80047a6:	6163      	str	r3, [r4, #20]
 80047a8:	e762      	b.n	8004670 <_vfiprintf_r+0x70>
 80047aa:	4343      	muls	r3, r0
 80047ac:	002e      	movs	r6, r5
 80047ae:	2101      	movs	r1, #1
 80047b0:	189b      	adds	r3, r3, r2
 80047b2:	e7a4      	b.n	80046fe <_vfiprintf_r+0xfe>
 80047b4:	2300      	movs	r3, #0
 80047b6:	200a      	movs	r0, #10
 80047b8:	0019      	movs	r1, r3
 80047ba:	3601      	adds	r6, #1
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	7832      	ldrb	r2, [r6, #0]
 80047c0:	1c75      	adds	r5, r6, #1
 80047c2:	3a30      	subs	r2, #48	@ 0x30
 80047c4:	2a09      	cmp	r2, #9
 80047c6:	d903      	bls.n	80047d0 <_vfiprintf_r+0x1d0>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0c8      	beq.n	800475e <_vfiprintf_r+0x15e>
 80047cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80047ce:	e7c6      	b.n	800475e <_vfiprintf_r+0x15e>
 80047d0:	4341      	muls	r1, r0
 80047d2:	002e      	movs	r6, r5
 80047d4:	2301      	movs	r3, #1
 80047d6:	1889      	adds	r1, r1, r2
 80047d8:	e7f1      	b.n	80047be <_vfiprintf_r+0x1be>
 80047da:	aa07      	add	r2, sp, #28
 80047dc:	9200      	str	r2, [sp, #0]
 80047de:	0021      	movs	r1, r4
 80047e0:	003a      	movs	r2, r7
 80047e2:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <_vfiprintf_r+0x234>)
 80047e4:	9803      	ldr	r0, [sp, #12]
 80047e6:	e000      	b.n	80047ea <_vfiprintf_r+0x1ea>
 80047e8:	bf00      	nop
 80047ea:	9004      	str	r0, [sp, #16]
 80047ec:	9b04      	ldr	r3, [sp, #16]
 80047ee:	3301      	adds	r3, #1
 80047f0:	d1d6      	bne.n	80047a0 <_vfiprintf_r+0x1a0>
 80047f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047f4:	07db      	lsls	r3, r3, #31
 80047f6:	d405      	bmi.n	8004804 <_vfiprintf_r+0x204>
 80047f8:	89bb      	ldrh	r3, [r7, #12]
 80047fa:	059b      	lsls	r3, r3, #22
 80047fc:	d402      	bmi.n	8004804 <_vfiprintf_r+0x204>
 80047fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004800:	f7ff fdd8 	bl	80043b4 <__retarget_lock_release_recursive>
 8004804:	89bb      	ldrh	r3, [r7, #12]
 8004806:	065b      	lsls	r3, r3, #25
 8004808:	d500      	bpl.n	800480c <_vfiprintf_r+0x20c>
 800480a:	e71e      	b.n	800464a <_vfiprintf_r+0x4a>
 800480c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800480e:	e71e      	b.n	800464e <_vfiprintf_r+0x4e>
 8004810:	aa07      	add	r2, sp, #28
 8004812:	9200      	str	r2, [sp, #0]
 8004814:	0021      	movs	r1, r4
 8004816:	003a      	movs	r2, r7
 8004818:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <_vfiprintf_r+0x234>)
 800481a:	9803      	ldr	r0, [sp, #12]
 800481c:	f000 f87c 	bl	8004918 <_printf_i>
 8004820:	e7e3      	b.n	80047ea <_vfiprintf_r+0x1ea>
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	08004ec0 	.word	0x08004ec0
 8004828:	08004ec6 	.word	0x08004ec6
 800482c:	08004eca 	.word	0x08004eca
 8004830:	00000000 	.word	0x00000000
 8004834:	080045db 	.word	0x080045db

08004838 <_printf_common>:
 8004838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800483a:	0016      	movs	r6, r2
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	688a      	ldr	r2, [r1, #8]
 8004840:	690b      	ldr	r3, [r1, #16]
 8004842:	000c      	movs	r4, r1
 8004844:	9000      	str	r0, [sp, #0]
 8004846:	4293      	cmp	r3, r2
 8004848:	da00      	bge.n	800484c <_printf_common+0x14>
 800484a:	0013      	movs	r3, r2
 800484c:	0022      	movs	r2, r4
 800484e:	6033      	str	r3, [r6, #0]
 8004850:	3243      	adds	r2, #67	@ 0x43
 8004852:	7812      	ldrb	r2, [r2, #0]
 8004854:	2a00      	cmp	r2, #0
 8004856:	d001      	beq.n	800485c <_printf_common+0x24>
 8004858:	3301      	adds	r3, #1
 800485a:	6033      	str	r3, [r6, #0]
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	069b      	lsls	r3, r3, #26
 8004860:	d502      	bpl.n	8004868 <_printf_common+0x30>
 8004862:	6833      	ldr	r3, [r6, #0]
 8004864:	3302      	adds	r3, #2
 8004866:	6033      	str	r3, [r6, #0]
 8004868:	6822      	ldr	r2, [r4, #0]
 800486a:	2306      	movs	r3, #6
 800486c:	0015      	movs	r5, r2
 800486e:	401d      	ands	r5, r3
 8004870:	421a      	tst	r2, r3
 8004872:	d027      	beq.n	80048c4 <_printf_common+0x8c>
 8004874:	0023      	movs	r3, r4
 8004876:	3343      	adds	r3, #67	@ 0x43
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	1e5a      	subs	r2, r3, #1
 800487c:	4193      	sbcs	r3, r2
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	0692      	lsls	r2, r2, #26
 8004882:	d430      	bmi.n	80048e6 <_printf_common+0xae>
 8004884:	0022      	movs	r2, r4
 8004886:	9901      	ldr	r1, [sp, #4]
 8004888:	9800      	ldr	r0, [sp, #0]
 800488a:	9d08      	ldr	r5, [sp, #32]
 800488c:	3243      	adds	r2, #67	@ 0x43
 800488e:	47a8      	blx	r5
 8004890:	3001      	adds	r0, #1
 8004892:	d025      	beq.n	80048e0 <_printf_common+0xa8>
 8004894:	2206      	movs	r2, #6
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	2500      	movs	r5, #0
 800489a:	4013      	ands	r3, r2
 800489c:	2b04      	cmp	r3, #4
 800489e:	d105      	bne.n	80048ac <_printf_common+0x74>
 80048a0:	6833      	ldr	r3, [r6, #0]
 80048a2:	68e5      	ldr	r5, [r4, #12]
 80048a4:	1aed      	subs	r5, r5, r3
 80048a6:	43eb      	mvns	r3, r5
 80048a8:	17db      	asrs	r3, r3, #31
 80048aa:	401d      	ands	r5, r3
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	6922      	ldr	r2, [r4, #16]
 80048b0:	4293      	cmp	r3, r2
 80048b2:	dd01      	ble.n	80048b8 <_printf_common+0x80>
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	18ed      	adds	r5, r5, r3
 80048b8:	2600      	movs	r6, #0
 80048ba:	42b5      	cmp	r5, r6
 80048bc:	d120      	bne.n	8004900 <_printf_common+0xc8>
 80048be:	2000      	movs	r0, #0
 80048c0:	e010      	b.n	80048e4 <_printf_common+0xac>
 80048c2:	3501      	adds	r5, #1
 80048c4:	68e3      	ldr	r3, [r4, #12]
 80048c6:	6832      	ldr	r2, [r6, #0]
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	42ab      	cmp	r3, r5
 80048cc:	ddd2      	ble.n	8004874 <_printf_common+0x3c>
 80048ce:	0022      	movs	r2, r4
 80048d0:	2301      	movs	r3, #1
 80048d2:	9901      	ldr	r1, [sp, #4]
 80048d4:	9800      	ldr	r0, [sp, #0]
 80048d6:	9f08      	ldr	r7, [sp, #32]
 80048d8:	3219      	adds	r2, #25
 80048da:	47b8      	blx	r7
 80048dc:	3001      	adds	r0, #1
 80048de:	d1f0      	bne.n	80048c2 <_printf_common+0x8a>
 80048e0:	2001      	movs	r0, #1
 80048e2:	4240      	negs	r0, r0
 80048e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048e6:	2030      	movs	r0, #48	@ 0x30
 80048e8:	18e1      	adds	r1, r4, r3
 80048ea:	3143      	adds	r1, #67	@ 0x43
 80048ec:	7008      	strb	r0, [r1, #0]
 80048ee:	0021      	movs	r1, r4
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	3145      	adds	r1, #69	@ 0x45
 80048f4:	7809      	ldrb	r1, [r1, #0]
 80048f6:	18a2      	adds	r2, r4, r2
 80048f8:	3243      	adds	r2, #67	@ 0x43
 80048fa:	3302      	adds	r3, #2
 80048fc:	7011      	strb	r1, [r2, #0]
 80048fe:	e7c1      	b.n	8004884 <_printf_common+0x4c>
 8004900:	0022      	movs	r2, r4
 8004902:	2301      	movs	r3, #1
 8004904:	9901      	ldr	r1, [sp, #4]
 8004906:	9800      	ldr	r0, [sp, #0]
 8004908:	9f08      	ldr	r7, [sp, #32]
 800490a:	321a      	adds	r2, #26
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	d0e6      	beq.n	80048e0 <_printf_common+0xa8>
 8004912:	3601      	adds	r6, #1
 8004914:	e7d1      	b.n	80048ba <_printf_common+0x82>
	...

08004918 <_printf_i>:
 8004918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800491a:	b08b      	sub	sp, #44	@ 0x2c
 800491c:	9206      	str	r2, [sp, #24]
 800491e:	000a      	movs	r2, r1
 8004920:	3243      	adds	r2, #67	@ 0x43
 8004922:	9307      	str	r3, [sp, #28]
 8004924:	9005      	str	r0, [sp, #20]
 8004926:	9203      	str	r2, [sp, #12]
 8004928:	7e0a      	ldrb	r2, [r1, #24]
 800492a:	000c      	movs	r4, r1
 800492c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800492e:	2a78      	cmp	r2, #120	@ 0x78
 8004930:	d809      	bhi.n	8004946 <_printf_i+0x2e>
 8004932:	2a62      	cmp	r2, #98	@ 0x62
 8004934:	d80b      	bhi.n	800494e <_printf_i+0x36>
 8004936:	2a00      	cmp	r2, #0
 8004938:	d100      	bne.n	800493c <_printf_i+0x24>
 800493a:	e0bc      	b.n	8004ab6 <_printf_i+0x19e>
 800493c:	497b      	ldr	r1, [pc, #492]	@ (8004b2c <_printf_i+0x214>)
 800493e:	9104      	str	r1, [sp, #16]
 8004940:	2a58      	cmp	r2, #88	@ 0x58
 8004942:	d100      	bne.n	8004946 <_printf_i+0x2e>
 8004944:	e090      	b.n	8004a68 <_printf_i+0x150>
 8004946:	0025      	movs	r5, r4
 8004948:	3542      	adds	r5, #66	@ 0x42
 800494a:	702a      	strb	r2, [r5, #0]
 800494c:	e022      	b.n	8004994 <_printf_i+0x7c>
 800494e:	0010      	movs	r0, r2
 8004950:	3863      	subs	r0, #99	@ 0x63
 8004952:	2815      	cmp	r0, #21
 8004954:	d8f7      	bhi.n	8004946 <_printf_i+0x2e>
 8004956:	f7fb fbd7 	bl	8000108 <__gnu_thumb1_case_shi>
 800495a:	0016      	.short	0x0016
 800495c:	fff6001f 	.word	0xfff6001f
 8004960:	fff6fff6 	.word	0xfff6fff6
 8004964:	001ffff6 	.word	0x001ffff6
 8004968:	fff6fff6 	.word	0xfff6fff6
 800496c:	fff6fff6 	.word	0xfff6fff6
 8004970:	003600a1 	.word	0x003600a1
 8004974:	fff60080 	.word	0xfff60080
 8004978:	00b2fff6 	.word	0x00b2fff6
 800497c:	0036fff6 	.word	0x0036fff6
 8004980:	fff6fff6 	.word	0xfff6fff6
 8004984:	0084      	.short	0x0084
 8004986:	0025      	movs	r5, r4
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	3542      	adds	r5, #66	@ 0x42
 800498c:	1d11      	adds	r1, r2, #4
 800498e:	6019      	str	r1, [r3, #0]
 8004990:	6813      	ldr	r3, [r2, #0]
 8004992:	702b      	strb	r3, [r5, #0]
 8004994:	2301      	movs	r3, #1
 8004996:	e0a0      	b.n	8004ada <_printf_i+0x1c2>
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	6809      	ldr	r1, [r1, #0]
 800499c:	1d02      	adds	r2, r0, #4
 800499e:	060d      	lsls	r5, r1, #24
 80049a0:	d50b      	bpl.n	80049ba <_printf_i+0xa2>
 80049a2:	6806      	ldr	r6, [r0, #0]
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	2e00      	cmp	r6, #0
 80049a8:	da03      	bge.n	80049b2 <_printf_i+0x9a>
 80049aa:	232d      	movs	r3, #45	@ 0x2d
 80049ac:	9a03      	ldr	r2, [sp, #12]
 80049ae:	4276      	negs	r6, r6
 80049b0:	7013      	strb	r3, [r2, #0]
 80049b2:	4b5e      	ldr	r3, [pc, #376]	@ (8004b2c <_printf_i+0x214>)
 80049b4:	270a      	movs	r7, #10
 80049b6:	9304      	str	r3, [sp, #16]
 80049b8:	e018      	b.n	80049ec <_printf_i+0xd4>
 80049ba:	6806      	ldr	r6, [r0, #0]
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	0649      	lsls	r1, r1, #25
 80049c0:	d5f1      	bpl.n	80049a6 <_printf_i+0x8e>
 80049c2:	b236      	sxth	r6, r6
 80049c4:	e7ef      	b.n	80049a6 <_printf_i+0x8e>
 80049c6:	6808      	ldr	r0, [r1, #0]
 80049c8:	6819      	ldr	r1, [r3, #0]
 80049ca:	c940      	ldmia	r1!, {r6}
 80049cc:	0605      	lsls	r5, r0, #24
 80049ce:	d402      	bmi.n	80049d6 <_printf_i+0xbe>
 80049d0:	0640      	lsls	r0, r0, #25
 80049d2:	d500      	bpl.n	80049d6 <_printf_i+0xbe>
 80049d4:	b2b6      	uxth	r6, r6
 80049d6:	6019      	str	r1, [r3, #0]
 80049d8:	4b54      	ldr	r3, [pc, #336]	@ (8004b2c <_printf_i+0x214>)
 80049da:	270a      	movs	r7, #10
 80049dc:	9304      	str	r3, [sp, #16]
 80049de:	2a6f      	cmp	r2, #111	@ 0x6f
 80049e0:	d100      	bne.n	80049e4 <_printf_i+0xcc>
 80049e2:	3f02      	subs	r7, #2
 80049e4:	0023      	movs	r3, r4
 80049e6:	2200      	movs	r2, #0
 80049e8:	3343      	adds	r3, #67	@ 0x43
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	6863      	ldr	r3, [r4, #4]
 80049ee:	60a3      	str	r3, [r4, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	db03      	blt.n	80049fc <_printf_i+0xe4>
 80049f4:	2104      	movs	r1, #4
 80049f6:	6822      	ldr	r2, [r4, #0]
 80049f8:	438a      	bics	r2, r1
 80049fa:	6022      	str	r2, [r4, #0]
 80049fc:	2e00      	cmp	r6, #0
 80049fe:	d102      	bne.n	8004a06 <_printf_i+0xee>
 8004a00:	9d03      	ldr	r5, [sp, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <_printf_i+0x108>
 8004a06:	9d03      	ldr	r5, [sp, #12]
 8004a08:	0030      	movs	r0, r6
 8004a0a:	0039      	movs	r1, r7
 8004a0c:	f7fb fc0c 	bl	8000228 <__aeabi_uidivmod>
 8004a10:	9b04      	ldr	r3, [sp, #16]
 8004a12:	3d01      	subs	r5, #1
 8004a14:	5c5b      	ldrb	r3, [r3, r1]
 8004a16:	702b      	strb	r3, [r5, #0]
 8004a18:	0033      	movs	r3, r6
 8004a1a:	0006      	movs	r6, r0
 8004a1c:	429f      	cmp	r7, r3
 8004a1e:	d9f3      	bls.n	8004a08 <_printf_i+0xf0>
 8004a20:	2f08      	cmp	r7, #8
 8004a22:	d109      	bne.n	8004a38 <_printf_i+0x120>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	07db      	lsls	r3, r3, #31
 8004a28:	d506      	bpl.n	8004a38 <_printf_i+0x120>
 8004a2a:	6862      	ldr	r2, [r4, #4]
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	dc02      	bgt.n	8004a38 <_printf_i+0x120>
 8004a32:	2330      	movs	r3, #48	@ 0x30
 8004a34:	3d01      	subs	r5, #1
 8004a36:	702b      	strb	r3, [r5, #0]
 8004a38:	9b03      	ldr	r3, [sp, #12]
 8004a3a:	1b5b      	subs	r3, r3, r5
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	9b07      	ldr	r3, [sp, #28]
 8004a40:	0021      	movs	r1, r4
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	9805      	ldr	r0, [sp, #20]
 8004a46:	9b06      	ldr	r3, [sp, #24]
 8004a48:	aa09      	add	r2, sp, #36	@ 0x24
 8004a4a:	f7ff fef5 	bl	8004838 <_printf_common>
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d148      	bne.n	8004ae4 <_printf_i+0x1cc>
 8004a52:	2001      	movs	r0, #1
 8004a54:	4240      	negs	r0, r0
 8004a56:	b00b      	add	sp, #44	@ 0x2c
 8004a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	6809      	ldr	r1, [r1, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	6022      	str	r2, [r4, #0]
 8004a62:	2278      	movs	r2, #120	@ 0x78
 8004a64:	4932      	ldr	r1, [pc, #200]	@ (8004b30 <_printf_i+0x218>)
 8004a66:	9104      	str	r1, [sp, #16]
 8004a68:	0021      	movs	r1, r4
 8004a6a:	3145      	adds	r1, #69	@ 0x45
 8004a6c:	700a      	strb	r2, [r1, #0]
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	6822      	ldr	r2, [r4, #0]
 8004a72:	c940      	ldmia	r1!, {r6}
 8004a74:	0610      	lsls	r0, r2, #24
 8004a76:	d402      	bmi.n	8004a7e <_printf_i+0x166>
 8004a78:	0650      	lsls	r0, r2, #25
 8004a7a:	d500      	bpl.n	8004a7e <_printf_i+0x166>
 8004a7c:	b2b6      	uxth	r6, r6
 8004a7e:	6019      	str	r1, [r3, #0]
 8004a80:	07d3      	lsls	r3, r2, #31
 8004a82:	d502      	bpl.n	8004a8a <_printf_i+0x172>
 8004a84:	2320      	movs	r3, #32
 8004a86:	4313      	orrs	r3, r2
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	2e00      	cmp	r6, #0
 8004a8c:	d001      	beq.n	8004a92 <_printf_i+0x17a>
 8004a8e:	2710      	movs	r7, #16
 8004a90:	e7a8      	b.n	80049e4 <_printf_i+0xcc>
 8004a92:	2220      	movs	r2, #32
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	4393      	bics	r3, r2
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	e7f8      	b.n	8004a8e <_printf_i+0x176>
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	680d      	ldr	r5, [r1, #0]
 8004aa0:	1d10      	adds	r0, r2, #4
 8004aa2:	6949      	ldr	r1, [r1, #20]
 8004aa4:	6018      	str	r0, [r3, #0]
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	062e      	lsls	r6, r5, #24
 8004aaa:	d501      	bpl.n	8004ab0 <_printf_i+0x198>
 8004aac:	6019      	str	r1, [r3, #0]
 8004aae:	e002      	b.n	8004ab6 <_printf_i+0x19e>
 8004ab0:	066d      	lsls	r5, r5, #25
 8004ab2:	d5fb      	bpl.n	8004aac <_printf_i+0x194>
 8004ab4:	8019      	strh	r1, [r3, #0]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9d03      	ldr	r5, [sp, #12]
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	e7bf      	b.n	8004a3e <_printf_i+0x126>
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	1d11      	adds	r1, r2, #4
 8004ac2:	6019      	str	r1, [r3, #0]
 8004ac4:	6815      	ldr	r5, [r2, #0]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	0028      	movs	r0, r5
 8004aca:	6862      	ldr	r2, [r4, #4]
 8004acc:	f000 f986 	bl	8004ddc <memchr>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d001      	beq.n	8004ad8 <_printf_i+0x1c0>
 8004ad4:	1b40      	subs	r0, r0, r5
 8004ad6:	6060      	str	r0, [r4, #4]
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	6123      	str	r3, [r4, #16]
 8004adc:	2300      	movs	r3, #0
 8004ade:	9a03      	ldr	r2, [sp, #12]
 8004ae0:	7013      	strb	r3, [r2, #0]
 8004ae2:	e7ac      	b.n	8004a3e <_printf_i+0x126>
 8004ae4:	002a      	movs	r2, r5
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	9906      	ldr	r1, [sp, #24]
 8004aea:	9805      	ldr	r0, [sp, #20]
 8004aec:	9d07      	ldr	r5, [sp, #28]
 8004aee:	47a8      	blx	r5
 8004af0:	3001      	adds	r0, #1
 8004af2:	d0ae      	beq.n	8004a52 <_printf_i+0x13a>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	079b      	lsls	r3, r3, #30
 8004af8:	d415      	bmi.n	8004b26 <_printf_i+0x20e>
 8004afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004afc:	68e0      	ldr	r0, [r4, #12]
 8004afe:	4298      	cmp	r0, r3
 8004b00:	daa9      	bge.n	8004a56 <_printf_i+0x13e>
 8004b02:	0018      	movs	r0, r3
 8004b04:	e7a7      	b.n	8004a56 <_printf_i+0x13e>
 8004b06:	0022      	movs	r2, r4
 8004b08:	2301      	movs	r3, #1
 8004b0a:	9906      	ldr	r1, [sp, #24]
 8004b0c:	9805      	ldr	r0, [sp, #20]
 8004b0e:	9e07      	ldr	r6, [sp, #28]
 8004b10:	3219      	adds	r2, #25
 8004b12:	47b0      	blx	r6
 8004b14:	3001      	adds	r0, #1
 8004b16:	d09c      	beq.n	8004a52 <_printf_i+0x13a>
 8004b18:	3501      	adds	r5, #1
 8004b1a:	68e3      	ldr	r3, [r4, #12]
 8004b1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	42ab      	cmp	r3, r5
 8004b22:	dcf0      	bgt.n	8004b06 <_printf_i+0x1ee>
 8004b24:	e7e9      	b.n	8004afa <_printf_i+0x1e2>
 8004b26:	2500      	movs	r5, #0
 8004b28:	e7f7      	b.n	8004b1a <_printf_i+0x202>
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	08004ed1 	.word	0x08004ed1
 8004b30:	08004ee2 	.word	0x08004ee2

08004b34 <__sflush_r>:
 8004b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b36:	220c      	movs	r2, #12
 8004b38:	5e8b      	ldrsh	r3, [r1, r2]
 8004b3a:	0005      	movs	r5, r0
 8004b3c:	000c      	movs	r4, r1
 8004b3e:	071a      	lsls	r2, r3, #28
 8004b40:	d456      	bmi.n	8004bf0 <__sflush_r+0xbc>
 8004b42:	684a      	ldr	r2, [r1, #4]
 8004b44:	2a00      	cmp	r2, #0
 8004b46:	dc02      	bgt.n	8004b4e <__sflush_r+0x1a>
 8004b48:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004b4a:	2a00      	cmp	r2, #0
 8004b4c:	dd4e      	ble.n	8004bec <__sflush_r+0xb8>
 8004b4e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004b50:	2f00      	cmp	r7, #0
 8004b52:	d04b      	beq.n	8004bec <__sflush_r+0xb8>
 8004b54:	2200      	movs	r2, #0
 8004b56:	2080      	movs	r0, #128	@ 0x80
 8004b58:	682e      	ldr	r6, [r5, #0]
 8004b5a:	602a      	str	r2, [r5, #0]
 8004b5c:	001a      	movs	r2, r3
 8004b5e:	0140      	lsls	r0, r0, #5
 8004b60:	6a21      	ldr	r1, [r4, #32]
 8004b62:	4002      	ands	r2, r0
 8004b64:	4203      	tst	r3, r0
 8004b66:	d033      	beq.n	8004bd0 <__sflush_r+0x9c>
 8004b68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	075b      	lsls	r3, r3, #29
 8004b6e:	d506      	bpl.n	8004b7e <__sflush_r+0x4a>
 8004b70:	6863      	ldr	r3, [r4, #4]
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <__sflush_r+0x4a>
 8004b7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b7c:	1ad2      	subs	r2, r2, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	0028      	movs	r0, r5
 8004b82:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004b84:	6a21      	ldr	r1, [r4, #32]
 8004b86:	47b8      	blx	r7
 8004b88:	89a2      	ldrh	r2, [r4, #12]
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	d106      	bne.n	8004b9c <__sflush_r+0x68>
 8004b8e:	6829      	ldr	r1, [r5, #0]
 8004b90:	291d      	cmp	r1, #29
 8004b92:	d846      	bhi.n	8004c22 <__sflush_r+0xee>
 8004b94:	4b29      	ldr	r3, [pc, #164]	@ (8004c3c <__sflush_r+0x108>)
 8004b96:	410b      	asrs	r3, r1
 8004b98:	07db      	lsls	r3, r3, #31
 8004b9a:	d442      	bmi.n	8004c22 <__sflush_r+0xee>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6063      	str	r3, [r4, #4]
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	6023      	str	r3, [r4, #0]
 8004ba4:	04d2      	lsls	r2, r2, #19
 8004ba6:	d505      	bpl.n	8004bb4 <__sflush_r+0x80>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <__sflush_r+0x7e>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d100      	bne.n	8004bb4 <__sflush_r+0x80>
 8004bb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bb6:	602e      	str	r6, [r5, #0]
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d017      	beq.n	8004bec <__sflush_r+0xb8>
 8004bbc:	0023      	movs	r3, r4
 8004bbe:	3344      	adds	r3, #68	@ 0x44
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	d002      	beq.n	8004bca <__sflush_r+0x96>
 8004bc4:	0028      	movs	r0, r5
 8004bc6:	f7ff fbf7 	bl	80043b8 <_free_r>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bce:	e00d      	b.n	8004bec <__sflush_r+0xb8>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	0028      	movs	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d1c6      	bne.n	8004b6a <__sflush_r+0x36>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0c3      	beq.n	8004b6a <__sflush_r+0x36>
 8004be2:	2b1d      	cmp	r3, #29
 8004be4:	d001      	beq.n	8004bea <__sflush_r+0xb6>
 8004be6:	2b16      	cmp	r3, #22
 8004be8:	d11a      	bne.n	8004c20 <__sflush_r+0xec>
 8004bea:	602e      	str	r6, [r5, #0]
 8004bec:	2000      	movs	r0, #0
 8004bee:	e01e      	b.n	8004c2e <__sflush_r+0xfa>
 8004bf0:	690e      	ldr	r6, [r1, #16]
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	d0fa      	beq.n	8004bec <__sflush_r+0xb8>
 8004bf6:	680f      	ldr	r7, [r1, #0]
 8004bf8:	600e      	str	r6, [r1, #0]
 8004bfa:	1bba      	subs	r2, r7, r6
 8004bfc:	9201      	str	r2, [sp, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	079b      	lsls	r3, r3, #30
 8004c02:	d100      	bne.n	8004c06 <__sflush_r+0xd2>
 8004c04:	694a      	ldr	r2, [r1, #20]
 8004c06:	60a2      	str	r2, [r4, #8]
 8004c08:	9b01      	ldr	r3, [sp, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	ddee      	ble.n	8004bec <__sflush_r+0xb8>
 8004c0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004c10:	0032      	movs	r2, r6
 8004c12:	001f      	movs	r7, r3
 8004c14:	0028      	movs	r0, r5
 8004c16:	9b01      	ldr	r3, [sp, #4]
 8004c18:	6a21      	ldr	r1, [r4, #32]
 8004c1a:	47b8      	blx	r7
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	dc07      	bgt.n	8004c30 <__sflush_r+0xfc>
 8004c20:	89a2      	ldrh	r2, [r4, #12]
 8004c22:	2340      	movs	r3, #64	@ 0x40
 8004c24:	2001      	movs	r0, #1
 8004c26:	4313      	orrs	r3, r2
 8004c28:	b21b      	sxth	r3, r3
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	4240      	negs	r0, r0
 8004c2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c30:	9b01      	ldr	r3, [sp, #4]
 8004c32:	1836      	adds	r6, r6, r0
 8004c34:	1a1b      	subs	r3, r3, r0
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	e7e6      	b.n	8004c08 <__sflush_r+0xd4>
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	dfbffffe 	.word	0xdfbffffe

08004c40 <_fflush_r>:
 8004c40:	690b      	ldr	r3, [r1, #16]
 8004c42:	b570      	push	{r4, r5, r6, lr}
 8004c44:	0005      	movs	r5, r0
 8004c46:	000c      	movs	r4, r1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <_fflush_r+0x12>
 8004c4c:	2500      	movs	r5, #0
 8004c4e:	0028      	movs	r0, r5
 8004c50:	bd70      	pop	{r4, r5, r6, pc}
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d004      	beq.n	8004c60 <_fflush_r+0x20>
 8004c56:	6a03      	ldr	r3, [r0, #32]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <_fflush_r+0x20>
 8004c5c:	f7ff f998 	bl	8003f90 <__sinit>
 8004c60:	220c      	movs	r2, #12
 8004c62:	5ea3      	ldrsh	r3, [r4, r2]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f1      	beq.n	8004c4c <_fflush_r+0xc>
 8004c68:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c6a:	07d2      	lsls	r2, r2, #31
 8004c6c:	d404      	bmi.n	8004c78 <_fflush_r+0x38>
 8004c6e:	059b      	lsls	r3, r3, #22
 8004c70:	d402      	bmi.n	8004c78 <_fflush_r+0x38>
 8004c72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c74:	f7ff fb9d 	bl	80043b2 <__retarget_lock_acquire_recursive>
 8004c78:	0028      	movs	r0, r5
 8004c7a:	0021      	movs	r1, r4
 8004c7c:	f7ff ff5a 	bl	8004b34 <__sflush_r>
 8004c80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c82:	0005      	movs	r5, r0
 8004c84:	07db      	lsls	r3, r3, #31
 8004c86:	d4e2      	bmi.n	8004c4e <_fflush_r+0xe>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	059b      	lsls	r3, r3, #22
 8004c8c:	d4df      	bmi.n	8004c4e <_fflush_r+0xe>
 8004c8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c90:	f7ff fb90 	bl	80043b4 <__retarget_lock_release_recursive>
 8004c94:	e7db      	b.n	8004c4e <_fflush_r+0xe>
	...

08004c98 <__swhatbuf_r>:
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	000e      	movs	r6, r1
 8004c9c:	001d      	movs	r5, r3
 8004c9e:	230e      	movs	r3, #14
 8004ca0:	5ec9      	ldrsh	r1, [r1, r3]
 8004ca2:	0014      	movs	r4, r2
 8004ca4:	b096      	sub	sp, #88	@ 0x58
 8004ca6:	2900      	cmp	r1, #0
 8004ca8:	da0c      	bge.n	8004cc4 <__swhatbuf_r+0x2c>
 8004caa:	89b2      	ldrh	r2, [r6, #12]
 8004cac:	2380      	movs	r3, #128	@ 0x80
 8004cae:	0011      	movs	r1, r2
 8004cb0:	4019      	ands	r1, r3
 8004cb2:	421a      	tst	r2, r3
 8004cb4:	d114      	bne.n	8004ce0 <__swhatbuf_r+0x48>
 8004cb6:	2380      	movs	r3, #128	@ 0x80
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	2000      	movs	r0, #0
 8004cbc:	6029      	str	r1, [r5, #0]
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	b016      	add	sp, #88	@ 0x58
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	466a      	mov	r2, sp
 8004cc6:	f000 f853 	bl	8004d70 <_fstat_r>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	dbed      	blt.n	8004caa <__swhatbuf_r+0x12>
 8004cce:	23f0      	movs	r3, #240	@ 0xf0
 8004cd0:	9901      	ldr	r1, [sp, #4]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	4019      	ands	r1, r3
 8004cd6:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <__swhatbuf_r+0x50>)
 8004cd8:	18c9      	adds	r1, r1, r3
 8004cda:	424b      	negs	r3, r1
 8004cdc:	4159      	adcs	r1, r3
 8004cde:	e7ea      	b.n	8004cb6 <__swhatbuf_r+0x1e>
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	2340      	movs	r3, #64	@ 0x40
 8004ce4:	e7e9      	b.n	8004cba <__swhatbuf_r+0x22>
 8004ce6:	46c0      	nop			@ (mov r8, r8)
 8004ce8:	ffffe000 	.word	0xffffe000

08004cec <__smakebuf_r>:
 8004cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cee:	2602      	movs	r6, #2
 8004cf0:	898b      	ldrh	r3, [r1, #12]
 8004cf2:	0005      	movs	r5, r0
 8004cf4:	000c      	movs	r4, r1
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	4233      	tst	r3, r6
 8004cfa:	d007      	beq.n	8004d0c <__smakebuf_r+0x20>
 8004cfc:	0023      	movs	r3, r4
 8004cfe:	3347      	adds	r3, #71	@ 0x47
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	2301      	movs	r3, #1
 8004d06:	6163      	str	r3, [r4, #20]
 8004d08:	b005      	add	sp, #20
 8004d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d0c:	ab03      	add	r3, sp, #12
 8004d0e:	aa02      	add	r2, sp, #8
 8004d10:	f7ff ffc2 	bl	8004c98 <__swhatbuf_r>
 8004d14:	9f02      	ldr	r7, [sp, #8]
 8004d16:	9001      	str	r0, [sp, #4]
 8004d18:	0039      	movs	r1, r7
 8004d1a:	0028      	movs	r0, r5
 8004d1c:	f7ff fbb8 	bl	8004490 <_malloc_r>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d108      	bne.n	8004d36 <__smakebuf_r+0x4a>
 8004d24:	220c      	movs	r2, #12
 8004d26:	5ea3      	ldrsh	r3, [r4, r2]
 8004d28:	059a      	lsls	r2, r3, #22
 8004d2a:	d4ed      	bmi.n	8004d08 <__smakebuf_r+0x1c>
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	4393      	bics	r3, r2
 8004d30:	431e      	orrs	r6, r3
 8004d32:	81a6      	strh	r6, [r4, #12]
 8004d34:	e7e2      	b.n	8004cfc <__smakebuf_r+0x10>
 8004d36:	2380      	movs	r3, #128	@ 0x80
 8004d38:	89a2      	ldrh	r2, [r4, #12]
 8004d3a:	6020      	str	r0, [r4, #0]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	9b03      	ldr	r3, [sp, #12]
 8004d42:	6120      	str	r0, [r4, #16]
 8004d44:	6167      	str	r7, [r4, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <__smakebuf_r+0x78>
 8004d4a:	0028      	movs	r0, r5
 8004d4c:	230e      	movs	r3, #14
 8004d4e:	5ee1      	ldrsh	r1, [r4, r3]
 8004d50:	f000 f820 	bl	8004d94 <_isatty_r>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d005      	beq.n	8004d64 <__smakebuf_r+0x78>
 8004d58:	2303      	movs	r3, #3
 8004d5a:	89a2      	ldrh	r2, [r4, #12]
 8004d5c:	439a      	bics	r2, r3
 8004d5e:	3b02      	subs	r3, #2
 8004d60:	4313      	orrs	r3, r2
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	9a01      	ldr	r2, [sp, #4]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	81a3      	strh	r3, [r4, #12]
 8004d6c:	e7cc      	b.n	8004d08 <__smakebuf_r+0x1c>
	...

08004d70 <_fstat_r>:
 8004d70:	2300      	movs	r3, #0
 8004d72:	b570      	push	{r4, r5, r6, lr}
 8004d74:	4d06      	ldr	r5, [pc, #24]	@ (8004d90 <_fstat_r+0x20>)
 8004d76:	0004      	movs	r4, r0
 8004d78:	0008      	movs	r0, r1
 8004d7a:	0011      	movs	r1, r2
 8004d7c:	602b      	str	r3, [r5, #0]
 8004d7e:	f7fb fea0 	bl	8000ac2 <_fstat>
 8004d82:	1c43      	adds	r3, r0, #1
 8004d84:	d103      	bne.n	8004d8e <_fstat_r+0x1e>
 8004d86:	682b      	ldr	r3, [r5, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d000      	beq.n	8004d8e <_fstat_r+0x1e>
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
 8004d90:	200002e8 	.word	0x200002e8

08004d94 <_isatty_r>:
 8004d94:	2300      	movs	r3, #0
 8004d96:	b570      	push	{r4, r5, r6, lr}
 8004d98:	4d06      	ldr	r5, [pc, #24]	@ (8004db4 <_isatty_r+0x20>)
 8004d9a:	0004      	movs	r4, r0
 8004d9c:	0008      	movs	r0, r1
 8004d9e:	602b      	str	r3, [r5, #0]
 8004da0:	f7fb fe9d 	bl	8000ade <_isatty>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d103      	bne.n	8004db0 <_isatty_r+0x1c>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d000      	beq.n	8004db0 <_isatty_r+0x1c>
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	bd70      	pop	{r4, r5, r6, pc}
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	200002e8 	.word	0x200002e8

08004db8 <_sbrk_r>:
 8004db8:	2300      	movs	r3, #0
 8004dba:	b570      	push	{r4, r5, r6, lr}
 8004dbc:	4d06      	ldr	r5, [pc, #24]	@ (8004dd8 <_sbrk_r+0x20>)
 8004dbe:	0004      	movs	r4, r0
 8004dc0:	0008      	movs	r0, r1
 8004dc2:	602b      	str	r3, [r5, #0]
 8004dc4:	f7fb fea0 	bl	8000b08 <_sbrk>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d103      	bne.n	8004dd4 <_sbrk_r+0x1c>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d000      	beq.n	8004dd4 <_sbrk_r+0x1c>
 8004dd2:	6023      	str	r3, [r4, #0]
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	200002e8 	.word	0x200002e8

08004ddc <memchr>:
 8004ddc:	b2c9      	uxtb	r1, r1
 8004dde:	1882      	adds	r2, r0, r2
 8004de0:	4290      	cmp	r0, r2
 8004de2:	d101      	bne.n	8004de8 <memchr+0xc>
 8004de4:	2000      	movs	r0, #0
 8004de6:	4770      	bx	lr
 8004de8:	7803      	ldrb	r3, [r0, #0]
 8004dea:	428b      	cmp	r3, r1
 8004dec:	d0fb      	beq.n	8004de6 <memchr+0xa>
 8004dee:	3001      	adds	r0, #1
 8004df0:	e7f6      	b.n	8004de0 <memchr+0x4>
	...

08004df4 <_init>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	46c0      	nop			@ (mov r8, r8)
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr

08004e00 <_fini>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr
