
STM32L031K6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d2c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002dec  08002dec  00003dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e58  08002e58  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e58  08002e58  00003e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e60  08002e60  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e60  08002e60  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e64  08002e64  00003e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08002e74  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002e74  000040f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3af  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199b  00000000  00000000  0000f3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00010d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000802  00000000  00000000  000117c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010df9  00000000  00000000  00011fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0ce  00000000  00000000  00022dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069f2e  00000000  00000000  0002ee91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098dbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f4  00000000  00000000  00098e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0009b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002dd4 	.word	0x08002dd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002dd4 	.word	0x08002dd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

// Task 3 (LED Blinky (timer))

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	2380      	movs	r3, #128	@ 0x80
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d104      	bne.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004bc:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004be:	2110      	movs	r1, #16
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fcfe 	bl	8000ec2 <HAL_GPIO_TogglePin>
    }
}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	50000400 	.word	0x50000400

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa1a 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80e 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8fe 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8cc 	bl	8000680 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e8:	f000 f874 	bl	80005d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2); // Handle TIM2 interrupt and clear interrupt flags (Task 3)
 80004ec:	4b02      	ldr	r3, [pc, #8]	@ (80004f8 <main+0x24>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fc0e 	bl	8001d10 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	e7fd      	b.n	80004f4 <main+0x20>
 80004f8:	20000028 	.word	0x20000028

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b099      	sub	sp, #100	@ 0x64
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	242c      	movs	r4, #44	@ 0x2c
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2334      	movs	r3, #52	@ 0x34
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fc35 	bl	8002d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000512:	2318      	movs	r3, #24
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2314      	movs	r3, #20
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 fc2d 	bl	8002d7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2318      	movs	r3, #24
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 fc26 	bl	8002d7c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	4b26      	ldr	r3, [pc, #152]	@ (80005cc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a26      	ldr	r2, [pc, #152]	@ (80005d0 <SystemClock_Config+0xd4>)
 8000536:	401a      	ands	r2, r3
 8000538:	4b24      	ldr	r3, [pc, #144]	@ (80005cc <SystemClock_Config+0xd0>)
 800053a:	2180      	movs	r1, #128	@ 0x80
 800053c:	0109      	lsls	r1, r1, #4
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2210      	movs	r2, #16
 8000548:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	22a0      	movs	r2, #160	@ 0xa0
 800055a:	0212      	lsls	r2, r2, #8
 800055c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	187b      	adds	r3, r7, r1
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fcc6 	bl	8000ef8 <HAL_RCC_OscConfig>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000570:	f000 f8fa 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	2118      	movs	r1, #24
 8000576:	187b      	adds	r3, r7, r1
 8000578:	220f      	movs	r2, #15
 800057a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f001 f829 	bl	80015f0 <HAL_RCC_ClockConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005a2:	f000 f8e1 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005a6:	003b      	movs	r3, r7
 80005a8:	2202      	movs	r2, #2
 80005aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fa3f 	bl	8001a38 <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005be:	f000 f8d3 	bl	8000768 <Error_Handler>
  }
}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b019      	add	sp, #100	@ 0x64
 80005c8:	bd90      	pop	{r4, r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	40007000 	.word	0x40007000
 80005d0:	ffffe7ff 	.word	0xffffe7ff

080005d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005da:	2308      	movs	r3, #8
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0018      	movs	r0, r3
 80005e0:	2310      	movs	r3, #16
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f002 fbc9 	bl	8002d7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ea:	003b      	movs	r3, r7
 80005ec:	0018      	movs	r0, r3
 80005ee:	2308      	movs	r3, #8
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f002 fbc2 	bl	8002d7c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_TIM2_Init+0xa4>)
 80005fa:	2280      	movs	r2, #128	@ 0x80
 80005fc:	05d2      	lsls	r2, r2, #23
 80005fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2096;
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_TIM2_Init+0xa4>)
 8000602:	2283      	movs	r2, #131	@ 0x83
 8000604:	0112      	lsls	r2, r2, #4
 8000606:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_TIM2_Init+0xa4>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_TIM2_Init+0xa4>)
 8000610:	4a1a      	ldr	r2, [pc, #104]	@ (800067c <MX_TIM2_Init+0xa8>)
 8000612:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_TIM2_Init+0xa4>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_TIM2_Init+0xa4>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_TIM2_Init+0xa4>)
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fb34 	bl	8001c90 <HAL_TIM_Base_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800062c:	f000 f89c 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000630:	2108      	movs	r1, #8
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	0152      	lsls	r2, r2, #5
 8000638:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800063a:	187a      	adds	r2, r7, r1
 800063c:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <MX_TIM2_Init+0xa4>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fc99 	bl	8001f78 <HAL_TIM_ConfigClockSource>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800064a:	f000 f88d 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064e:	003b      	movs	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	003b      	movs	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065a:	003a      	movs	r2, r7
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_TIM2_Init+0xa4>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fe6b 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800066a:	f000 f87d 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b006      	add	sp, #24
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	20000028 	.word	0x20000028
 800067c:	000003e7 	.word	0x000003e7

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <MX_USART2_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 800068c:	22e1      	movs	r2, #225	@ 0xe1
 800068e:	0252      	lsls	r2, r2, #9
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fe91 	bl	80023ec <HAL_UART_Init>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f84b 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000068 	.word	0x20000068
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b089      	sub	sp, #36	@ 0x24
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	240c      	movs	r4, #12
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	2314      	movs	r3, #20
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f002 fb43 	bl	8002d7c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_GPIO_Init+0x80>)
 80006f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006fa:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_GPIO_Init+0x80>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_GPIO_Init+0x80>)
 8000704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_GPIO_Init+0x80>)
 8000710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_GPIO_Init+0x80>)
 8000714:	2102      	movs	r1, #2
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	@ 0x2c
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_GPIO_Init+0x80>)
 800071c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800071e:	2202      	movs	r2, #2
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LED_Pin, GPIO_PIN_RESET);
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_GPIO_Init+0x84>)
 8000728:	2200      	movs	r2, #0
 800072a:	2118      	movs	r1, #24
 800072c:	0018      	movs	r0, r3
 800072e:	f000 fbab 	bl	8000e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LED_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LED_Pin;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2218      	movs	r2, #24
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2201      	movs	r2, #1
 800073e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	187b      	adds	r3, r7, r1
 800074e:	4a05      	ldr	r2, [pc, #20]	@ (8000764 <MX_GPIO_Init+0x84>)
 8000750:	0019      	movs	r1, r3
 8000752:	0010      	movs	r0, r2
 8000754:	f000 fa2a 	bl	8000bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b009      	add	sp, #36	@ 0x24
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	50000400 	.word	0x50000400

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <HAL_MspInit+0x24>)
 800077a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_MspInit+0x24>)
 800077e:	2101      	movs	r1, #1
 8000780:	430a      	orrs	r2, r1
 8000782:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <HAL_MspInit+0x24>)
 8000786:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <HAL_MspInit+0x24>)
 800078a:	2180      	movs	r1, #128	@ 0x80
 800078c:	0549      	lsls	r1, r1, #21
 800078e:	430a      	orrs	r2, r1
 8000790:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d10d      	bne.n	80007cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <HAL_TIM_Base_MspInit+0x38>)
 80007b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <HAL_TIM_Base_MspInit+0x38>)
 80007b6:	2101      	movs	r1, #1
 80007b8:	430a      	orrs	r2, r1
 80007ba:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	200f      	movs	r0, #15
 80007c2:	f000 f9c1 	bl	8000b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c6:	200f      	movs	r0, #15
 80007c8:	f000 f9d3 	bl	8000b72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	240c      	movs	r4, #12
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	0018      	movs	r0, r3
 80007e6:	2314      	movs	r3, #20
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f002 fac6 	bl	8002d7c <memset>
  if(huart->Instance==USART2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a18      	ldr	r2, [pc, #96]	@ (8000858 <HAL_UART_MspInit+0x80>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d129      	bne.n	800084e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <HAL_UART_MspInit+0x84>)
 80007fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <HAL_UART_MspInit+0x84>)
 8000800:	2180      	movs	r1, #128	@ 0x80
 8000802:	0289      	lsls	r1, r1, #10
 8000804:	430a      	orrs	r2, r1
 8000806:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <HAL_UART_MspInit+0x84>)
 800080a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800080c:	4b13      	ldr	r3, [pc, #76]	@ (800085c <HAL_UART_MspInit+0x84>)
 800080e:	2101      	movs	r1, #1
 8000810:	430a      	orrs	r2, r1
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <HAL_UART_MspInit+0x84>)
 8000816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000818:	2201      	movs	r2, #1
 800081a:	4013      	ands	r3, r2
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000820:	0021      	movs	r1, r4
 8000822:	187b      	adds	r3, r7, r1
 8000824:	4a0e      	ldr	r2, [pc, #56]	@ (8000860 <HAL_UART_MspInit+0x88>)
 8000826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2202      	movs	r2, #2
 800082c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2203      	movs	r2, #3
 8000838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2204      	movs	r2, #4
 800083e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	187a      	adds	r2, r7, r1
 8000842:	23a0      	movs	r3, #160	@ 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f000 f9af 	bl	8000bac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b009      	add	sp, #36	@ 0x24
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	40004400 	.word	0x40004400
 800085c:	40021000 	.word	0x40021000
 8000860:	00008004 	.word	0x00008004

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f894 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <TIM2_IRQHandler+0x14>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fa82 	bl	8001da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	20000028 	.word	0x20000028

080008b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008bc:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008be:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c0:	f7ff fff6 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c6:	490d      	ldr	r1, [pc, #52]	@ (80008fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <LoopForever+0xe>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000908 <LoopForever+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ea:	f002 fa4f 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ee:	f7ff fdf1 	bl	80004d4 <main>

080008f2 <LoopForever>:

LoopForever:
    b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
   ldr   r0, =_estack
 80008f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000900:	08002e68 	.word	0x08002e68
  ldr r2, =_sbss
 8000904:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000908:	200000f4 	.word	0x200000f4

0800090c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_COMP_IRQHandler>
	...

08000910 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_Init+0x3c>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <HAL_Init+0x3c>)
 8000922:	2140      	movs	r1, #64	@ 0x40
 8000924:	430a      	orrs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000928:	2000      	movs	r0, #0
 800092a:	f000 f811 	bl	8000950 <HAL_InitTick>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d003      	beq.n	800093a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e001      	b.n	800093e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800093a:	f7ff ff1b 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <HAL_InitTick+0x5c>)
 800095a:	681c      	ldr	r4, [r3, #0]
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_InitTick+0x60>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	0019      	movs	r1, r3
 8000962:	23fa      	movs	r3, #250	@ 0xfa
 8000964:	0098      	lsls	r0, r3, #2
 8000966:	f7ff fbcf 	bl	8000108 <__udivsi3>
 800096a:	0003      	movs	r3, r0
 800096c:	0019      	movs	r1, r3
 800096e:	0020      	movs	r0, r4
 8000970:	f7ff fbca 	bl	8000108 <__udivsi3>
 8000974:	0003      	movs	r3, r0
 8000976:	0018      	movs	r0, r3
 8000978:	f000 f90b 	bl	8000b92 <HAL_SYSTICK_Config>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	e00f      	b.n	80009a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d80b      	bhi.n	80009a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	2301      	movs	r3, #1
 800098e:	425b      	negs	r3, r3
 8000990:	2200      	movs	r2, #0
 8000992:	0018      	movs	r0, r3
 8000994:	f000 f8d8 	bl	8000b48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_InitTick+0x64>)
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b003      	add	sp, #12
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_IncTick+0x1c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	001a      	movs	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_IncTick+0x20>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	18d2      	adds	r2, r2, r3
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <HAL_IncTick+0x20>)
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	20000008 	.word	0x20000008
 80009d8:	200000f0 	.word	0x200000f0

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b02      	ldr	r3, [pc, #8]	@ (80009ec <HAL_GetTick+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	200000f0 	.word	0x200000f0

080009f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a02:	d809      	bhi.n	8000a18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	001a      	movs	r2, r3
 8000a0a:	231f      	movs	r3, #31
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <__NVIC_EnableIRQ+0x30>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	4091      	lsls	r1, r2
 8000a14:	000a      	movs	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
  }
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	e000e100 	.word	0xe000e100

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a38:	d828      	bhi.n	8000a8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000af8 <__NVIC_SetPriority+0xd4>)
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	33c0      	adds	r3, #192	@ 0xc0
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	589b      	ldr	r3, [r3, r2]
 8000a4a:	1dfa      	adds	r2, r7, #7
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	0011      	movs	r1, r2
 8000a50:	2203      	movs	r2, #3
 8000a52:	400a      	ands	r2, r1
 8000a54:	00d2      	lsls	r2, r2, #3
 8000a56:	21ff      	movs	r1, #255	@ 0xff
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	000a      	movs	r2, r1
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	401a      	ands	r2, r3
 8000a60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	019b      	lsls	r3, r3, #6
 8000a66:	22ff      	movs	r2, #255	@ 0xff
 8000a68:	401a      	ands	r2, r3
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2303      	movs	r3, #3
 8000a72:	4003      	ands	r3, r0
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a78:	481f      	ldr	r0, [pc, #124]	@ (8000af8 <__NVIC_SetPriority+0xd4>)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	430a      	orrs	r2, r1
 8000a84:	33c0      	adds	r3, #192	@ 0xc0
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a8a:	e031      	b.n	8000af0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000afc <__NVIC_SetPriority+0xd8>)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	0019      	movs	r1, r3
 8000a94:	230f      	movs	r3, #15
 8000a96:	400b      	ands	r3, r1
 8000a98:	3b08      	subs	r3, #8
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	3306      	adds	r3, #6
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	18d3      	adds	r3, r2, r3
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1dfa      	adds	r2, r7, #7
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	0011      	movs	r1, r2
 8000aac:	2203      	movs	r2, #3
 8000aae:	400a      	ands	r2, r1
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	21ff      	movs	r1, #255	@ 0xff
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	401a      	ands	r2, r3
 8000abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	22ff      	movs	r2, #255	@ 0xff
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	2303      	movs	r3, #3
 8000ace:	4003      	ands	r3, r0
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	4809      	ldr	r0, [pc, #36]	@ (8000afc <__NVIC_SetPriority+0xd8>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	001c      	movs	r4, r3
 8000adc:	230f      	movs	r3, #15
 8000ade:	4023      	ands	r3, r4
 8000ae0:	3b08      	subs	r3, #8
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	3306      	adds	r3, #6
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	18c3      	adds	r3, r0, r3
 8000aec:	3304      	adds	r3, #4
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b003      	add	sp, #12
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	1e5a      	subs	r2, r3, #1
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	045b      	lsls	r3, r3, #17
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d301      	bcc.n	8000b18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b14:	2301      	movs	r3, #1
 8000b16:	e010      	b.n	8000b3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <SysTick_Config+0x44>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	3a01      	subs	r2, #1
 8000b1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b20:	2301      	movs	r3, #1
 8000b22:	425b      	negs	r3, r3
 8000b24:	2103      	movs	r1, #3
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ff7c 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <SysTick_Config+0x44>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <SysTick_Config+0x44>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	210f      	movs	r1, #15
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	1c02      	adds	r2, r0, #0
 8000b58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff ff5d 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b004      	add	sp, #16
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	0002      	movs	r2, r0
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ff33 	bl	80009f0 <__NVIC_EnableIRQ>
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ffaf 	bl	8000b00 <SysTick_Config>
 8000ba2:	0003      	movs	r3, r0
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bc2:	e149      	b.n	8000e58 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d100      	bne.n	8000bdc <HAL_GPIO_Init+0x30>
 8000bda:	e13a      	b.n	8000e52 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2203      	movs	r2, #3
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d005      	beq.n	8000bf4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2203      	movs	r2, #3
 8000bee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d130      	bne.n	8000c56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	409a      	lsls	r2, r3
 8000c02:	0013      	movs	r3, r2
 8000c04:	43da      	mvns	r2, r3
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	409a      	lsls	r2, r3
 8000c16:	0013      	movs	r3, r2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	091b      	lsrs	r3, r3, #4
 8000c40:	2201      	movs	r2, #1
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d017      	beq.n	8000c92 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2203      	movs	r2, #3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d123      	bne.n	8000ce6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	08da      	lsrs	r2, r3, #3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	58d3      	ldr	r3, [r2, r3]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2207      	movs	r2, #7
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	691a      	ldr	r2, [r3, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2107      	movs	r1, #7
 8000cca:	400b      	ands	r3, r1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	6939      	ldr	r1, [r7, #16]
 8000ce4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2203      	movs	r2, #3
 8000d04:	401a      	ands	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	23c0      	movs	r3, #192	@ 0xc0
 8000d20:	029b      	lsls	r3, r3, #10
 8000d22:	4013      	ands	r3, r2
 8000d24:	d100      	bne.n	8000d28 <HAL_GPIO_Init+0x17c>
 8000d26:	e094      	b.n	8000e52 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d28:	4b51      	ldr	r3, [pc, #324]	@ (8000e70 <HAL_GPIO_Init+0x2c4>)
 8000d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d2c:	4b50      	ldr	r3, [pc, #320]	@ (8000e70 <HAL_GPIO_Init+0x2c4>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	430a      	orrs	r2, r1
 8000d32:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d34:	4a4f      	ldr	r2, [pc, #316]	@ (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	589b      	ldr	r3, [r3, r2]
 8000d40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2203      	movs	r2, #3
 8000d46:	4013      	ands	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	43da      	mvns	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	23a0      	movs	r3, #160	@ 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0x1de>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a44      	ldr	r2, [pc, #272]	@ (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00d      	beq.n	8000d86 <HAL_GPIO_Init+0x1da>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a43      	ldr	r2, [pc, #268]	@ (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d007      	beq.n	8000d82 <HAL_GPIO_Init+0x1d6>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a42      	ldr	r2, [pc, #264]	@ (8000e80 <HAL_GPIO_Init+0x2d4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_GPIO_Init+0x1d2>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x1e0>
 8000d7e:	2306      	movs	r3, #6
 8000d80:	e004      	b.n	8000d8c <HAL_GPIO_Init+0x1e0>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e002      	b.n	8000d8c <HAL_GPIO_Init+0x1e0>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <HAL_GPIO_Init+0x1e0>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	2103      	movs	r1, #3
 8000d90:	400a      	ands	r2, r1
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	4093      	lsls	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d9c:	4935      	ldr	r1, [pc, #212]	@ (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000daa:	4b36      	ldr	r3, [pc, #216]	@ (8000e84 <HAL_GPIO_Init+0x2d8>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43da      	mvns	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	2380      	movs	r3, #128	@ 0x80
 8000dc0:	035b      	lsls	r3, r3, #13
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dce:	4b2d      	ldr	r3, [pc, #180]	@ (8000e84 <HAL_GPIO_Init+0x2d8>)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <HAL_GPIO_Init+0x2d8>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43da      	mvns	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	039b      	lsls	r3, r3, #14
 8000dec:	4013      	ands	r3, r2
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000df8:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <HAL_GPIO_Init+0x2d8>)
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <HAL_GPIO_Init+0x2d8>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43da      	mvns	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	2380      	movs	r3, #128	@ 0x80
 8000e14:	029b      	lsls	r3, r3, #10
 8000e16:	4013      	ands	r3, r2
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e22:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <HAL_GPIO_Init+0x2d8>)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e28:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43da      	mvns	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	2380      	movs	r3, #128	@ 0x80
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	4013      	ands	r3, r2
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_GPIO_Init+0x2d8>)
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	40da      	lsrs	r2, r3
 8000e60:	1e13      	subs	r3, r2, #0
 8000e62:	d000      	beq.n	8000e66 <HAL_GPIO_Init+0x2ba>
 8000e64:	e6ae      	b.n	8000bc4 <HAL_GPIO_Init+0x18>
  }
}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b006      	add	sp, #24
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010000 	.word	0x40010000
 8000e78:	50000400 	.word	0x50000400
 8000e7c:	50000800 	.word	0x50000800
 8000e80:	50001c00 	.word	0x50001c00
 8000e84:	40010400 	.word	0x40010400

08000e88 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	0008      	movs	r0, r1
 8000e92:	0011      	movs	r1, r2
 8000e94:	1cbb      	adds	r3, r7, #2
 8000e96:	1c02      	adds	r2, r0, #0
 8000e98:	801a      	strh	r2, [r3, #0]
 8000e9a:	1c7b      	adds	r3, r7, #1
 8000e9c:	1c0a      	adds	r2, r1, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea0:	1c7b      	adds	r3, r7, #1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea8:	1cbb      	adds	r3, r7, #2
 8000eaa:	881a      	ldrh	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000eb0:	e003      	b.n	8000eba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000eb2:	1cbb      	adds	r3, r7, #2
 8000eb4:	881a      	ldrh	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	000a      	movs	r2, r1
 8000ecc:	1cbb      	adds	r3, r7, #2
 8000ece:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ed6:	1cbb      	adds	r3, r7, #2
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4013      	ands	r3, r2
 8000ede:	041a      	lsls	r2, r3, #16
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	1cb9      	adds	r1, r7, #2
 8000ee6:	8809      	ldrh	r1, [r1, #0]
 8000ee8:	400b      	ands	r3, r1
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	619a      	str	r2, [r3, #24]
}
 8000ef0:	46c0      	nop			@ (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	f000 fb6c 	bl	80015e4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f0c:	4bc8      	ldr	r3, [pc, #800]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	220c      	movs	r2, #12
 8000f12:	4013      	ands	r3, r2
 8000f14:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f16:	4bc6      	ldr	r3, [pc, #792]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	2380      	movs	r3, #128	@ 0x80
 8000f1c:	025b      	lsls	r3, r3, #9
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2201      	movs	r2, #1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d100      	bne.n	8000f2e <HAL_RCC_OscConfig+0x36>
 8000f2c:	e07d      	b.n	800102a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d007      	beq.n	8000f44 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	2b0c      	cmp	r3, #12
 8000f38:	d112      	bne.n	8000f60 <HAL_RCC_OscConfig+0x68>
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	025b      	lsls	r3, r3, #9
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d10d      	bne.n	8000f60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	4bba      	ldr	r3, [pc, #744]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2380      	movs	r3, #128	@ 0x80
 8000f4a:	029b      	lsls	r3, r3, #10
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d100      	bne.n	8000f52 <HAL_RCC_OscConfig+0x5a>
 8000f50:	e06a      	b.n	8001028 <HAL_RCC_OscConfig+0x130>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d166      	bne.n	8001028 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 fb42 	bl	80015e4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d107      	bne.n	8000f7c <HAL_RCC_OscConfig+0x84>
 8000f6c:	4bb0      	ldr	r3, [pc, #704]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4baf      	ldr	r3, [pc, #700]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000f72:	2180      	movs	r1, #128	@ 0x80
 8000f74:	0249      	lsls	r1, r1, #9
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e027      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	23a0      	movs	r3, #160	@ 0xa0
 8000f82:	02db      	lsls	r3, r3, #11
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d10e      	bne.n	8000fa6 <HAL_RCC_OscConfig+0xae>
 8000f88:	4ba9      	ldr	r3, [pc, #676]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4ba8      	ldr	r3, [pc, #672]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000f8e:	2180      	movs	r1, #128	@ 0x80
 8000f90:	02c9      	lsls	r1, r1, #11
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	4ba6      	ldr	r3, [pc, #664]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4ba5      	ldr	r3, [pc, #660]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0249      	lsls	r1, r1, #9
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e012      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000fa6:	4ba2      	ldr	r3, [pc, #648]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4ba1      	ldr	r3, [pc, #644]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000fac:	49a1      	ldr	r1, [pc, #644]	@ (8001234 <HAL_RCC_OscConfig+0x33c>)
 8000fae:	400a      	ands	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	4b9f      	ldr	r3, [pc, #636]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4b9b      	ldr	r3, [pc, #620]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b9a      	ldr	r3, [pc, #616]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	499c      	ldr	r1, [pc, #624]	@ (8001238 <HAL_RCC_OscConfig+0x340>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d014      	beq.n	8000ffe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fd02 	bl	80009dc <HAL_GetTick>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fde:	f7ff fcfd 	bl	80009dc <HAL_GetTick>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b64      	cmp	r3, #100	@ 0x64
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e2f9      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ff0:	4b8f      	ldr	r3, [pc, #572]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	029b      	lsls	r3, r3, #10
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0xe6>
 8000ffc:	e015      	b.n	800102a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fced 	bl	80009dc <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fce8 	bl	80009dc <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	@ 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e2e4      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800101a:	4b85      	ldr	r3, [pc, #532]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	2380      	movs	r3, #128	@ 0x80
 8001020:	029b      	lsls	r3, r3, #10
 8001022:	4013      	ands	r3, r2
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x110>
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2202      	movs	r2, #2
 8001030:	4013      	ands	r3, r2
 8001032:	d100      	bne.n	8001036 <HAL_RCC_OscConfig+0x13e>
 8001034:	e099      	b.n	800116a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103e:	2220      	movs	r2, #32
 8001040:	4013      	ands	r3, r2
 8001042:	d009      	beq.n	8001058 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001044:	4b7a      	ldr	r3, [pc, #488]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b79      	ldr	r3, [pc, #484]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 800104a:	2120      	movs	r1, #32
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001052:	2220      	movs	r2, #32
 8001054:	4393      	bics	r3, r2
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	2b04      	cmp	r3, #4
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d13e      	bne.n	80010e2 <HAL_RCC_OscConfig+0x1ea>
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d13b      	bne.n	80010e2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800106a:	4b71      	ldr	r3, [pc, #452]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2204      	movs	r2, #4
 8001070:	4013      	ands	r3, r2
 8001072:	d004      	beq.n	800107e <HAL_RCC_OscConfig+0x186>
 8001074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e2b2      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107e:	4b6c      	ldr	r3, [pc, #432]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a6e      	ldr	r2, [pc, #440]	@ (800123c <HAL_RCC_OscConfig+0x344>)
 8001084:	4013      	ands	r3, r2
 8001086:	0019      	movs	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	021a      	lsls	r2, r3, #8
 800108e:	4b68      	ldr	r3, [pc, #416]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001090:	430a      	orrs	r2, r1
 8001092:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001094:	4b66      	ldr	r3, [pc, #408]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2209      	movs	r2, #9
 800109a:	4393      	bics	r3, r2
 800109c:	0019      	movs	r1, r3
 800109e:	4b64      	ldr	r3, [pc, #400]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 80010a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a6:	f000 fbeb 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 80010aa:	0001      	movs	r1, r0
 80010ac:	4b60      	ldr	r3, [pc, #384]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	220f      	movs	r2, #15
 80010b4:	4013      	ands	r3, r2
 80010b6:	4a62      	ldr	r2, [pc, #392]	@ (8001240 <HAL_RCC_OscConfig+0x348>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	000a      	movs	r2, r1
 80010bc:	40da      	lsrs	r2, r3
 80010be:	4b61      	ldr	r3, [pc, #388]	@ (8001244 <HAL_RCC_OscConfig+0x34c>)
 80010c0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010c2:	4b61      	ldr	r3, [pc, #388]	@ (8001248 <HAL_RCC_OscConfig+0x350>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2513      	movs	r5, #19
 80010c8:	197c      	adds	r4, r7, r5
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff fc40 	bl	8000950 <HAL_InitTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010d4:	197b      	adds	r3, r7, r5
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d046      	beq.n	800116a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80010dc:	197b      	adds	r3, r7, r5
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	e280      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d027      	beq.n	8001138 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010e8:	4b51      	ldr	r3, [pc, #324]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2209      	movs	r2, #9
 80010ee:	4393      	bics	r3, r2
 80010f0:	0019      	movs	r1, r3
 80010f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 80010f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fc6f 	bl	80009dc <HAL_GetTick>
 80010fe:	0003      	movs	r3, r0
 8001100:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fc6a 	bl	80009dc <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e266      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001116:	4b46      	ldr	r3, [pc, #280]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2204      	movs	r2, #4
 800111c:	4013      	ands	r3, r2
 800111e:	d0f1      	beq.n	8001104 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b43      	ldr	r3, [pc, #268]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a45      	ldr	r2, [pc, #276]	@ (800123c <HAL_RCC_OscConfig+0x344>)
 8001126:	4013      	ands	r3, r2
 8001128:	0019      	movs	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	021a      	lsls	r2, r3, #8
 8001130:	4b3f      	ldr	r3, [pc, #252]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001132:	430a      	orrs	r2, r1
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	e018      	b.n	800116a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001138:	4b3d      	ldr	r3, [pc, #244]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b3c      	ldr	r3, [pc, #240]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 800113e:	2101      	movs	r1, #1
 8001140:	438a      	bics	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fc4a 	bl	80009dc <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800114e:	f7ff fc45 	bl	80009dc <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e241      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001160:	4b33      	ldr	r3, [pc, #204]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2204      	movs	r2, #4
 8001166:	4013      	ands	r3, r2
 8001168:	d1f1      	bne.n	800114e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2210      	movs	r2, #16
 8001170:	4013      	ands	r3, r2
 8001172:	d100      	bne.n	8001176 <HAL_RCC_OscConfig+0x27e>
 8001174:	e0a1      	b.n	80012ba <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d140      	bne.n	80011fe <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800117c:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4013      	ands	r3, r2
 8001186:	d005      	beq.n	8001194 <HAL_RCC_OscConfig+0x29c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e227      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001194:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a2c      	ldr	r2, [pc, #176]	@ (800124c <HAL_RCC_OscConfig+0x354>)
 800119a:	4013      	ands	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1a      	ldr	r2, [r3, #32]
 80011a2:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a8:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	0a19      	lsrs	r1, r3, #8
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	061a      	lsls	r2, r3, #24
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 80011b8:	430a      	orrs	r2, r1
 80011ba:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	0b5b      	lsrs	r3, r3, #13
 80011c2:	3301      	adds	r3, #1
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	0212      	lsls	r2, r2, #8
 80011c8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011ca:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	210f      	movs	r1, #15
 80011d2:	400b      	ands	r3, r1
 80011d4:	491a      	ldr	r1, [pc, #104]	@ (8001240 <HAL_RCC_OscConfig+0x348>)
 80011d6:	5ccb      	ldrb	r3, [r1, r3]
 80011d8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <HAL_RCC_OscConfig+0x34c>)
 80011dc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <HAL_RCC_OscConfig+0x350>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2513      	movs	r5, #19
 80011e4:	197c      	adds	r4, r7, r5
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff fbb2 	bl	8000950 <HAL_InitTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80011f0:	197b      	adds	r3, r7, r5
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d060      	beq.n	80012ba <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80011f8:	197b      	adds	r3, r7, r5
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	e1f2      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d03f      	beq.n	8001286 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001206:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 800120c:	2180      	movs	r1, #128	@ 0x80
 800120e:	0049      	lsls	r1, r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fbe2 	bl	80009dc <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800121c:	e018      	b.n	8001250 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121e:	f7ff fbdd 	bl	80009dc <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d911      	bls.n	8001250 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1d9      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
 8001230:	40021000 	.word	0x40021000
 8001234:	fffeffff 	.word	0xfffeffff
 8001238:	fffbffff 	.word	0xfffbffff
 800123c:	ffffe0ff 	.word	0xffffe0ff
 8001240:	08002dec 	.word	0x08002dec
 8001244:	20000000 	.word	0x20000000
 8001248:	20000004 	.word	0x20000004
 800124c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001250:	4bc9      	ldr	r3, [pc, #804]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d0e0      	beq.n	800121e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125c:	4bc6      	ldr	r3, [pc, #792]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4ac6      	ldr	r2, [pc, #792]	@ (800157c <HAL_RCC_OscConfig+0x684>)
 8001262:	4013      	ands	r3, r2
 8001264:	0019      	movs	r1, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1a      	ldr	r2, [r3, #32]
 800126a:	4bc3      	ldr	r3, [pc, #780]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 800126c:	430a      	orrs	r2, r1
 800126e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001270:	4bc1      	ldr	r3, [pc, #772]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	0a19      	lsrs	r1, r3, #8
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	061a      	lsls	r2, r3, #24
 800127e:	4bbe      	ldr	r3, [pc, #760]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001280:	430a      	orrs	r2, r1
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	e019      	b.n	80012ba <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001286:	4bbc      	ldr	r3, [pc, #752]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4bbb      	ldr	r3, [pc, #748]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 800128c:	49bc      	ldr	r1, [pc, #752]	@ (8001580 <HAL_RCC_OscConfig+0x688>)
 800128e:	400a      	ands	r2, r1
 8001290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fba3 	bl	80009dc <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800129c:	f7ff fb9e 	bl	80009dc <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e19a      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012ae:	4bb2      	ldr	r3, [pc, #712]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2380      	movs	r3, #128	@ 0x80
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4013      	ands	r3, r2
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2208      	movs	r2, #8
 80012c0:	4013      	ands	r3, r2
 80012c2:	d036      	beq.n	8001332 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d019      	beq.n	8001300 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012cc:	4baa      	ldr	r3, [pc, #680]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80012ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012d0:	4ba9      	ldr	r3, [pc, #676]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fb80 	bl	80009dc <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e2:	f7ff fb7b 	bl	80009dc <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e177      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80012f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012f8:	2202      	movs	r2, #2
 80012fa:	4013      	ands	r3, r2
 80012fc:	d0f1      	beq.n	80012e2 <HAL_RCC_OscConfig+0x3ea>
 80012fe:	e018      	b.n	8001332 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001300:	4b9d      	ldr	r3, [pc, #628]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001302:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001304:	4b9c      	ldr	r3, [pc, #624]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001306:	2101      	movs	r1, #1
 8001308:	438a      	bics	r2, r1
 800130a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130c:	f7ff fb66 	bl	80009dc <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff fb61 	bl	80009dc <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e15d      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001328:	4b93      	ldr	r3, [pc, #588]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 800132a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d1f1      	bne.n	8001316 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2204      	movs	r2, #4
 8001338:	4013      	ands	r3, r2
 800133a:	d100      	bne.n	800133e <HAL_RCC_OscConfig+0x446>
 800133c:	e0ae      	b.n	800149c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2023      	movs	r0, #35	@ 0x23
 8001340:	183b      	adds	r3, r7, r0
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4b8c      	ldr	r3, [pc, #560]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	055b      	lsls	r3, r3, #21
 800134e:	4013      	ands	r3, r2
 8001350:	d109      	bne.n	8001366 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b89      	ldr	r3, [pc, #548]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001356:	4b88      	ldr	r3, [pc, #544]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001358:	2180      	movs	r1, #128	@ 0x80
 800135a:	0549      	lsls	r1, r1, #21
 800135c:	430a      	orrs	r2, r1
 800135e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001360:	183b      	adds	r3, r7, r0
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b87      	ldr	r3, [pc, #540]	@ (8001584 <HAL_RCC_OscConfig+0x68c>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4013      	ands	r3, r2
 8001370:	d11a      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b84      	ldr	r3, [pc, #528]	@ (8001584 <HAL_RCC_OscConfig+0x68c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b83      	ldr	r3, [pc, #524]	@ (8001584 <HAL_RCC_OscConfig+0x68c>)
 8001378:	2180      	movs	r1, #128	@ 0x80
 800137a:	0049      	lsls	r1, r1, #1
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001380:	f7ff fb2c 	bl	80009dc <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138a:	f7ff fb27 	bl	80009dc <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b64      	cmp	r3, #100	@ 0x64
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e123      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	4b79      	ldr	r3, [pc, #484]	@ (8001584 <HAL_RCC_OscConfig+0x68c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	@ 0x80
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d107      	bne.n	80013c4 <HAL_RCC_OscConfig+0x4cc>
 80013b4:	4b70      	ldr	r3, [pc, #448]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80013b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80013ba:	2180      	movs	r1, #128	@ 0x80
 80013bc:	0049      	lsls	r1, r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80013c2:	e031      	b.n	8001428 <HAL_RCC_OscConfig+0x530>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x4ee>
 80013cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80013ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013d0:	4b69      	ldr	r3, [pc, #420]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80013d2:	496b      	ldr	r1, [pc, #428]	@ (8001580 <HAL_RCC_OscConfig+0x688>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80013d8:	4b67      	ldr	r3, [pc, #412]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80013da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013dc:	4b66      	ldr	r3, [pc, #408]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80013de:	496a      	ldr	r1, [pc, #424]	@ (8001588 <HAL_RCC_OscConfig+0x690>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80013e4:	e020      	b.n	8001428 <HAL_RCC_OscConfig+0x530>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	23a0      	movs	r3, #160	@ 0xa0
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d10e      	bne.n	8001410 <HAL_RCC_OscConfig+0x518>
 80013f2:	4b61      	ldr	r3, [pc, #388]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80013f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013f6:	4b60      	ldr	r3, [pc, #384]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	00c9      	lsls	r1, r1, #3
 80013fc:	430a      	orrs	r2, r1
 80013fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001400:	4b5d      	ldr	r3, [pc, #372]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001402:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001404:	4b5c      	ldr	r3, [pc, #368]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001406:	2180      	movs	r1, #128	@ 0x80
 8001408:	0049      	lsls	r1, r1, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	651a      	str	r2, [r3, #80]	@ 0x50
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x530>
 8001410:	4b59      	ldr	r3, [pc, #356]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001412:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001414:	4b58      	ldr	r3, [pc, #352]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001416:	495a      	ldr	r1, [pc, #360]	@ (8001580 <HAL_RCC_OscConfig+0x688>)
 8001418:	400a      	ands	r2, r1
 800141a:	651a      	str	r2, [r3, #80]	@ 0x50
 800141c:	4b56      	ldr	r3, [pc, #344]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 800141e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001420:	4b55      	ldr	r3, [pc, #340]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001422:	4959      	ldr	r1, [pc, #356]	@ (8001588 <HAL_RCC_OscConfig+0x690>)
 8001424:	400a      	ands	r2, r1
 8001426:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d015      	beq.n	800145c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fad4 	bl	80009dc <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001438:	e009      	b.n	800144e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff facf 	bl	80009dc <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4a51      	ldr	r2, [pc, #324]	@ (800158c <HAL_RCC_OscConfig+0x694>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0ca      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800144e:	4b4a      	ldr	r3, [pc, #296]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4013      	ands	r3, r2
 8001458:	d0ef      	beq.n	800143a <HAL_RCC_OscConfig+0x542>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fabe 	bl	80009dc <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001464:	e009      	b.n	800147a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7ff fab9 	bl	80009dc <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	4a46      	ldr	r2, [pc, #280]	@ (800158c <HAL_RCC_OscConfig+0x694>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e0b4      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800147a:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 800147c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4013      	ands	r3, r2
 8001484:	d1ef      	bne.n	8001466 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001486:	2323      	movs	r3, #35	@ 0x23
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001490:	4b39      	ldr	r3, [pc, #228]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001494:	4b38      	ldr	r3, [pc, #224]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001496:	493e      	ldr	r1, [pc, #248]	@ (8001590 <HAL_RCC_OscConfig+0x698>)
 8001498:	400a      	ands	r2, r1
 800149a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d100      	bne.n	80014a6 <HAL_RCC_OscConfig+0x5ae>
 80014a4:	e09d      	b.n	80015e2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x5b6>
 80014ac:	e076      	b.n	800159c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d145      	bne.n	8001542 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b30      	ldr	r3, [pc, #192]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80014bc:	4935      	ldr	r1, [pc, #212]	@ (8001594 <HAL_RCC_OscConfig+0x69c>)
 80014be:	400a      	ands	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fa8b 	bl	80009dc <HAL_GetTick>
 80014c6:	0003      	movs	r3, r0
 80014c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff fa86 	bl	80009dc <HAL_GetTick>
 80014d0:	0002      	movs	r2, r0
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e082      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014de:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	049b      	lsls	r3, r3, #18
 80014e6:	4013      	ands	r3, r2
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ea:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001598 <HAL_RCC_OscConfig+0x6a0>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	0019      	movs	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	431a      	orrs	r2, r3
 8001504:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001506:	430a      	orrs	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	0449      	lsls	r1, r1, #17
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fa60 	bl	80009dc <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff fa5b 	bl	80009dc <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e057      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001534:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	049b      	lsls	r3, r3, #18
 800153c:	4013      	ands	r3, r2
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x62a>
 8001540:	e04f      	b.n	80015e2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 8001548:	4912      	ldr	r1, [pc, #72]	@ (8001594 <HAL_RCC_OscConfig+0x69c>)
 800154a:	400a      	ands	r2, r1
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fa45 	bl	80009dc <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fa40 	bl	80009dc <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e03c      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800156a:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <HAL_RCC_OscConfig+0x680>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	049b      	lsls	r3, r3, #18
 8001572:	4013      	ands	r3, r2
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x660>
 8001576:	e034      	b.n	80015e2 <HAL_RCC_OscConfig+0x6ea>
 8001578:	40021000 	.word	0x40021000
 800157c:	ffff1fff 	.word	0xffff1fff
 8001580:	fffffeff 	.word	0xfffffeff
 8001584:	40007000 	.word	0x40007000
 8001588:	fffffbff 	.word	0xfffffbff
 800158c:	00001388 	.word	0x00001388
 8001590:	efffffff 	.word	0xefffffff
 8001594:	feffffff 	.word	0xfeffffff
 8001598:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e01d      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015a8:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_RCC_OscConfig+0x6f4>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	401a      	ands	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d10f      	bne.n	80015de <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	23f0      	movs	r3, #240	@ 0xf0
 80015c2:	039b      	lsls	r3, r3, #14
 80015c4:	401a      	ands	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d107      	bne.n	80015de <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	23c0      	movs	r3, #192	@ 0xc0
 80015d2:	041b      	lsls	r3, r3, #16
 80015d4:	401a      	ands	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b00a      	add	sp, #40	@ 0x28
 80015ea:	bdb0      	pop	{r4, r5, r7, pc}
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e128      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b96      	ldr	r3, [pc, #600]	@ (8001860 <HAL_RCC_ClockConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2201      	movs	r2, #1
 800160a:	4013      	ands	r3, r2
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d91e      	bls.n	8001650 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b93      	ldr	r3, [pc, #588]	@ (8001860 <HAL_RCC_ClockConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4393      	bics	r3, r2
 800161a:	0019      	movs	r1, r3
 800161c:	4b90      	ldr	r3, [pc, #576]	@ (8001860 <HAL_RCC_ClockConfig+0x270>)
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001624:	f7ff f9da 	bl	80009dc <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162c:	e009      	b.n	8001642 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162e:	f7ff f9d5 	bl	80009dc <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	4a8a      	ldr	r2, [pc, #552]	@ (8001864 <HAL_RCC_ClockConfig+0x274>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e109      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b87      	ldr	r3, [pc, #540]	@ (8001860 <HAL_RCC_ClockConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4013      	ands	r3, r2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d1ee      	bne.n	800162e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2202      	movs	r2, #2
 8001656:	4013      	ands	r3, r2
 8001658:	d009      	beq.n	800166e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165a:	4b83      	ldr	r3, [pc, #524]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	22f0      	movs	r2, #240	@ 0xf0
 8001660:	4393      	bics	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	4b7f      	ldr	r3, [pc, #508]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 800166a:	430a      	orrs	r2, r1
 800166c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2201      	movs	r2, #1
 8001674:	4013      	ands	r3, r2
 8001676:	d100      	bne.n	800167a <HAL_RCC_ClockConfig+0x8a>
 8001678:	e089      	b.n	800178e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001682:	4b79      	ldr	r3, [pc, #484]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	@ 0x80
 8001688:	029b      	lsls	r3, r3, #10
 800168a:	4013      	ands	r3, r2
 800168c:	d120      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0e1      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800169a:	4b73      	ldr	r3, [pc, #460]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	2380      	movs	r3, #128	@ 0x80
 80016a0:	049b      	lsls	r3, r3, #18
 80016a2:	4013      	ands	r3, r2
 80016a4:	d114      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0d5      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2204      	movs	r2, #4
 80016b8:	4013      	ands	r3, r2
 80016ba:	d109      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0ca      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016c0:	4b69      	ldr	r3, [pc, #420]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0c2      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d0:	4b65      	ldr	r3, [pc, #404]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2203      	movs	r2, #3
 80016d6:	4393      	bics	r3, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4b62      	ldr	r3, [pc, #392]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e4:	f7ff f97a 	bl	80009dc <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d111      	bne.n	8001718 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f4:	e009      	b.n	800170a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f6:	f7ff f971 	bl	80009dc <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <HAL_RCC_ClockConfig+0x274>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e0a5      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800170a:	4b57      	ldr	r3, [pc, #348]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	220c      	movs	r2, #12
 8001710:	4013      	ands	r3, r2
 8001712:	2b08      	cmp	r3, #8
 8001714:	d1ef      	bne.n	80016f6 <HAL_RCC_ClockConfig+0x106>
 8001716:	e03a      	b.n	800178e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d111      	bne.n	8001744 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	e009      	b.n	8001736 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f7ff f95b 	bl	80009dc <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a4d      	ldr	r2, [pc, #308]	@ (8001864 <HAL_RCC_ClockConfig+0x274>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e08f      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001736:	4b4c      	ldr	r3, [pc, #304]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	220c      	movs	r2, #12
 800173c:	4013      	ands	r3, r2
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d1ef      	bne.n	8001722 <HAL_RCC_ClockConfig+0x132>
 8001742:	e024      	b.n	800178e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d11b      	bne.n	8001784 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800174c:	e009      	b.n	8001762 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174e:	f7ff f945 	bl	80009dc <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a42      	ldr	r2, [pc, #264]	@ (8001864 <HAL_RCC_ClockConfig+0x274>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e079      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001762:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	220c      	movs	r2, #12
 8001768:	4013      	ands	r3, r2
 800176a:	2b04      	cmp	r3, #4
 800176c:	d1ef      	bne.n	800174e <HAL_RCC_ClockConfig+0x15e>
 800176e:	e00e      	b.n	800178e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff f934 	bl	80009dc <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4a3a      	ldr	r2, [pc, #232]	@ (8001864 <HAL_RCC_ClockConfig+0x274>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e068      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001784:	4b38      	ldr	r3, [pc, #224]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	220c      	movs	r2, #12
 800178a:	4013      	ands	r3, r2
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800178e:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <HAL_RCC_ClockConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2201      	movs	r2, #1
 8001794:	4013      	ands	r3, r2
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d21e      	bcs.n	80017da <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179c:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <HAL_RCC_ClockConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2201      	movs	r2, #1
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <HAL_RCC_ClockConfig+0x270>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017ae:	f7ff f915 	bl	80009dc <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	e009      	b.n	80017cc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff f910 	bl	80009dc <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <HAL_RCC_ClockConfig+0x274>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e044      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_RCC_ClockConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4013      	ands	r3, r2
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d1ee      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2204      	movs	r2, #4
 80017e0:	4013      	ands	r3, r2
 80017e2:	d009      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e4:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a20      	ldr	r2, [pc, #128]	@ (800186c <HAL_RCC_ClockConfig+0x27c>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 80017f4:	430a      	orrs	r2, r1
 80017f6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2208      	movs	r2, #8
 80017fe:	4013      	ands	r3, r2
 8001800:	d00a      	beq.n	8001818 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001802:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	4a1a      	ldr	r2, [pc, #104]	@ (8001870 <HAL_RCC_ClockConfig+0x280>)
 8001808:	4013      	ands	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	00da      	lsls	r2, r3, #3
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 8001814:	430a      	orrs	r2, r1
 8001816:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001818:	f000 f832 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 800181c:	0001      	movs	r1, r0
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_RCC_ClockConfig+0x278>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	220f      	movs	r2, #15
 8001826:	4013      	ands	r3, r2
 8001828:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <HAL_RCC_ClockConfig+0x284>)
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	000a      	movs	r2, r1
 800182e:	40da      	lsrs	r2, r3
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <HAL_RCC_ClockConfig+0x288>)
 8001832:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_RCC_ClockConfig+0x28c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	250b      	movs	r5, #11
 800183a:	197c      	adds	r4, r7, r5
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff f887 	bl	8000950 <HAL_InitTick>
 8001842:	0003      	movs	r3, r0
 8001844:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001846:	197b      	adds	r3, r7, r5
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800184e:	197b      	adds	r3, r7, r5
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	e000      	b.n	8001856 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b004      	add	sp, #16
 800185c:	bdb0      	pop	{r4, r5, r7, pc}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	40022000 	.word	0x40022000
 8001864:	00001388 	.word	0x00001388
 8001868:	40021000 	.word	0x40021000
 800186c:	fffff8ff 	.word	0xfffff8ff
 8001870:	ffffc7ff 	.word	0xffffc7ff
 8001874:	08002dec 	.word	0x08002dec
 8001878:	20000000 	.word	0x20000000
 800187c:	20000004 	.word	0x20000004

08001880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b08e      	sub	sp, #56	@ 0x38
 8001884:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001886:	4b4c      	ldr	r3, [pc, #304]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800188c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800188e:	230c      	movs	r3, #12
 8001890:	4013      	ands	r3, r2
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d014      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x40>
 8001896:	d900      	bls.n	800189a <HAL_RCC_GetSysClockFreq+0x1a>
 8001898:	e07b      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x112>
 800189a:	2b04      	cmp	r3, #4
 800189c:	d002      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x24>
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d00b      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x3a>
 80018a2:	e076      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018a4:	4b44      	ldr	r3, [pc, #272]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2210      	movs	r2, #16
 80018aa:	4013      	ands	r3, r2
 80018ac:	d002      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018ae:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x13c>)
 80018b0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018b2:	e07c      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018b4:	4b42      	ldr	r3, [pc, #264]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x140>)
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018b8:	e079      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018ba:	4b42      	ldr	r3, [pc, #264]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80018bc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018be:	e076      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c2:	0c9a      	lsrs	r2, r3, #18
 80018c4:	230f      	movs	r3, #15
 80018c6:	401a      	ands	r2, r3
 80018c8:	4b3f      	ldr	r3, [pc, #252]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x148>)
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d0:	0d9a      	lsrs	r2, r3, #22
 80018d2:	2303      	movs	r3, #3
 80018d4:	4013      	ands	r3, r2
 80018d6:	3301      	adds	r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018da:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	025b      	lsls	r3, r3, #9
 80018e2:	4013      	ands	r3, r2
 80018e4:	d01a      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	4a35      	ldr	r2, [pc, #212]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80018f0:	2300      	movs	r3, #0
 80018f2:	69b8      	ldr	r0, [r7, #24]
 80018f4:	69f9      	ldr	r1, [r7, #28]
 80018f6:	f7fe fcb3 	bl	8000260 <__aeabi_lmul>
 80018fa:	0002      	movs	r2, r0
 80018fc:	000b      	movs	r3, r1
 80018fe:	0010      	movs	r0, r2
 8001900:	0019      	movs	r1, r3
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f7fe fc87 	bl	8000220 <__aeabi_uldivmod>
 8001912:	0002      	movs	r2, r0
 8001914:	000b      	movs	r3, r1
 8001916:	0013      	movs	r3, r2
 8001918:	637b      	str	r3, [r7, #52]	@ 0x34
 800191a:	e037      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800191c:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x138>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2210      	movs	r2, #16
 8001922:	4013      	ands	r3, r2
 8001924:	d01a      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4a23      	ldr	r2, [pc, #140]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001930:	2300      	movs	r3, #0
 8001932:	68b8      	ldr	r0, [r7, #8]
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	f7fe fc93 	bl	8000260 <__aeabi_lmul>
 800193a:	0002      	movs	r2, r0
 800193c:	000b      	movs	r3, r1
 800193e:	0010      	movs	r0, r2
 8001940:	0019      	movs	r1, r3
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f7fe fc67 	bl	8000220 <__aeabi_uldivmod>
 8001952:	0002      	movs	r2, r0
 8001954:	000b      	movs	r3, r1
 8001956:	0013      	movs	r3, r2
 8001958:	637b      	str	r3, [r7, #52]	@ 0x34
 800195a:	e017      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800195c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195e:	0018      	movs	r0, r3
 8001960:	2300      	movs	r3, #0
 8001962:	0019      	movs	r1, r3
 8001964:	4a16      	ldr	r2, [pc, #88]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001966:	2300      	movs	r3, #0
 8001968:	f7fe fc7a 	bl	8000260 <__aeabi_lmul>
 800196c:	0002      	movs	r2, r0
 800196e:	000b      	movs	r3, r1
 8001970:	0010      	movs	r0, r2
 8001972:	0019      	movs	r1, r3
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	001c      	movs	r4, r3
 8001978:	2300      	movs	r3, #0
 800197a:	001d      	movs	r5, r3
 800197c:	0022      	movs	r2, r4
 800197e:	002b      	movs	r3, r5
 8001980:	f7fe fc4e 	bl	8000220 <__aeabi_uldivmod>
 8001984:	0002      	movs	r2, r0
 8001986:	000b      	movs	r3, r1
 8001988:	0013      	movs	r3, r2
 800198a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800198c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001990:	e00d      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	0b5b      	lsrs	r3, r3, #13
 8001998:	2207      	movs	r2, #7
 800199a:	4013      	ands	r3, r2
 800199c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	3301      	adds	r3, #1
 80019a2:	2280      	movs	r2, #128	@ 0x80
 80019a4:	0212      	lsls	r2, r2, #8
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019ac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b00e      	add	sp, #56	@ 0x38
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	003d0900 	.word	0x003d0900
 80019c0:	00f42400 	.word	0x00f42400
 80019c4:	007a1200 	.word	0x007a1200
 80019c8:	08002e04 	.word	0x08002e04

080019cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d0:	4b02      	ldr	r3, [pc, #8]	@ (80019dc <HAL_RCC_GetHCLKFreq+0x10>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	20000000 	.word	0x20000000

080019e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e4:	f7ff fff2 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 80019e8:	0001      	movs	r1, r0
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	2207      	movs	r2, #7
 80019f2:	4013      	ands	r3, r2
 80019f4:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	40d9      	lsrs	r1, r3
 80019fa:	000b      	movs	r3, r1
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	40021000 	.word	0x40021000
 8001a08:	08002dfc 	.word	0x08002dfc

08001a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a10:	f7ff ffdc 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 8001a14:	0001      	movs	r1, r0
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	0adb      	lsrs	r3, r3, #11
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	4013      	ands	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	40d9      	lsrs	r1, r3
 8001a26:	000b      	movs	r3, r1
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08002dfc 	.word	0x08002dfc

08001a38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a40:	2017      	movs	r0, #23
 8001a42:	183b      	adds	r3, r7, r0
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d100      	bne.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001a52:	e0c7      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a54:	4b84      	ldr	r3, [pc, #528]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	055b      	lsls	r3, r3, #21
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d109      	bne.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b81      	ldr	r3, [pc, #516]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a64:	4b80      	ldr	r3, [pc, #512]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	0549      	lsls	r1, r1, #21
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001a6e:	183b      	adds	r3, r7, r0
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b7d      	ldr	r3, [pc, #500]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d11a      	bne.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a80:	4b7a      	ldr	r3, [pc, #488]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b79      	ldr	r3, [pc, #484]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a86:	2180      	movs	r1, #128	@ 0x80
 8001a88:	0049      	lsls	r1, r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7fe ffa5 	bl	80009dc <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a96:	e008      	b.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a98:	f7fe ffa0 	bl	80009dc <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	@ 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e0d9      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b70      	ldr	r3, [pc, #448]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	23c0      	movs	r3, #192	@ 0xc0
 8001abc:	039b      	lsls	r3, r3, #14
 8001abe:	4013      	ands	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	23c0      	movs	r3, #192	@ 0xc0
 8001ac8:	039b      	lsls	r3, r3, #14
 8001aca:	4013      	ands	r3, r2
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d013      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	23c0      	movs	r3, #192	@ 0xc0
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	401a      	ands	r2, r3
 8001adc:	23c0      	movs	r3, #192	@ 0xc0
 8001ade:	029b      	lsls	r3, r3, #10
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10a      	bne.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ae4:	4b60      	ldr	r3, [pc, #384]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	029b      	lsls	r3, r3, #10
 8001aec:	401a      	ands	r2, r3
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	029b      	lsls	r3, r3, #10
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d101      	bne.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0b1      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001afa:	4b5b      	ldr	r3, [pc, #364]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001afc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001afe:	23c0      	movs	r3, #192	@ 0xc0
 8001b00:	029b      	lsls	r3, r3, #10
 8001b02:	4013      	ands	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d03b      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	23c0      	movs	r3, #192	@ 0xc0
 8001b12:	029b      	lsls	r3, r3, #10
 8001b14:	4013      	ands	r3, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d033      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2220      	movs	r2, #32
 8001b22:	4013      	ands	r3, r2
 8001b24:	d02e      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b26:	4b50      	ldr	r3, [pc, #320]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b2a:	4a51      	ldr	r2, [pc, #324]	@ (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b30:	4b4d      	ldr	r3, [pc, #308]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b34:	4b4c      	ldr	r3, [pc, #304]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b36:	2180      	movs	r1, #128	@ 0x80
 8001b38:	0309      	lsls	r1, r1, #12
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b42:	4b49      	ldr	r3, [pc, #292]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b44:	494b      	ldr	r1, [pc, #300]	@ (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001b46:	400a      	ands	r2, r1
 8001b48:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001b4a:	4b47      	ldr	r3, [pc, #284]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d014      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7fe ff3f 	bl	80009dc <HAL_GetTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b62:	e009      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7fe ff3a 	bl	80009dc <HAL_GetTick>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	4a42      	ldr	r2, [pc, #264]	@ (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e072      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b78:	4b3b      	ldr	r3, [pc, #236]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0ef      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	23c0      	movs	r3, #192	@ 0xc0
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	401a      	ands	r2, r3
 8001b98:	23c0      	movs	r3, #192	@ 0xc0
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d10c      	bne.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001ba0:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a35      	ldr	r2, [pc, #212]	@ (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	23c0      	movs	r3, #192	@ 0xc0
 8001bb0:	039b      	lsls	r3, r3, #14
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	23c0      	movs	r3, #192	@ 0xc0
 8001bc4:	029b      	lsls	r3, r3, #10
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bce:	2317      	movs	r3, #23
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd8:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bdc:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bde:	4928      	ldr	r1, [pc, #160]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bee:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2204      	movs	r2, #4
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c10:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2208      	movs	r2, #8
 8001c26:	4013      	ands	r3, r2
 8001c28:	d009      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	4a16      	ldr	r2, [pc, #88]	@ (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2280      	movs	r2, #128	@ 0x80
 8001c44:	4013      	ands	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001c48:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b006      	add	sp, #24
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	fffcffff 	.word	0xfffcffff
 8001c74:	fff7ffff 	.word	0xfff7ffff
 8001c78:	00001388 	.word	0x00001388
 8001c7c:	ffcfffff 	.word	0xffcfffff
 8001c80:	efffffff 	.word	0xefffffff
 8001c84:	fffff3ff 	.word	0xfffff3ff
 8001c88:	ffffcfff 	.word	0xffffcfff
 8001c8c:	fff3ffff 	.word	0xfff3ffff

08001c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e032      	b.n	8001d08 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2239      	movs	r2, #57	@ 0x39
 8001ca6:	5c9b      	ldrb	r3, [r3, r2]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2238      	movs	r2, #56	@ 0x38
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7fe fd6f 	bl	800079c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2239      	movs	r2, #57	@ 0x39
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	0019      	movs	r1, r3
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	f000 fa45 	bl	8002160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223e      	movs	r2, #62	@ 0x3e
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	223a      	movs	r2, #58	@ 0x3a
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223b      	movs	r2, #59	@ 0x3b
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	223c      	movs	r2, #60	@ 0x3c
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	223d      	movs	r2, #61	@ 0x3d
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2239      	movs	r2, #57	@ 0x39
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2239      	movs	r2, #57	@ 0x39
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d001      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e036      	b.n	8001d96 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2239      	movs	r2, #57	@ 0x39
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	05db      	lsls	r3, r3, #23
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d009      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x50>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a13      	ldr	r2, [pc, #76]	@ (8001da0 <HAL_TIM_Base_Start_IT+0x90>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x50>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a12      	ldr	r2, [pc, #72]	@ (8001da4 <HAL_TIM_Base_Start_IT+0x94>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d111      	bne.n	8001d84 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2207      	movs	r2, #7
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d010      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d82:	e007      	b.n	8001d94 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b004      	add	sp, #16
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	40010800 	.word	0x40010800
 8001da4:	40011400 	.word	0x40011400

08001da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d124      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d11d      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2203      	movs	r2, #3
 8001de4:	4013      	ands	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f9a0 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8001df0:	e007      	b.n	8001e02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 f993 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 f99f 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d125      	bne.n	8001e62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d11e      	bne.n	8001e62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2205      	movs	r2, #5
 8001e2a:	4252      	negs	r2, r2
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	23c0      	movs	r3, #192	@ 0xc0
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 f973 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8001e4a:	e007      	b.n	8001e5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 f966 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 f972 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d124      	bne.n	8001eba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2208      	movs	r2, #8
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11d      	bne.n	8001eba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2209      	movs	r2, #9
 8001e84:	4252      	negs	r2, r2
 8001e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2203      	movs	r2, #3
 8001e96:	4013      	ands	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 f947 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8001ea2:	e007      	b.n	8001eb4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f93a 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 f946 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b10      	cmp	r3, #16
 8001ec6:	d125      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2210      	movs	r2, #16
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d11e      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2211      	movs	r2, #17
 8001edc:	4252      	negs	r2, r2
 8001ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	23c0      	movs	r3, #192	@ 0xc0
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d004      	beq.n	8001efe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 f91a 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e007      	b.n	8001f0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f90d 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 f919 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10f      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d108      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2202      	movs	r2, #2
 8001f36:	4252      	negs	r2, r2
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7fe fab3 	bl	80004a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2240      	movs	r2, #64	@ 0x40
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b40      	cmp	r3, #64	@ 0x40
 8001f4e:	d10f      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2240      	movs	r2, #64	@ 0x40
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b40      	cmp	r3, #64	@ 0x40
 8001f5c:	d108      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2241      	movs	r2, #65	@ 0x41
 8001f64:	4252      	negs	r2, r2
 8001f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 f8f0 	bl	8002150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f82:	230f      	movs	r3, #15
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2238      	movs	r2, #56	@ 0x38
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_TIM_ConfigClockSource+0x20>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e0bc      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x19a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2238      	movs	r2, #56	@ 0x38
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2239      	movs	r2, #57	@ 0x39
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2277      	movs	r2, #119	@ 0x77
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4a58      	ldr	r2, [pc, #352]	@ (800211c <HAL_TIM_ConfigClockSource+0x1a4>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	0192      	lsls	r2, r2, #6
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d040      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0xde>
 8001fd4:	2280      	movs	r2, #128	@ 0x80
 8001fd6:	0192      	lsls	r2, r2, #6
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d900      	bls.n	8001fde <HAL_TIM_ConfigClockSource+0x66>
 8001fdc:	e088      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x178>
 8001fde:	2280      	movs	r2, #128	@ 0x80
 8001fe0:	0152      	lsls	r2, r2, #5
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d100      	bne.n	8001fe8 <HAL_TIM_ConfigClockSource+0x70>
 8001fe6:	e088      	b.n	80020fa <HAL_TIM_ConfigClockSource+0x182>
 8001fe8:	2280      	movs	r2, #128	@ 0x80
 8001fea:	0152      	lsls	r2, r2, #5
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d900      	bls.n	8001ff2 <HAL_TIM_ConfigClockSource+0x7a>
 8001ff0:	e07e      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x178>
 8001ff2:	2b70      	cmp	r3, #112	@ 0x70
 8001ff4:	d018      	beq.n	8002028 <HAL_TIM_ConfigClockSource+0xb0>
 8001ff6:	d900      	bls.n	8001ffa <HAL_TIM_ConfigClockSource+0x82>
 8001ff8:	e07a      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x178>
 8001ffa:	2b60      	cmp	r3, #96	@ 0x60
 8001ffc:	d04f      	beq.n	800209e <HAL_TIM_ConfigClockSource+0x126>
 8001ffe:	d900      	bls.n	8002002 <HAL_TIM_ConfigClockSource+0x8a>
 8002000:	e076      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x178>
 8002002:	2b50      	cmp	r3, #80	@ 0x50
 8002004:	d03b      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x106>
 8002006:	d900      	bls.n	800200a <HAL_TIM_ConfigClockSource+0x92>
 8002008:	e072      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x178>
 800200a:	2b40      	cmp	r3, #64	@ 0x40
 800200c:	d057      	beq.n	80020be <HAL_TIM_ConfigClockSource+0x146>
 800200e:	d900      	bls.n	8002012 <HAL_TIM_ConfigClockSource+0x9a>
 8002010:	e06e      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x178>
 8002012:	2b30      	cmp	r3, #48	@ 0x30
 8002014:	d063      	beq.n	80020de <HAL_TIM_ConfigClockSource+0x166>
 8002016:	d86b      	bhi.n	80020f0 <HAL_TIM_ConfigClockSource+0x178>
 8002018:	2b20      	cmp	r3, #32
 800201a:	d060      	beq.n	80020de <HAL_TIM_ConfigClockSource+0x166>
 800201c:	d868      	bhi.n	80020f0 <HAL_TIM_ConfigClockSource+0x178>
 800201e:	2b00      	cmp	r3, #0
 8002020:	d05d      	beq.n	80020de <HAL_TIM_ConfigClockSource+0x166>
 8002022:	2b10      	cmp	r3, #16
 8002024:	d05b      	beq.n	80020de <HAL_TIM_ConfigClockSource+0x166>
 8002026:	e063      	b.n	80020f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002038:	f000 f960 	bl	80022fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2277      	movs	r2, #119	@ 0x77
 8002048:	4313      	orrs	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	609a      	str	r2, [r3, #8]
      break;
 8002054:	e052      	b.n	80020fc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002066:	f000 f949 	bl	80022fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2180      	movs	r1, #128	@ 0x80
 8002076:	01c9      	lsls	r1, r1, #7
 8002078:	430a      	orrs	r2, r1
 800207a:	609a      	str	r2, [r3, #8]
      break;
 800207c:	e03e      	b.n	80020fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800208a:	001a      	movs	r2, r3
 800208c:	f000 f8bc 	bl	8002208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2150      	movs	r1, #80	@ 0x50
 8002096:	0018      	movs	r0, r3
 8002098:	f000 f916 	bl	80022c8 <TIM_ITRx_SetConfig>
      break;
 800209c:	e02e      	b.n	80020fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020aa:	001a      	movs	r2, r3
 80020ac:	f000 f8da 	bl	8002264 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2160      	movs	r1, #96	@ 0x60
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 f906 	bl	80022c8 <TIM_ITRx_SetConfig>
      break;
 80020bc:	e01e      	b.n	80020fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ca:	001a      	movs	r2, r3
 80020cc:	f000 f89c 	bl	8002208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2140      	movs	r1, #64	@ 0x40
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 f8f6 	bl	80022c8 <TIM_ITRx_SetConfig>
      break;
 80020dc:	e00e      	b.n	80020fc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0019      	movs	r1, r3
 80020e8:	0010      	movs	r0, r2
 80020ea:	f000 f8ed 	bl	80022c8 <TIM_ITRx_SetConfig>
      break;
 80020ee:	e005      	b.n	80020fc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80020f0:	230f      	movs	r3, #15
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
      break;
 80020f8:	e000      	b.n	80020fc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80020fa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2239      	movs	r2, #57	@ 0x39
 8002100:	2101      	movs	r1, #1
 8002102:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2238      	movs	r2, #56	@ 0x38
 8002108:	2100      	movs	r1, #0
 800210a:	5499      	strb	r1, [r3, r2]

  return status;
 800210c:	230f      	movs	r3, #15
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	781b      	ldrb	r3, [r3, #0]
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	ffff00ff 	.word	0xffff00ff

08002120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002128:	46c0      	nop			@ (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002148:	46c0      	nop			@ (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002158:	46c0      	nop			@ (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}

08002160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	2380      	movs	r3, #128	@ 0x80
 8002174:	05db      	lsls	r3, r3, #23
 8002176:	429a      	cmp	r2, r3
 8002178:	d007      	beq.n	800218a <TIM_Base_SetConfig+0x2a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1f      	ldr	r2, [pc, #124]	@ (80021fc <TIM_Base_SetConfig+0x9c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0x2a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <TIM_Base_SetConfig+0xa0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d108      	bne.n	800219c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2270      	movs	r2, #112	@ 0x70
 800218e:	4393      	bics	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	05db      	lsls	r3, r3, #23
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d007      	beq.n	80021b6 <TIM_Base_SetConfig+0x56>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a14      	ldr	r2, [pc, #80]	@ (80021fc <TIM_Base_SetConfig+0x9c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d003      	beq.n	80021b6 <TIM_Base_SetConfig+0x56>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a13      	ldr	r2, [pc, #76]	@ (8002200 <TIM_Base_SetConfig+0xa0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d108      	bne.n	80021c8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <TIM_Base_SetConfig+0xa4>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2280      	movs	r2, #128	@ 0x80
 80021cc:	4393      	bics	r3, r2
 80021ce:	001a      	movs	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	615a      	str	r2, [r3, #20]
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b004      	add	sp, #16
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40010800 	.word	0x40010800
 8002200:	40011400 	.word	0x40011400
 8002204:	fffffcff 	.word	0xfffffcff

08002208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	2201      	movs	r2, #1
 8002220:	4393      	bics	r3, r2
 8002222:	001a      	movs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	22f0      	movs	r2, #240	@ 0xf0
 8002232:	4393      	bics	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	220a      	movs	r2, #10
 8002244:	4393      	bics	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	621a      	str	r2, [r3, #32]
}
 800225c:	46c0      	nop			@ (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b006      	add	sp, #24
 8002262:	bd80      	pop	{r7, pc}

08002264 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	2210      	movs	r2, #16
 8002276:	4393      	bics	r3, r2
 8002278:	001a      	movs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <TIM_TI2_ConfigInputStage+0x60>)
 800228e:	4013      	ands	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	031b      	lsls	r3, r3, #12
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	22a0      	movs	r2, #160	@ 0xa0
 80022a0:	4393      	bics	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	621a      	str	r2, [r3, #32]
}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	ffff0fff 	.word	0xffff0fff

080022c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2270      	movs	r2, #112	@ 0x70
 80022dc:	4393      	bics	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	2207      	movs	r2, #7
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	609a      	str	r2, [r3, #8]
}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <TIM_ETR_SetConfig+0x3c>)
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	021a      	lsls	r2, r3, #8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	431a      	orrs	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	609a      	str	r2, [r3, #8]
}
 8002330:	46c0      	nop			@ (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b006      	add	sp, #24
 8002336:	bd80      	pop	{r7, pc}
 8002338:	ffff00ff 	.word	0xffff00ff

0800233c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2238      	movs	r2, #56	@ 0x38
 800234a:	5c9b      	ldrb	r3, [r3, r2]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002350:	2302      	movs	r3, #2
 8002352:	e042      	b.n	80023da <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2238      	movs	r2, #56	@ 0x38
 8002358:	2101      	movs	r1, #1
 800235a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2239      	movs	r2, #57	@ 0x39
 8002360:	2102      	movs	r1, #2
 8002362:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2270      	movs	r2, #112	@ 0x70
 8002378:	4393      	bics	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	05db      	lsls	r3, r3, #23
 8002396:	429a      	cmp	r2, r3
 8002398:	d009      	beq.n	80023ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0f      	ldr	r2, [pc, #60]	@ (80023e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10c      	bne.n	80023c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	4393      	bics	r3, r2
 80023b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2239      	movs	r2, #57	@ 0x39
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2238      	movs	r2, #56	@ 0x38
 80023d4:	2100      	movs	r1, #0
 80023d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	40010800 	.word	0x40010800
 80023e8:	40011400 	.word	0x40011400

080023ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e044      	b.n	8002488 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2278      	movs	r2, #120	@ 0x78
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f7fe f9e1 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2224      	movs	r2, #36	@ 0x24
 800241a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2101      	movs	r1, #1
 8002428:	438a      	bics	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 f830 	bl	8002494 <UART_SetConfig>
 8002434:	0003      	movs	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e024      	b.n	8002488 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0018      	movs	r0, r3
 800244a:	f000 fa6d 	bl	8002928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	490d      	ldr	r1, [pc, #52]	@ (8002490 <HAL_UART_Init+0xa4>)
 800245a:	400a      	ands	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	212a      	movs	r1, #42	@ 0x2a
 800246a:	438a      	bics	r2, r1
 800246c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 fb05 	bl	8002a90 <UART_CheckIdleState>
 8002486:	0003      	movs	r3, r0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}
 8002490:	ffffb7ff 	.word	0xffffb7ff

08002494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002494:	b5b0      	push	{r4, r5, r7, lr}
 8002496:	b08e      	sub	sp, #56	@ 0x38
 8002498:	af00      	add	r7, sp, #0
 800249a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800249c:	231a      	movs	r3, #26
 800249e:	2218      	movs	r2, #24
 80024a0:	189b      	adds	r3, r3, r2
 80024a2:	19db      	adds	r3, r3, r7
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4313      	orrs	r3, r2
 80024be:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4ab4      	ldr	r2, [pc, #720]	@ (8002798 <UART_SetConfig+0x304>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4aaf      	ldr	r2, [pc, #700]	@ (800279c <UART_SetConfig+0x308>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4aa9      	ldr	r2, [pc, #676]	@ (80027a0 <UART_SetConfig+0x30c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002504:	4313      	orrs	r3, r2
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4aa5      	ldr	r2, [pc, #660]	@ (80027a4 <UART_SetConfig+0x310>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4aa1      	ldr	r2, [pc, #644]	@ (80027a8 <UART_SetConfig+0x314>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d131      	bne.n	800258c <UART_SetConfig+0xf8>
 8002528:	4ba0      	ldr	r3, [pc, #640]	@ (80027ac <UART_SetConfig+0x318>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252c:	220c      	movs	r2, #12
 800252e:	4013      	ands	r3, r2
 8002530:	2b0c      	cmp	r3, #12
 8002532:	d01d      	beq.n	8002570 <UART_SetConfig+0xdc>
 8002534:	d823      	bhi.n	800257e <UART_SetConfig+0xea>
 8002536:	2b08      	cmp	r3, #8
 8002538:	d00c      	beq.n	8002554 <UART_SetConfig+0xc0>
 800253a:	d820      	bhi.n	800257e <UART_SetConfig+0xea>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <UART_SetConfig+0xb2>
 8002540:	2b04      	cmp	r3, #4
 8002542:	d00e      	beq.n	8002562 <UART_SetConfig+0xce>
 8002544:	e01b      	b.n	800257e <UART_SetConfig+0xea>
 8002546:	231b      	movs	r3, #27
 8002548:	2218      	movs	r2, #24
 800254a:	189b      	adds	r3, r3, r2
 800254c:	19db      	adds	r3, r3, r7
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e065      	b.n	8002620 <UART_SetConfig+0x18c>
 8002554:	231b      	movs	r3, #27
 8002556:	2218      	movs	r2, #24
 8002558:	189b      	adds	r3, r3, r2
 800255a:	19db      	adds	r3, r3, r7
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e05e      	b.n	8002620 <UART_SetConfig+0x18c>
 8002562:	231b      	movs	r3, #27
 8002564:	2218      	movs	r2, #24
 8002566:	189b      	adds	r3, r3, r2
 8002568:	19db      	adds	r3, r3, r7
 800256a:	2204      	movs	r2, #4
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e057      	b.n	8002620 <UART_SetConfig+0x18c>
 8002570:	231b      	movs	r3, #27
 8002572:	2218      	movs	r2, #24
 8002574:	189b      	adds	r3, r3, r2
 8002576:	19db      	adds	r3, r3, r7
 8002578:	2208      	movs	r2, #8
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e050      	b.n	8002620 <UART_SetConfig+0x18c>
 800257e:	231b      	movs	r3, #27
 8002580:	2218      	movs	r2, #24
 8002582:	189b      	adds	r3, r3, r2
 8002584:	19db      	adds	r3, r3, r7
 8002586:	2210      	movs	r2, #16
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e049      	b.n	8002620 <UART_SetConfig+0x18c>
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a83      	ldr	r2, [pc, #524]	@ (80027a0 <UART_SetConfig+0x30c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d13e      	bne.n	8002614 <UART_SetConfig+0x180>
 8002596:	4b85      	ldr	r3, [pc, #532]	@ (80027ac <UART_SetConfig+0x318>)
 8002598:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800259a:	23c0      	movs	r3, #192	@ 0xc0
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	4013      	ands	r3, r2
 80025a0:	22c0      	movs	r2, #192	@ 0xc0
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d027      	beq.n	80025f8 <UART_SetConfig+0x164>
 80025a8:	22c0      	movs	r2, #192	@ 0xc0
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d82a      	bhi.n	8002606 <UART_SetConfig+0x172>
 80025b0:	2280      	movs	r2, #128	@ 0x80
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d011      	beq.n	80025dc <UART_SetConfig+0x148>
 80025b8:	2280      	movs	r2, #128	@ 0x80
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	4293      	cmp	r3, r2
 80025be:	d822      	bhi.n	8002606 <UART_SetConfig+0x172>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d004      	beq.n	80025ce <UART_SetConfig+0x13a>
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	00d2      	lsls	r2, r2, #3
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00e      	beq.n	80025ea <UART_SetConfig+0x156>
 80025cc:	e01b      	b.n	8002606 <UART_SetConfig+0x172>
 80025ce:	231b      	movs	r3, #27
 80025d0:	2218      	movs	r2, #24
 80025d2:	189b      	adds	r3, r3, r2
 80025d4:	19db      	adds	r3, r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e021      	b.n	8002620 <UART_SetConfig+0x18c>
 80025dc:	231b      	movs	r3, #27
 80025de:	2218      	movs	r2, #24
 80025e0:	189b      	adds	r3, r3, r2
 80025e2:	19db      	adds	r3, r3, r7
 80025e4:	2202      	movs	r2, #2
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e01a      	b.n	8002620 <UART_SetConfig+0x18c>
 80025ea:	231b      	movs	r3, #27
 80025ec:	2218      	movs	r2, #24
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	19db      	adds	r3, r3, r7
 80025f2:	2204      	movs	r2, #4
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e013      	b.n	8002620 <UART_SetConfig+0x18c>
 80025f8:	231b      	movs	r3, #27
 80025fa:	2218      	movs	r2, #24
 80025fc:	189b      	adds	r3, r3, r2
 80025fe:	19db      	adds	r3, r3, r7
 8002600:	2208      	movs	r2, #8
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e00c      	b.n	8002620 <UART_SetConfig+0x18c>
 8002606:	231b      	movs	r3, #27
 8002608:	2218      	movs	r2, #24
 800260a:	189b      	adds	r3, r3, r2
 800260c:	19db      	adds	r3, r3, r7
 800260e:	2210      	movs	r2, #16
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e005      	b.n	8002620 <UART_SetConfig+0x18c>
 8002614:	231b      	movs	r3, #27
 8002616:	2218      	movs	r2, #24
 8002618:	189b      	adds	r3, r3, r2
 800261a:	19db      	adds	r3, r3, r7
 800261c:	2210      	movs	r2, #16
 800261e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a5e      	ldr	r2, [pc, #376]	@ (80027a0 <UART_SetConfig+0x30c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d000      	beq.n	800262c <UART_SetConfig+0x198>
 800262a:	e084      	b.n	8002736 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800262c:	231b      	movs	r3, #27
 800262e:	2218      	movs	r2, #24
 8002630:	189b      	adds	r3, r3, r2
 8002632:	19db      	adds	r3, r3, r7
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b08      	cmp	r3, #8
 8002638:	d01d      	beq.n	8002676 <UART_SetConfig+0x1e2>
 800263a:	dc20      	bgt.n	800267e <UART_SetConfig+0x1ea>
 800263c:	2b04      	cmp	r3, #4
 800263e:	d015      	beq.n	800266c <UART_SetConfig+0x1d8>
 8002640:	dc1d      	bgt.n	800267e <UART_SetConfig+0x1ea>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <UART_SetConfig+0x1b8>
 8002646:	2b02      	cmp	r3, #2
 8002648:	d005      	beq.n	8002656 <UART_SetConfig+0x1c2>
 800264a:	e018      	b.n	800267e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800264c:	f7ff f9c8 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 8002650:	0003      	movs	r3, r0
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002654:	e01c      	b.n	8002690 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002656:	4b55      	ldr	r3, [pc, #340]	@ (80027ac <UART_SetConfig+0x318>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2210      	movs	r2, #16
 800265c:	4013      	ands	r3, r2
 800265e:	d002      	beq.n	8002666 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002660:	4b53      	ldr	r3, [pc, #332]	@ (80027b0 <UART_SetConfig+0x31c>)
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002664:	e014      	b.n	8002690 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002666:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <UART_SetConfig+0x320>)
 8002668:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800266a:	e011      	b.n	8002690 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800266c:	f7ff f908 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 8002670:	0003      	movs	r3, r0
 8002672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002674:	e00c      	b.n	8002690 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002676:	2380      	movs	r3, #128	@ 0x80
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800267c:	e008      	b.n	8002690 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002682:	231a      	movs	r3, #26
 8002684:	2218      	movs	r2, #24
 8002686:	189b      	adds	r3, r3, r2
 8002688:	19db      	adds	r3, r3, r7
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
        break;
 800268e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d100      	bne.n	8002698 <UART_SetConfig+0x204>
 8002696:	e12f      	b.n	80028f8 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	0013      	movs	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	189b      	adds	r3, r3, r2
 80026a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d305      	bcc.n	80026b4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80026ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d906      	bls.n	80026c2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80026b4:	231a      	movs	r3, #26
 80026b6:	2218      	movs	r2, #24
 80026b8:	189b      	adds	r3, r3, r2
 80026ba:	19db      	adds	r3, r3, r7
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e11a      	b.n	80028f8 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80026c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	6939      	ldr	r1, [r7, #16]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	000b      	movs	r3, r1
 80026d0:	0e1b      	lsrs	r3, r3, #24
 80026d2:	0010      	movs	r0, r2
 80026d4:	0205      	lsls	r5, r0, #8
 80026d6:	431d      	orrs	r5, r3
 80026d8:	000b      	movs	r3, r1
 80026da:	021c      	lsls	r4, r3, #8
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68b8      	ldr	r0, [r7, #8]
 80026ea:	68f9      	ldr	r1, [r7, #12]
 80026ec:	1900      	adds	r0, r0, r4
 80026ee:	4169      	adcs	r1, r5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f7fd fd8f 	bl	8000220 <__aeabi_uldivmod>
 8002702:	0002      	movs	r2, r0
 8002704:	000b      	movs	r3, r1
 8002706:	0013      	movs	r3, r2
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800270a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800270c:	23c0      	movs	r3, #192	@ 0xc0
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d309      	bcc.n	8002728 <UART_SetConfig+0x294>
 8002714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	035b      	lsls	r3, r3, #13
 800271a:	429a      	cmp	r2, r3
 800271c:	d204      	bcs.n	8002728 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	e0e7      	b.n	80028f8 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002728:	231a      	movs	r3, #26
 800272a:	2218      	movs	r2, #24
 800272c:	189b      	adds	r3, r3, r2
 800272e:	19db      	adds	r3, r3, r7
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	e0e0      	b.n	80028f8 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	429a      	cmp	r2, r3
 8002740:	d000      	beq.n	8002744 <UART_SetConfig+0x2b0>
 8002742:	e082      	b.n	800284a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002744:	231b      	movs	r3, #27
 8002746:	2218      	movs	r2, #24
 8002748:	189b      	adds	r3, r3, r2
 800274a:	19db      	adds	r3, r3, r7
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d834      	bhi.n	80027bc <UART_SetConfig+0x328>
 8002752:	009a      	lsls	r2, r3, #2
 8002754:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <UART_SetConfig+0x324>)
 8002756:	18d3      	adds	r3, r2, r3
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800275c:	f7ff f940 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 8002760:	0003      	movs	r3, r0
 8002762:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002764:	e033      	b.n	80027ce <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002766:	f7ff f951 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 800276a:	0003      	movs	r3, r0
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800276e:	e02e      	b.n	80027ce <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002770:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <UART_SetConfig+0x318>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	4013      	ands	r3, r2
 8002778:	d002      	beq.n	8002780 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800277a:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <UART_SetConfig+0x31c>)
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800277e:	e026      	b.n	80027ce <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <UART_SetConfig+0x320>)
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002784:	e023      	b.n	80027ce <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002786:	f7ff f87b 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 800278a:	0003      	movs	r3, r0
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800278e:	e01e      	b.n	80027ce <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002796:	e01a      	b.n	80027ce <UART_SetConfig+0x33a>
 8002798:	efff69f3 	.word	0xefff69f3
 800279c:	ffffcfff 	.word	0xffffcfff
 80027a0:	40004800 	.word	0x40004800
 80027a4:	fffff4ff 	.word	0xfffff4ff
 80027a8:	40004400 	.word	0x40004400
 80027ac:	40021000 	.word	0x40021000
 80027b0:	003d0900 	.word	0x003d0900
 80027b4:	00f42400 	.word	0x00f42400
 80027b8:	08002e10 	.word	0x08002e10
      default:
        pclk = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80027c0:	231a      	movs	r3, #26
 80027c2:	2218      	movs	r2, #24
 80027c4:	189b      	adds	r3, r3, r2
 80027c6:	19db      	adds	r3, r3, r7
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
        break;
 80027cc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d100      	bne.n	80027d6 <UART_SetConfig+0x342>
 80027d4:	e090      	b.n	80028f8 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d8:	005a      	lsls	r2, r3, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	18d2      	adds	r2, r2, r3
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0019      	movs	r1, r3
 80027e8:	0010      	movs	r0, r2
 80027ea:	f7fd fc8d 	bl	8000108 <__udivsi3>
 80027ee:	0003      	movs	r3, r0
 80027f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d921      	bls.n	800283c <UART_SetConfig+0x3a8>
 80027f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	025b      	lsls	r3, r3, #9
 80027fe:	429a      	cmp	r2, r3
 8002800:	d21c      	bcs.n	800283c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002804:	b29a      	uxth	r2, r3
 8002806:	200e      	movs	r0, #14
 8002808:	2418      	movs	r4, #24
 800280a:	1903      	adds	r3, r0, r4
 800280c:	19db      	adds	r3, r3, r7
 800280e:	210f      	movs	r1, #15
 8002810:	438a      	bics	r2, r1
 8002812:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	b29b      	uxth	r3, r3
 800281a:	2207      	movs	r2, #7
 800281c:	4013      	ands	r3, r2
 800281e:	b299      	uxth	r1, r3
 8002820:	1903      	adds	r3, r0, r4
 8002822:	19db      	adds	r3, r3, r7
 8002824:	1902      	adds	r2, r0, r4
 8002826:	19d2      	adds	r2, r2, r7
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1902      	adds	r2, r0, r4
 8002834:	19d2      	adds	r2, r2, r7
 8002836:	8812      	ldrh	r2, [r2, #0]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	e05d      	b.n	80028f8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800283c:	231a      	movs	r3, #26
 800283e:	2218      	movs	r2, #24
 8002840:	189b      	adds	r3, r3, r2
 8002842:	19db      	adds	r3, r3, r7
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e056      	b.n	80028f8 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800284a:	231b      	movs	r3, #27
 800284c:	2218      	movs	r2, #24
 800284e:	189b      	adds	r3, r3, r2
 8002850:	19db      	adds	r3, r3, r7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d822      	bhi.n	800289e <UART_SetConfig+0x40a>
 8002858:	009a      	lsls	r2, r3, #2
 800285a:	4b2f      	ldr	r3, [pc, #188]	@ (8002918 <UART_SetConfig+0x484>)
 800285c:	18d3      	adds	r3, r2, r3
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002862:	f7ff f8bd 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 8002866:	0003      	movs	r3, r0
 8002868:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800286a:	e021      	b.n	80028b0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800286c:	f7ff f8ce 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8002870:	0003      	movs	r3, r0
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002874:	e01c      	b.n	80028b0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002876:	4b29      	ldr	r3, [pc, #164]	@ (800291c <UART_SetConfig+0x488>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2210      	movs	r2, #16
 800287c:	4013      	ands	r3, r2
 800287e:	d002      	beq.n	8002886 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002880:	4b27      	ldr	r3, [pc, #156]	@ (8002920 <UART_SetConfig+0x48c>)
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002884:	e014      	b.n	80028b0 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002886:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <UART_SetConfig+0x490>)
 8002888:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800288a:	e011      	b.n	80028b0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800288c:	f7fe fff8 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 8002890:	0003      	movs	r3, r0
 8002892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002894:	e00c      	b.n	80028b0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800289c:	e008      	b.n	80028b0 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80028a2:	231a      	movs	r3, #26
 80028a4:	2218      	movs	r2, #24
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	19db      	adds	r3, r3, r7
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
        break;
 80028ae:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80028b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d020      	beq.n	80028f8 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	085a      	lsrs	r2, r3, #1
 80028bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028be:	18d2      	adds	r2, r2, r3
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0019      	movs	r1, r3
 80028c6:	0010      	movs	r0, r2
 80028c8:	f7fd fc1e 	bl	8000108 <__udivsi3>
 80028cc:	0003      	movs	r3, r0
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	d90a      	bls.n	80028ec <UART_SetConfig+0x458>
 80028d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	429a      	cmp	r2, r3
 80028de:	d205      	bcs.n	80028ec <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80028e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	e005      	b.n	80028f8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80028ec:	231a      	movs	r3, #26
 80028ee:	2218      	movs	r2, #24
 80028f0:	189b      	adds	r3, r3, r2
 80028f2:	19db      	adds	r3, r3, r7
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2200      	movs	r2, #0
 80028fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	2200      	movs	r2, #0
 8002902:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002904:	231a      	movs	r3, #26
 8002906:	2218      	movs	r2, #24
 8002908:	189b      	adds	r3, r3, r2
 800290a:	19db      	adds	r3, r3, r7
 800290c:	781b      	ldrb	r3, [r3, #0]
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b00e      	add	sp, #56	@ 0x38
 8002914:	bdb0      	pop	{r4, r5, r7, pc}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	08002e34 	.word	0x08002e34
 800291c:	40021000 	.word	0x40021000
 8002920:	003d0900 	.word	0x003d0900
 8002924:	00f42400 	.word	0x00f42400

08002928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	2201      	movs	r2, #1
 8002936:	4013      	ands	r3, r2
 8002938:	d00b      	beq.n	8002952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a4a      	ldr	r2, [pc, #296]	@ (8002a6c <UART_AdvFeatureConfig+0x144>)
 8002942:	4013      	ands	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d00b      	beq.n	8002974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4a43      	ldr	r2, [pc, #268]	@ (8002a70 <UART_AdvFeatureConfig+0x148>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	2204      	movs	r2, #4
 800297a:	4013      	ands	r3, r2
 800297c:	d00b      	beq.n	8002996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a3b      	ldr	r2, [pc, #236]	@ (8002a74 <UART_AdvFeatureConfig+0x14c>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	2208      	movs	r2, #8
 800299c:	4013      	ands	r3, r2
 800299e:	d00b      	beq.n	80029b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4a34      	ldr	r2, [pc, #208]	@ (8002a78 <UART_AdvFeatureConfig+0x150>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	2210      	movs	r2, #16
 80029be:	4013      	ands	r3, r2
 80029c0:	d00b      	beq.n	80029da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a7c <UART_AdvFeatureConfig+0x154>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	2220      	movs	r2, #32
 80029e0:	4013      	ands	r3, r2
 80029e2:	d00b      	beq.n	80029fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4a25      	ldr	r2, [pc, #148]	@ (8002a80 <UART_AdvFeatureConfig+0x158>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	2240      	movs	r2, #64	@ 0x40
 8002a02:	4013      	ands	r3, r2
 8002a04:	d01d      	beq.n	8002a42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a84 <UART_AdvFeatureConfig+0x15c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	035b      	lsls	r3, r3, #13
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d10b      	bne.n	8002a42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a15      	ldr	r2, [pc, #84]	@ (8002a88 <UART_AdvFeatureConfig+0x160>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	0019      	movs	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	2280      	movs	r2, #128	@ 0x80
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d00b      	beq.n	8002a64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a0e      	ldr	r2, [pc, #56]	@ (8002a8c <UART_AdvFeatureConfig+0x164>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	605a      	str	r2, [r3, #4]
  }
}
 8002a64:	46c0      	nop			@ (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	fffdffff 	.word	0xfffdffff
 8002a70:	fffeffff 	.word	0xfffeffff
 8002a74:	fffbffff 	.word	0xfffbffff
 8002a78:	ffff7fff 	.word	0xffff7fff
 8002a7c:	ffffefff 	.word	0xffffefff
 8002a80:	ffffdfff 	.word	0xffffdfff
 8002a84:	ffefffff 	.word	0xffefffff
 8002a88:	ff9fffff 	.word	0xff9fffff
 8002a8c:	fff7ffff 	.word	0xfff7ffff

08002a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b092      	sub	sp, #72	@ 0x48
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2284      	movs	r2, #132	@ 0x84
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002aa0:	f7fd ff9c 	bl	80009dc <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2208      	movs	r2, #8
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d12c      	bne.n	8002b10 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab8:	2280      	movs	r2, #128	@ 0x80
 8002aba:	0391      	lsls	r1, r2, #14
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4a46      	ldr	r2, [pc, #280]	@ (8002bd8 <UART_CheckIdleState+0x148>)
 8002ac0:	9200      	str	r2, [sp, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f000 f88c 	bl	8002be0 <UART_WaitOnFlagUntilTimeout>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d021      	beq.n	8002b10 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002acc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002adc:	f383 8810 	msr	PRIMASK, r3
}
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2180      	movs	r1, #128	@ 0x80
 8002aee:	438a      	bics	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2278      	movs	r2, #120	@ 0x78
 8002b08:	2100      	movs	r1, #0
 8002b0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e05f      	b.n	8002bd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d146      	bne.n	8002bac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b20:	2280      	movs	r2, #128	@ 0x80
 8002b22:	03d1      	lsls	r1, r2, #15
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd8 <UART_CheckIdleState+0x148>)
 8002b28:	9200      	str	r2, [sp, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f000 f858 	bl	8002be0 <UART_WaitOnFlagUntilTimeout>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d03b      	beq.n	8002bac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b34:	f3ef 8310 	mrs	r3, PRIMASK
 8002b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b3e:	2301      	movs	r3, #1
 8002b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f383 8810 	msr	PRIMASK, r3
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4921      	ldr	r1, [pc, #132]	@ (8002bdc <UART_CheckIdleState+0x14c>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f383 8810 	msr	PRIMASK, r3
}
 8002b64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b66:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b6c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b70:	2301      	movs	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f383 8810 	msr	PRIMASK, r3
}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	438a      	bics	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f383 8810 	msr	PRIMASK, r3
}
 8002b96:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2280      	movs	r2, #128	@ 0x80
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2278      	movs	r2, #120	@ 0x78
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e011      	b.n	8002bd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	2120      	movs	r1, #32
 8002bb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2278      	movs	r2, #120	@ 0x78
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b010      	add	sp, #64	@ 0x40
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	01ffffff 	.word	0x01ffffff
 8002bdc:	fffffedf 	.word	0xfffffedf

08002be0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf0:	e04b      	b.n	8002c8a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	d048      	beq.n	8002c8a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf8:	f7fd fef0 	bl	80009dc <HAL_GetTick>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d302      	bcc.n	8002c0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e04b      	b.n	8002caa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d035      	beq.n	8002c8a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2208      	movs	r2, #8
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d111      	bne.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2208      	movs	r2, #8
 8002c32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 f83c 	bl	8002cb4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2284      	movs	r2, #132	@ 0x84
 8002c40:	2108      	movs	r1, #8
 8002c42:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2278      	movs	r2, #120	@ 0x78
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e02c      	b.n	8002caa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	2380      	movs	r3, #128	@ 0x80
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d112      	bne.n	8002c8a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2280      	movs	r2, #128	@ 0x80
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 f81f 	bl	8002cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2284      	movs	r2, #132	@ 0x84
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2278      	movs	r2, #120	@ 0x78
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e00f      	b.n	8002caa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	4013      	ands	r3, r2
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	425a      	negs	r2, r3
 8002c9a:	4153      	adcs	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d0a4      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	@ 0x38
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc0:	617b      	str	r3, [r7, #20]
  return(result);
 8002cc2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f383 8810 	msr	PRIMASK, r3
}
 8002cd0:	46c0      	nop			@ (mov r8, r8)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4926      	ldr	r1, [pc, #152]	@ (8002d78 <UART_EndRxTransfer+0xc4>)
 8002cde:	400a      	ands	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f383 8810 	msr	PRIMASK, r3
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cee:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf2:	623b      	str	r3, [r7, #32]
  return(result);
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	f383 8810 	msr	PRIMASK, r3
}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2101      	movs	r1, #1
 8002d10:	438a      	bics	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1a:	f383 8810 	msr	PRIMASK, r3
}
 8002d1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d118      	bne.n	8002d5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d28:	f3ef 8310 	mrs	r3, PRIMASK
 8002d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d32:	2301      	movs	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f383 8810 	msr	PRIMASK, r3
}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2110      	movs	r1, #16
 8002d4a:	438a      	bics	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f383 8810 	msr	PRIMASK, r3
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2280      	movs	r2, #128	@ 0x80
 8002d5e:	2120      	movs	r1, #32
 8002d60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b00e      	add	sp, #56	@ 0x38
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	fffffedf 	.word	0xfffffedf

08002d7c <memset>:
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	1882      	adds	r2, r0, r2
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d100      	bne.n	8002d86 <memset+0xa>
 8002d84:	4770      	bx	lr
 8002d86:	7019      	strb	r1, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	e7f9      	b.n	8002d80 <memset+0x4>

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2600      	movs	r6, #0
 8002d90:	4c0c      	ldr	r4, [pc, #48]	@ (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4d0d      	ldr	r5, [pc, #52]	@ (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1b64      	subs	r4, r4, r5
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	2600      	movs	r6, #0
 8002d9e:	f000 f819 	bl	8002dd4 <_init>
 8002da2:	4c0a      	ldr	r4, [pc, #40]	@ (8002dcc <__libc_init_array+0x40>)
 8002da4:	4d0a      	ldr	r5, [pc, #40]	@ (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1b64      	subs	r4, r4, r5
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	00b3      	lsls	r3, r6, #2
 8002db2:	58eb      	ldr	r3, [r5, r3]
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	00b3      	lsls	r3, r6, #2
 8002dbc:	58eb      	ldr	r3, [r5, r3]
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08002e60 	.word	0x08002e60
 8002dc8:	08002e60 	.word	0x08002e60
 8002dcc:	08002e64 	.word	0x08002e64
 8002dd0:	08002e60 	.word	0x08002e60

08002dd4 <_init>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr

08002de0 <_fini>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr
